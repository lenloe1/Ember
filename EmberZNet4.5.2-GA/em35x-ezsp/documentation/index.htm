<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>EM35x EZSP</title>

</head><body>

<h2>EM35x EZSP Documentation</h2>

<h3> Release Notes / Quick Start Guide </h3>
<li> <strong><a href = "ReleaseNotes_EM35X_EZSP_Z4_5_2.html"> Release Notes EmberZNet 4.5.2 EM35x</a></strong>
	<p>This document is intended for project managers and software developers. It discusses the latest changes to EmberZNet stack (and associated utilities) including addition/deletion/deprecated of features/API. It details any additions/changes to Zigbee Application Profiles and discusses the changes to stack that reflect these changes. You can also find information about bugs that have been fixed since the last release and any pending ones.</p> 
<li> <strong><a href = "120-0085-000_MasterTnC.pdf"> Master Terms and Conditions</a> -- 120-0085-000</strong>
	<p>This is intended for project managers and lawyers. It details the terms and conditions binding the usage of Ember supplied software and hardware. It also discusses the regulations around providing these to your partners in the same or country as yours. If you seek further clarification on something discussed or not discussed in this document, please contact your Ember Account Manager or the Technical Support team.</p>

<h3> Hardware Technical Specs</h3>
<li> <a href = "120-2012-000_EM35x_NCP_BreakoutBoard.pdf"> EM35x NCP Breakout Board Technical Specification </a> -- 120-2012-000
<li> <a href = "120-2013-000_STM32_EM35x_NCP_Host_Module.pdf"> EM35x NCP Host (STM32) Module Technical Specification </a> -- 120-2013-000

<h3> Protocol Reference Guide</h3>
<li> <strong><a href = "120-3009-000_EZSPReferenceGuide.pdf"> EZSP (Ember ZNet Serial Protocol) Reference Guide </a> -- 120-3009-000</strong>
	<p>This document is intended for firmware developers and system architects. EmberZNet Serial Protocol (EZSP) is the protocol used by a host application processor to interact with the EmberZNet stack running on a Network Co- Processor (NCP). EZSP messages are sent between the host and the NCP over either a SPI or a UART interface. This guide details the protocol itself and the frame formats for different EZSP bound stack activities such as network management, messaging, bootloading and token access. The later parts of the document contains of a few sample EZSP transactions.</p>
<li> <strong><a href = "120-3010-000_UART-GatewayProtocolReference.pdf"> UART Gateway Protocol Reference </a> -- 120-3010-000</strong>
	<p>This document is intended for firmware developers and system architects. It describes the protocol used by EZSP-UART to reliably carry commands and responses between a host processor and a network co-processor, which may be an Ember EM250, EM260, EM351, or EM357. The topics discussed include a brief overview of Ember designed ASH (Asynchronus Seril Host) protocol, general ASH frame format, different ASH frames, and their oprations.</p>

<h3> Application Development </h3>
<li> <strong><a href = "120-3025-000_EmberZNet_API_STM32F103RET_Host.pdf"> EmberZNet API Reference for the STM32F103RET Host PDF</a> -- 120-3025-000</strong>
	<p>This document is intended for software and firmware engineers. It contains a comprehenshive list of APIs used to interface to the Ember Zigbee stack, em35x HAL and status of network that the application controls. These APIs concern network management, device and stack configuration, message fragmentation, serial communication, peripheral access and others. These APIs are independent of Application Framework and hence they can be used for developing applications that do no rely on Zigbee Cluster Library.</p>
<li> <strong><a href = "120-3025-000_API_STM32F103RET_Host\index.htm"> HTML version of EmberZNet API Reference: For the STM32F103RET Host </a> -- 120-3025-000</strong>
	<p>This document is intended for software and firmware engineers. It contains a comprehenshive list of APIs used to interface to the Ember Zigbee stack, em35x HAL and status of network that the application controls. These APIs concern network management, device and stack configuration, message fragmentation, serial communication, peripheral access and others. These APIs are independent of Application Framework and hence they can be used for developing applications that do no rely on Zigbee Cluster Library.</p>
<li> <strong><a href = "120-3026-000_EmberZNet_API_PC_Host.pdf"> EmberZNet API Reference for PC Host PDF</a> -- 120-3026-000</strong>
	<p>This document is intended for software and firmware engineers. It contains a comprehenshive list of APIs used to interface to the Ember Zigbee stack, em35x HAL and status of network that the application controls. These APIs concern network management, device and stack configuration, message fragmentation, serial communication, ASH (Asynchronus Serial Host) utilities and others. These APIs are independent of Application Framework and hence they can be used for developing applications that do no rely on Zigbee Cluster Library.</p>
<li> <strong><a href = "120-3026-000_API_PC_Host\index.htm"> HTML version of EmberZNet API Reference: For the PC Host </a> -- 120-3026-000</strong>
	<p>This document is intended for software and firmware engineers. It contains a comprehenshive list of APIs used to interface to the Ember Zigbee stack, em35x HAL and status of network that the application controls. These APIs concern network management, device and stack configuration, message fragmentation, serial communication, ASH (Asynchronus Serial Host) utilities and others. These APIs are independent of Application Framework and hence they can be used for developing applications that do no rely on Zigbee Cluster Library.</p>
<li> <strong><a href = "afv2-index.htm">Ember Application Framework V2 Documentation</a></strong>
	<p>This link leads to a wealth of information concerning Ember's Application Framework (AF) V2 including: </p>
	<ul>
		<li><strong>Release Notes AppFramework V2:</strong> 
			<p>This document is intended for project managers and software developers. It discusses the latest changes to the Application Framework including addition/deletion/deprecated of features/API. It details any additions to Zigbee Application Profiles and discusses the changes to framework that reflect this addition. You can also find information about bugs that have been fixed since the last release and any pending ones.</p> </li>
		<li><strong>AFV2 Developer Guide:</strong> 
			<p>This document is intended for software application engineers.  The Ember Application Framework is a body of embedded C code that can be configured by Ember’s AppBuilder to implement any ZigBee Cluster Library (ZCL) application. This guide covers the structure and usage of the Application Framework Version 2. The primary topics covered in this guide include AF Callback Interface, Time Handling, Event Management, Attributes Management, Plugin management, Sleepy Device management and ZCL command handling. All through the discussion, you will find dispersion of API calls relevant to the topic.</p> </li>
		<li><strong>AFV2 Command Line Interface Documentation (Alias: app/afv2-sampleApps.htm):</strong> 
			<p>This document is intended for software application engineers and systems architects.  This document discusses the CLI commands that can be used to control a node through a serial console (virtually via software on Telnet port 4900 or serially via PTI on Telnet port 4901 via InSight Adapter), provided that the application running on it is built with CLI support. This includes commands to send ZCL (for both SE and HA profiles) and ZDO messages to a remote node, create and send message buffers, manage the network state and stack tables of the local node.</p></li>
		<li><strong>AFV2 API:</strong>
			<p>This documentation is intended for software application engineers. This document contains an exhaustive list of the application framework API. These API's can be used to build and send ZCL messages in the application and to generate callbacks for various events such as attribute changes and stack changes. Besides these, this document also covers API utilities that assist in debugging, messaging and device control.</p> </li>
	</ul>
<li> <strong><a href = "ApplicationNotes\120-5049-000_EZSPUartHostInterfacingGuide.pdf"> EZSP-UART Host Interfacing Guide </a> -- 120-5049-000</strong>
	<p>This document is intended for firmware engineers. It describes procedures for initial tests of a host connected to an Ember ZigBee processor using EZSP-UART. It assumes that you have already read the <em>UART Gateway Protocol Reference Guide (120-3010-000)</em>. You should have a basic understanding of the UART Gateway protocol, as well as the signals needed by the UART interface.</p>
<li> <strong><a href = "ApplicationNotes\120-5066-000_EzspSpiHostInterfacingGuide.pdf"> EZSP-SPI Host Interfacing Guide </a> -- 120-5066-000</strong>
	<p>This document is intended for firmware engineers. It details the EZSP-SPI Protocol that is used by a host microcontroller to communicate with an Ember Network Co-Processor, or NCP, running the EmberZNet stack. It includes recommended procedures for developing and testing a driver for the EZSP-SPI Protocol on a new host microcontroller.</p>
<li> <strong><a href = "ApplicationNotes\120-5067-000_NewMicrosForNCP.pdf"> Bringing Up New Microcontrollers </a> -- 120-5067-000</strong>
	<p>This document is intended for project managers, firmware engineers and hardware engineers. It describes recommended practices and procedures for designing, developing, and testing the SPI Protocol on a new microcontroller that is interfaced to a Network Co-Processor (NCP) and using EmberZNet stack software. There are detailed discussions about physical interfaces  between the host and the co-processor interface followed by discussions about initialization of SPI transacation and extended communication between them. Other discussions include synchronizing of the SPI clock, interrupts and error conditions. To take full advantage of the content discussed here, you should read and understand the working of EZSP (refer to <em>EZSP reference guide</em>) and <em>EM35x Datasheet</em>.</p>
<li> <strong><a href = "ApplicationNotes\120-5070-000_SmartEnergyECCEnabledDeviceSetupProcess.pdf"> Smart Energy ECC-Enabled Device Setup </a> -- 120-5070-000</strong>
	<p>This application note is intended for project managers and firmware engineers. It describes how to set up a device with the security resources required to support Smart Energy (SE) security, which is based on certificate-based key establishment (CBKE) using Elliptic-Curve Cryptography (ECC). These steps involve obtaining a certificate and installation code, programming them onto the device, setting up unique security keys for incoming devices, and joining new devices with this unique security information. To understand the contents of this document, the reader must be familiar Smart Energy Profile Specification.</p>


<h3> Sample Applications </h3>
<li> <strong><a href = "..\app\sampleApps.html"> Sample Application Descriptions </a></strong>
	<p>This document is intended for software application engineers and systems architects.  This document discusses the CLI commands that can be used to control a node through a serial console (virtually via software on Telnet port 4900 or serially via PTI on Telnet port 4901 via InSight Adapter), provided that the application running on it is built with CLI support. This includes commands to send ZCL (for both SE and HA profiles) and ZDO messages to a remote node, create and send message buffers, manage the network state and stack tables of the local node. This doc also discusses the special CLI commandset that may be used to interact with utilities such as Nodetest or Standalone Bootloader Demo through serial port.</p>

			<p>Besides the CLI, this guide discusses the workings of the sensor-sink application and explains the different types of sensors that could exist in a network. Sensor-Sink application is independent of Application Framework, it runs directly on top of the stack and uses stack API's to build and run a network of sensors that report to a concentrator. This app demonstrates the workings of many-to-one-routing and provides a good starting point to developers that wish to build non Zigbee Cluster Library based applications. For source code and workbench projects corresponding to this application, please see "app/sensor" directory under your stack installation.</p>

<h3> Tools </h3>
<li> <strong><a href = "..\tool\image-builder\Image-Builder-Instructions.pdf"> Image Builder Instructions </a></strong>
	<p>This document is intended for software and firmware engineers.  Image-builder is Ember’s tool for creating ZigBee Over-the-air (OTA) bootloader files. It takes an existing file (or multiple files) and wraps them in the file format as declared in the Zigbee specification. This document provides a detailed explanation of various components involved in converting an EBL into an OTA image while providing instructions on how one can use Image-Builder to simplify this conversion. To understand the more about OTA upgrade cluster, please read "Over-the-air Plugins" section in <em>Application Framework v2 Developer’s Guide</em>.</p>

</html>
