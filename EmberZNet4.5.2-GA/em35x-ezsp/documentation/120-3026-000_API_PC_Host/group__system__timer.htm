<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">

<title>EmberZNet API Reference: For the PC Host platform: System Timer</title>

<LINK HREF="doxygen.css" REL="stylesheet" TYPE="text/css">

</head><body>

<table border="0" cellspacing="0" cellpadding="0"  width=100%>

<tr>

<td><img src="emberLogoSmallWebsiteVer.gif"></td>

<td> <div class="qindex">

<a class="qindex" href="main.htm">Home</a>&nbsp;

 | &nbsp;<a class="qindex" href="modules.htm">Modules</a>&nbsp;

 | &nbsp;<a class="qindex" href="annotated.htm">Data Structures</a>&nbsp;

 | &nbsp;<a class="qindex" href="files.htm">File List</a>&nbsp;

 | &nbsp;<a class="qindex" href="dirs.htm">Directories</a>&nbsp;

 | &nbsp;<a class="qindex" href="globals.htm">Index</a></div>

</td>

</table>
<!-- Generated by Doxygen 1.6.1 -->
<div class="contents">
<h1>System Timer<br/>
<small>
[<a class="el" href="group__hal.htm">Hardware Abstraction Layer (HAL) API Reference</a>]</small>
</h1>
<p>Functions that provide access to the system clock.  
<a href="#_details">More...</a></p>
<table border="0" cellpadding="0" cellspacing="0">
<tr><td colspan="2"><h2>Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__system__timer.htm#ga1650ceea2a1a53ccba7dbc74116564fd">halIdleForMilliseconds</a>(duration)</td></tr>
<tr><td colspan="2"><h2>Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__unix__gcc__config.htm#ga409a5c4bea6981c30b308684efa33f6f">int16u</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__system__timer.htm#gae0b935fd7ac5ee0070e31fb43bf82fba">halInternalStartSystemTimer</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__unix__gcc__config.htm#ga409a5c4bea6981c30b308684efa33f6f">int16u</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__system__timer.htm#gacbbf0cd5321a6bd054b7e99c7b492f08">halCommonGetInt16uMillisecondTick</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__unix__gcc__config.htm#ga2ba8e0357fdc7b7a450e6893ed81e8e3">int32u</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__system__timer.htm#ga7033d63e4ee56452e3e6c67d49f01ef2">halCommonGetInt32uMillisecondTick</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__unix__gcc__config.htm#ga409a5c4bea6981c30b308684efa33f6f">int16u</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__system__timer.htm#ga5aec52f8f5e5b85acacfb41a4a437593">halCommonGetInt16uQuarterSecondTick</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="error_8h.htm#a333d7a94b63d29c627eb16b0667371ec">EmberStatus</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__system__timer.htm#gaba299b09f7ca58322d8993b55aa80331">halSleepForQuarterSeconds</a> (<a class="el" href="group__unix__gcc__config.htm#ga2ba8e0357fdc7b7a450e6893ed81e8e3">int32u</a> *duration)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="error_8h.htm#a333d7a94b63d29c627eb16b0667371ec">EmberStatus</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__system__timer.htm#ga808d2ad3a55898b4ca37b1ad05ba88f6">halSleepForMilliseconds</a> (<a class="el" href="group__unix__gcc__config.htm#ga2ba8e0357fdc7b7a450e6893ed81e8e3">int32u</a> *duration)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="error_8h.htm#a333d7a94b63d29c627eb16b0667371ec">EmberStatus</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__system__timer.htm#ga9a16dcabe220dad1c36d2c0693f710ce">halCommonIdleForMilliseconds</a> (<a class="el" href="group__unix__gcc__config.htm#ga2ba8e0357fdc7b7a450e6893ed81e8e3">int32u</a> *duration)</td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<p>Functions that provide access to the system clock. </p>
<p>A single system tick (as returned by <a class="el" href="group__system__timer.htm#gacbbf0cd5321a6bd054b7e99c7b492f08" title="Returns the current system time in system ticks, as a 16-bit value.">halCommonGetInt16uMillisecondTick()</a> and <a class="el" href="group__system__timer.htm#ga7033d63e4ee56452e3e6c67d49f01ef2" title="Returns the current system time in system ticks, as a 32-bit value.">halCommonGetInt32uMillisecondTick()</a> ) is approximately 1 millisecond.</p>
<ul>
<li>When used with a 32.768kHz crystal, the system tick is 0.976 milliseconds.</li>
</ul>
<ul>
<li>When used with a 3.6864MHz crystal, the system tick is 1.111 milliseconds.</li>
</ul>
<p>A single quarter-second tick (as returned by <a class="el" href="group__system__timer.htm#ga5aec52f8f5e5b85acacfb41a4a437593" title="Returns the current system time in quarter second ticks, as a 16-bit value.">halCommonGetInt16uQuarterSecondTick()</a> ) is approximately 0.25 seconds.</p>
<p>The values used by the time support functions will wrap after an interval. The length of the interval depends on the length of the tick and the number of bits in the value. However, there is no issue when comparing time deltas of less than half this interval with a subtraction, if all data types are the same.</p>
<p>See <a class="el" href="system-timer_8h.htm">system-timer.h</a> for source code. </p>
<hr/><h2>Define Documentation</h2>
<a class="anchor" id="ga1650ceea2a1a53ccba7dbc74116564fd"></a><!-- doxytag: member="system&#45;timer.h::halIdleForMilliseconds" ref="ga1650ceea2a1a53ccba7dbc74116564fd" args="(duration)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define halIdleForMilliseconds</td>
          <td>(</td>
          <td class="paramtype">duration&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="system-timer_8h_source.htm#l00203">203</a> of file <a class="el" href="system-timer_8h_source.htm">system-timer.h</a>.</p>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="gae0b935fd7ac5ee0070e31fb43bf82fba"></a><!-- doxytag: member="system&#45;timer.h::halInternalStartSystemTimer" ref="gae0b935fd7ac5ee0070e31fb43bf82fba" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__unix__gcc__config.htm#ga409a5c4bea6981c30b308684efa33f6f">int16u</a> halInternalStartSystemTimer </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Initializes the system tick. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Time to update the async registers after RTC is started (units of 100 microseconds). </dd></dl>

</div>
</div>
<a class="anchor" id="gacbbf0cd5321a6bd054b7e99c7b492f08"></a><!-- doxytag: member="system&#45;timer.h::halCommonGetInt16uMillisecondTick" ref="gacbbf0cd5321a6bd054b7e99c7b492f08" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__unix__gcc__config.htm#ga409a5c4bea6981c30b308684efa33f6f">int16u</a> halCommonGetInt16uMillisecondTick </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Returns the current system time in system ticks, as a 16-bit value. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>The least significant 16 bits of the current system time, in system ticks. </dd></dl>

</div>
</div>
<a class="anchor" id="ga7033d63e4ee56452e3e6c67d49f01ef2"></a><!-- doxytag: member="system&#45;timer.h::halCommonGetInt32uMillisecondTick" ref="ga7033d63e4ee56452e3e6c67d49f01ef2" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__unix__gcc__config.htm#ga2ba8e0357fdc7b7a450e6893ed81e8e3">int32u</a> halCommonGetInt32uMillisecondTick </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Returns the current system time in system ticks, as a 32-bit value. </p>
<dl class="user"><dt><b>EmberStack Usage:</b></dt><dd>Unused, implementation optional.</dd></dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The least significant 32 bits of the current system time, in system ticks. </dd></dl>

</div>
</div>
<a class="anchor" id="ga5aec52f8f5e5b85acacfb41a4a437593"></a><!-- doxytag: member="system&#45;timer.h::halCommonGetInt16uQuarterSecondTick" ref="ga5aec52f8f5e5b85acacfb41a4a437593" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__unix__gcc__config.htm#ga409a5c4bea6981c30b308684efa33f6f">int16u</a> halCommonGetInt16uQuarterSecondTick </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Returns the current system time in quarter second ticks, as a 16-bit value. </p>
<dl class="user"><dt><b>EmberStack Usage:</b></dt><dd>Unused, implementation optional.</dd></dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The least significant 16 bits of the current system time, in system ticks multiplied by 256. </dd></dl>

</div>
</div>
<a class="anchor" id="gaba299b09f7ca58322d8993b55aa80331"></a><!-- doxytag: member="system&#45;timer.h::halSleepForQuarterSeconds" ref="gaba299b09f7ca58322d8993b55aa80331" args="(int32u *duration)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="error_8h.htm#a333d7a94b63d29c627eb16b0667371ec">EmberStatus</a> halSleepForQuarterSeconds </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__unix__gcc__config.htm#ga2ba8e0357fdc7b7a450e6893ed81e8e3">int32u</a> *&nbsp;</td>
          <td class="paramname"> <em>duration</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Uses the system timer to enter SLEEPMODE_WAKETIMER for approximately the specified amount of time (provided in quarter seconds). </p>
<p>This function returns <a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> and the duration parameter is decremented to 0 after sleeping for the specified amount of time. If an interrupt occurs that brings the chip out of sleep, the function returns <a class="el" href="group__status__codes.htm#gaa3baaf5a982a60d430d533a80b884380" title="Sleeping (for a duration) has been abnormally interrupted and exited prematurely...">EMBER_SLEEP_INTERRUPTED</a> and the duration parameter reports the amount of time remaining out of the original request.</p>
<dl class="note"><dt><b>Note:</b></dt><dd>This routine always enables interrupts.</dd>
<dd>
The maximum sleep time of the hardware is limited on AVR-based platforms to 8 seconds, on EM2XX-based platforms to 64 seconds, and on EM35x platforms to 48.5 days. Any sleep duration greater than this limit will wake up briefly (e.g. 16 microseconds) to reenable another sleep cycle.</dd></dl>
<p>The EM2xx has a 16 bit sleep timer, which normally runs at 1024Hz. In order to support long sleep durations, the chip will periodically wake up to manage a larger timer in software. This periodic wakeup is normally triggered once every 32 seconds. However, this period can be extended to once every 2.275 hours by building with <b>ENABLE_LONG_SLEEP_CYCLES</b> defined. This definition enables the use of a prescaler when sleeping for more than 63 seconds at a time. However, this define also imposes the following limitations:</p>
<p>1. The chip may only wake up from the sleep timer. (External GPIO wake events may not be used) 2. Each time a sleep cycle is performed, a loss of accuracy up to +/-750ms will be observed in the system timer.</p>
<dl class="user"><dt><b>EmberStack Usage:</b></dt><dd>Unused, implementation optional.</dd></dl>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>duration</em>&nbsp;</td><td>The amount of time, expressed in quarter seconds, that the micro should be placed into SLEEPMODE_WAKETIMER. When the function returns, this parameter provides the amount of time remaining out of the original sleep time request (normally the return value will be 0).</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>An EmberStatus value indicating the success or failure of the command. </dd></dl>

</div>
</div>
<a class="anchor" id="ga808d2ad3a55898b4ca37b1ad05ba88f6"></a><!-- doxytag: member="system&#45;timer.h::halSleepForMilliseconds" ref="ga808d2ad3a55898b4ca37b1ad05ba88f6" args="(int32u *duration)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="error_8h.htm#a333d7a94b63d29c627eb16b0667371ec">EmberStatus</a> halSleepForMilliseconds </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__unix__gcc__config.htm#ga2ba8e0357fdc7b7a450e6893ed81e8e3">int32u</a> *&nbsp;</td>
          <td class="paramname"> <em>duration</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Uses the system timer to enter SLEEPMODE_WAKETIMER for approximately the specified amount of time (provided in milliseconds). Note that since the system timer ticks at a rate of 1024Hz, a second is comprised of 1024 milliseconds in this function. </p>
<p>This function returns <a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> and the duration parameter is decremented to 0 after sleeping for the specified amount of time. If an interrupt occurs that brings the chip out of sleep, the function returns <a class="el" href="group__status__codes.htm#gaa3baaf5a982a60d430d533a80b884380" title="Sleeping (for a duration) has been abnormally interrupted and exited prematurely...">EMBER_SLEEP_INTERRUPTED</a> and the duration parameter reports the amount of time remaining out of the original request.</p>
<dl class="note"><dt><b>Note:</b></dt><dd>This routine always enables interrupts.</dd>
<dd>
This function is not implemented on AVR-based platforms.</dd>
<dd>
Sleep durations less than 3 milliseconds are not allowed on on EM2XX-based platforms. Any attempt to sleep for less than 3 milliseconds on EM2XX-based platforms will cause the function to immediately exit without sleeping and return <a class="el" href="group__status__codes.htm#gaa3baaf5a982a60d430d533a80b884380" title="Sleeping (for a duration) has been abnormally interrupted and exited prematurely...">EMBER_SLEEP_INTERRUPTED</a>.</dd>
<dd>
The maximum sleep time of the hardware is limited on EM2XX-based platforms to 32 seconds. Any sleep duration greater than this limit will wake up briefly (e.g. 16 microseconds) to reenable another sleep cycle. Due to this limitation, this function should not be used with durations within 3 milliseconds of a multiple 32 seconds. The short sleep cycle that results from such durations is not handled reliably by the system timer on EM2XX-based platforms. If a sleep duration within 3 milliseconds of a multiple of 32 seconds is desired, halSleepForQuarterSeconds should be used.</dd></dl>
<dl class="user"><dt><b>EmberStack Usage:</b></dt><dd>Unused, implementation optional.</dd></dl>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>duration</em>&nbsp;</td><td>The amount of time, expressed in milliseconds (1024 milliseconds = 1 second), that the micro should be placed into SLEEPMODE_WAKETIMER. When the function returns, this parameter provides the amount of time remaining out of the original sleep time request (normally the return value will be 0).</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>An EmberStatus value indicating the success or failure of the command. </dd></dl>

</div>
</div>
<a class="anchor" id="ga9a16dcabe220dad1c36d2c0693f710ce"></a><!-- doxytag: member="system&#45;timer.h::halCommonIdleForMilliseconds" ref="ga9a16dcabe220dad1c36d2c0693f710ce" args="(int32u *duration)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="error_8h.htm#a333d7a94b63d29c627eb16b0667371ec">EmberStatus</a> halCommonIdleForMilliseconds </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__unix__gcc__config.htm#ga2ba8e0357fdc7b7a450e6893ed81e8e3">int32u</a> *&nbsp;</td>
          <td class="paramname"> <em>duration</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Uses the system timer to enter SLEEPMODE_IDLE for approximately the specified amount of time (provided in milliseconds). </p>
<p>This function returns <a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> and the duration parameter is decremented to 0 after idling for the specified amount of time. If an interrupt occurs that brings the chip out of idle, the function returns <a class="el" href="group__status__codes.htm#gaa3baaf5a982a60d430d533a80b884380" title="Sleeping (for a duration) has been abnormally interrupted and exited prematurely...">EMBER_SLEEP_INTERRUPTED</a> and the duration parameter reports the amount of time remaining out of the original request.</p>
<dl class="note"><dt><b>Note:</b></dt><dd>This routine always enables interrupts.</dd></dl>
<dl class="user"><dt><b>EmberStack Usage:</b></dt><dd>Unused, implementation optional.</dd></dl>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>duration</em>&nbsp;</td><td>The amount of time, expressed in milliseconds, that the micro should be placed into SLEEPMODE_IDLE. When the function returns, this parameter provides the amount of time remaining out of the original idle time request (normally the return value will be 0).</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>An EmberStatus value indicating the success or failure of the command. </dd></dl>

</div>
</div>
</div>
<hr size="1">

<table border="0" cellspacing="0" cellpadding="0" width=100%>

<tr>

<td><address><small>

EmberZNet API Reference: For the PC Host platform. <br>

EmberZNet 4.5.0 - Document 120-3026-000-45xx.

</small></address>

</td>

<td align="right">

<address><small>

Copyright &copy; 2006-2010 by Ember Corporation. All rights reserved.<br>

Generated Fri Jun 24 15:13:00 2011 with <a href="http://www.doxygen.org/index.html">Doxygen</a> 1.6.1.

</small></address>

</td>

</tr>

</table>

</body>

</html>
