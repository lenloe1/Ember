<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">

<title>EmberZNet API Reference: For the PC Host platform: Forming and Joining Networks</title>

<LINK HREF="doxygen.css" REL="stylesheet" TYPE="text/css">

</head><body>

<table border="0" cellspacing="0" cellpadding="0"  width=100%>

<tr>

<td><img src="emberLogoSmallWebsiteVer.gif"></td>

<td> <div class="qindex">

<a class="qindex" href="main.htm">Home</a>&nbsp;

 | &nbsp;<a class="qindex" href="modules.htm">Modules</a>&nbsp;

 | &nbsp;<a class="qindex" href="annotated.htm">Data Structures</a>&nbsp;

 | &nbsp;<a class="qindex" href="files.htm">File List</a>&nbsp;

 | &nbsp;<a class="qindex" href="dirs.htm">Directories</a>&nbsp;

 | &nbsp;<a class="qindex" href="globals.htm">Index</a></div>

</td>

</table>
<!-- Generated by Doxygen 1.6.1 -->
<div class="contents">
<h1>Forming and Joining Networks<br/>
<small>
[<a class="el" href="group__apputil.htm">Application Utilities API Reference</a>]</small>
</h1><table border="0" cellpadding="0" cellspacing="0">
<tr><td colspan="2"><h2>Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__networks.htm#gadb41735016ec7137c5b9d63093512621">NETWORK_STORAGE_SIZE</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__networks.htm#gab46636621542ec8c636e4d95c422e4a5">NETWORK_STORAGE_SIZE_SHIFT</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__networks.htm#ga8d79111eca6026f525d494990544263f">FORM_AND_JOIN_MAX_NETWORKS</a></td></tr>
<tr><td colspan="2"><h2>Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="error_8h.htm#a333d7a94b63d29c627eb16b0667371ec">EmberStatus</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__networks.htm#gababdbd306b6145d7048aef8648efafc7">emberScanForUnusedPanId</a> (<a class="el" href="group__unix__gcc__config.htm#ga2ba8e0357fdc7b7a450e6893ed81e8e3">int32u</a> channelMask, <a class="el" href="group__unix__gcc__config.htm#gae712ac7a6479b38bdbb3286e80b72049">int8u</a> duration)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="error_8h.htm#a333d7a94b63d29c627eb16b0667371ec">EmberStatus</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__networks.htm#ga3d28639b02d01f83c6513c2c06ca7d43">emberScanForJoinableNetwork</a> (<a class="el" href="group__unix__gcc__config.htm#ga2ba8e0357fdc7b7a450e6893ed81e8e3">int32u</a> channelMask, <a class="el" href="group__unix__gcc__config.htm#gae712ac7a6479b38bdbb3286e80b72049">int8u</a> *extendedPanId)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="error_8h.htm#a333d7a94b63d29c627eb16b0667371ec">EmberStatus</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__networks.htm#ga48c6949bbd1c95b595aa6374513557ae">emberScanForNextJoinableNetwork</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__unix__gcc__config.htm#ga7670a4e8a07d9ebb00411948b0bbf86d">boolean</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__networks.htm#ga549be4143f4c8dbe8b1bdbc98c8abcd3">emberFormAndJoinIsScanning</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__networks.htm#gad8300b416cdbdf22b0c4aea75da61a08">emberUnusedPanIdFoundHandler</a> (<a class="el" href="group__ember__types.htm#ga7c5f647a9cd79c2ff7555d147e499447">EmberPanId</a> panId, <a class="el" href="group__unix__gcc__config.htm#gae712ac7a6479b38bdbb3286e80b72049">int8u</a> channel)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__networks.htm#ga4892b67d3f4aae7895cee1fb43c048f0">emberJoinableNetworkFoundHandler</a> (<a class="el" href="structEmberZigbeeNetwork.htm">EmberZigbeeNetwork</a> *networkFound, <a class="el" href="group__unix__gcc__config.htm#gae712ac7a6479b38bdbb3286e80b72049">int8u</a> lqi, <a class="el" href="group__unix__gcc__config.htm#gaf7aa9c3e7e9603e38247d0e319a4ca92">int8s</a> rssi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__networks.htm#ga81e2257ef31e6932dfeaaa6fece1abb4">emberScanErrorHandler</a> (<a class="el" href="error_8h.htm#a333d7a94b63d29c627eb16b0667371ec">EmberStatus</a> status)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__unix__gcc__config.htm#ga7670a4e8a07d9ebb00411948b0bbf86d">boolean</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__networks.htm#gafedb9e95d2b20b162215c6838fa9cae2">emberFormAndJoinScanCompleteHandler</a> (<a class="el" href="group__unix__gcc__config.htm#gae712ac7a6479b38bdbb3286e80b72049">int8u</a> channel, <a class="el" href="error_8h.htm#a333d7a94b63d29c627eb16b0667371ec">EmberStatus</a> status)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__unix__gcc__config.htm#ga7670a4e8a07d9ebb00411948b0bbf86d">boolean</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__networks.htm#gab863996607c6c553d55135974f165de9">emberFormAndJoinNetworkFoundHandler</a> (<a class="el" href="structEmberZigbeeNetwork.htm">EmberZigbeeNetwork</a> *networkFound, <a class="el" href="group__unix__gcc__config.htm#gae712ac7a6479b38bdbb3286e80b72049">int8u</a> lqi, <a class="el" href="group__unix__gcc__config.htm#gaf7aa9c3e7e9603e38247d0e319a4ca92">int8s</a> rssi)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__unix__gcc__config.htm#ga7670a4e8a07d9ebb00411948b0bbf86d">boolean</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__networks.htm#gaf81319f96804b104b01213247f6ebb77">emberFormAndJoinEnergyScanResultHandler</a> (<a class="el" href="group__unix__gcc__config.htm#gae712ac7a6479b38bdbb3286e80b72049">int8u</a> channel, <a class="el" href="group__unix__gcc__config.htm#gaf7aa9c3e7e9603e38247d0e319a4ca92">int8s</a> maxRssiValue)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__networks.htm#ga97f80355c6d39caae522c46482e6961e">emberFormAndJoinTick</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__networks.htm#ga00ed937b2d96a4c238ef1691c5007cfa">emberFormAndJoinTaskInit</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__networks.htm#ga2561de9535b9dde233711b8eaaaeef84">emberFormAndJoinRunTask</a> (void)</td></tr>
<tr><td colspan="2"><h2>Variables</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__unix__gcc__config.htm#ga7670a4e8a07d9ebb00411948b0bbf86d">boolean</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__networks.htm#gaa0274519a9ab4a843dba1fb0b574c1ef">emberEnableDualChannelScan</a></td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<p>Functions for finding an existing network to join and for finding an unused PAN id with which to form a network.</p>
<p>Summary of application requirements:</p>
<p>For the SOC:</p>
<ul>
<li>Define EMBER_APPLICATION_HAS_ENERGY_SCAN_RESULT_HANDLER in the configuration header.</li>
<li>Call <a class="el" href="group__networks.htm#ga97f80355c6d39caae522c46482e6961e">emberFormAndJoinTick()</a> regularly in the main loop.</li>
<li>Include form-and-join.c and form-and-join-node-adapter.c in the build.</li>
<li>Optionally include form-and-join-node-callbacks.c in the build.</li>
<li>If processor idling is desired: -- Call <a class="el" href="group__networks.htm#ga00ed937b2d96a4c238ef1691c5007cfa" title="When processor idling is desired on the SOC, this must be called to properly initialize...">emberFormAndJoinTaskInit()</a> to initialize the form and join task -- Call <a class="el" href="group__networks.htm#ga2561de9535b9dde233711b8eaaaeef84" title="When processor idling is desired on the SOC, this should be called regularly instead...">emberFormAndJoinRunTask()</a> regularly in the main loop instead of <a class="el" href="group__networks.htm#ga97f80355c6d39caae522c46482e6961e">emberFormAndJoinTick()</a></li>
</ul>
<p>For an EZSP Host:</p>
<ul>
<li>Define EZSP_APPLICATION_HAS_ENERGY_SCAN_RESULT_HANDLER in the configuration header.</li>
<li>Include form-and-join.c and form-and-join-host-adapter.c in the build.</li>
<li>Optionally include form-and-join-host-callbacks.c in the build.</li>
</ul>
<p>For either platform, the application can omit the form-and-join-*-callback.c file from the build and implement the callbacks itself if necessary. In this case the appropriate form-and-join callback function must be called from within each callback, as is done within the form-and-join-*-callback.c files.</p>
<p>On either platform, FORM_AND_JOIN_MAX_NETWORKS can be explicitly defined to limit (or expand) the number of joinable networks that the library will save for consideration during the scan process.</p>
<p>This library improves upon the form-and-join library from EmberZNet 3.2 and prior. The old library (form-and-join3_2) was removed from the release. The currently provided library is able to resume scanning for joinable networks from where it left off, via a call to <a class="el" href="group__networks.htm#ga48c6949bbd1c95b595aa6374513557ae" title="See emberScanForJoinableNetwork().">emberScanForNextJoinableNetwork()</a>. Thus if the first joinable network found is not the correct one, the application can continue scanning without starting from the beginning and without finding the same network that it has already rejected. The new library can also be used on the host processor. </p>
<hr/><h2>Define Documentation</h2>
<a class="anchor" id="gadb41735016ec7137c5b9d63093512621"></a><!-- doxytag: member="form&#45;and&#45;join.h::NETWORK_STORAGE_SIZE" ref="gadb41735016ec7137c5b9d63093512621" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define NETWORK_STORAGE_SIZE</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Number of bytes required to store relevant info for a saved network. </p>
<p>This constant represents the minimum number of bytes required to store all members of the NetworkInfo struct used in the adapter code. Its value should not be changed unless the underlying adapter code is updated accordingly. Note that this constant's value may be different than sizeof(NetworkInfo) because some compilers pad the structs to align on word boundaries. Thus, the adapter code stores/retrieves these pieces of data individually (to be platform-agnostic) rather than as a struct.</p>
<p>For efficiency's sake, this number should be kept to a power of 2 and not and not exceed 32 (PACKET_BUFFER_SIZE). </p>

<p>Definition at line <a class="el" href="form-and-join_8h_source.htm#l00071">71</a> of file <a class="el" href="form-and-join_8h_source.htm">form-and-join.h</a>.</p>

</div>
</div>
<a class="anchor" id="gab46636621542ec8c636e4d95c422e4a5"></a><!-- doxytag: member="form&#45;and&#45;join.h::NETWORK_STORAGE_SIZE_SHIFT" ref="gab46636621542ec8c636e4d95c422e4a5" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define NETWORK_STORAGE_SIZE_SHIFT</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Log_base2 of <a class="el" href="group__networks.htm#gadb41735016ec7137c5b9d63093512621" title="Number of bytes required to store relevant info for a saved network.">NETWORK_STORAGE_SIZE</a>. </p>

<p>Definition at line <a class="el" href="form-and-join_8h_source.htm#l00075">75</a> of file <a class="el" href="form-and-join_8h_source.htm">form-and-join.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga8d79111eca6026f525d494990544263f"></a><!-- doxytag: member="form&#45;and&#45;join.h::FORM_AND_JOIN_MAX_NETWORKS" ref="ga8d79111eca6026f525d494990544263f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define FORM_AND_JOIN_MAX_NETWORKS</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Number of joinable networks that can be remembered during the scan process. </p>
<p>Note for SoC Platforms: This is currently limited to a maximum of 15 due to the size of each network entry (16 bytes) and the EmberMessageBuffer API's requirement that total buffer storage length be kept to an 8-bit quantity (less than 256).</p>
<p>Note for EZSP Host Platforms: In the host implementation of this library, the storage size for the detected networks buffer is controlled by <a class="el" href="group__configuration.htm#ga3b89338e17b9a81228fd968836f64380" title="The size of the buffer for caching data during scans.">EZSP_HOST_FORM_AND_JOIN_BUFFER_SIZE</a>, so that limits the highest value that the host can set for FORM_AND_JOIN_MAX_NETWORKS. </p>

<p>Definition at line <a class="el" href="form-and-join_8h_source.htm#l00097">97</a> of file <a class="el" href="form-and-join_8h_source.htm">form-and-join.h</a>.</p>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="gababdbd306b6145d7048aef8648efafc7"></a><!-- doxytag: member="form&#45;and&#45;join.h::emberScanForUnusedPanId" ref="gababdbd306b6145d7048aef8648efafc7" args="(int32u channelMask, int8u duration)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="error_8h.htm#a333d7a94b63d29c627eb16b0667371ec">EmberStatus</a> emberScanForUnusedPanId </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__unix__gcc__config.htm#ga2ba8e0357fdc7b7a450e6893ed81e8e3">int32u</a>&nbsp;</td>
          <td class="paramname"> <em>channelMask</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__unix__gcc__config.htm#gae712ac7a6479b38bdbb3286e80b72049">int8u</a>&nbsp;</td>
          <td class="paramname"> <em>duration</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Find an unused PAN id. </p>
<p>Does an energy scan on the indicated channels and randomly chooses one from amongst those with the least average energy. Then picks a short PAN id that does not appear during an active scan on the chosen channel. The chosen PAN id and channel are returned via the <a class="el" href="group__networks.htm#gad8300b416cdbdf22b0c4aea75da61a08" title="A callback the application needs to implement.">emberUnusedPanIdFoundHandler()</a> callback. If an error occurs, the application is informed via the <a class="el" href="group__networks.htm#ga81e2257ef31e6932dfeaaa6fece1abb4" title="A callback the application needs to implement.">emberScanErrorHandler()</a>.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>channelMask</em>&nbsp;</td><td></td></tr>
    <tr><td valign="top"></td><td valign="top"><em>duration</em>&nbsp;</td><td>The duration of the energy scan. See the documentation for emberStartScan() in stack/include/network-formation.h for information on duration values. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>EMBER_LIBRARY_NOT_PRESENT if the form and join library is not available. </dd></dl>

</div>
</div>
<a class="anchor" id="ga3d28639b02d01f83c6513c2c06ca7d43"></a><!-- doxytag: member="form&#45;and&#45;join.h::emberScanForJoinableNetwork" ref="ga3d28639b02d01f83c6513c2c06ca7d43" args="(int32u channelMask, int8u *extendedPanId)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="error_8h.htm#a333d7a94b63d29c627eb16b0667371ec">EmberStatus</a> emberScanForJoinableNetwork </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__unix__gcc__config.htm#ga2ba8e0357fdc7b7a450e6893ed81e8e3">int32u</a>&nbsp;</td>
          <td class="paramname"> <em>channelMask</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__unix__gcc__config.htm#gae712ac7a6479b38bdbb3286e80b72049">int8u</a> *&nbsp;</td>
          <td class="paramname"> <em>extendedPanId</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Finds a joinable network. </p>
<p>Performs an active scan on the specified channels looking for networks that:</p>
<ol type="1">
<li>currently permit joining,</li>
<li>match the stack profile of the application,</li>
<li>match the extended PAN id argument if it is not NULL.</li>
</ol>
<p>Upon finding a matching network, the application is notified via the <a class="el" href="group__networks.htm#ga4892b67d3f4aae7895cee1fb43c048f0" title="A callback the application needs to implement.">emberJoinableNetworkFoundHandler()</a> callback, and scanning stops. If an error occurs during the scanning process, the application is informed via the <a class="el" href="group__networks.htm#ga81e2257ef31e6932dfeaaa6fece1abb4" title="A callback the application needs to implement.">emberScanErrorHandler()</a>, and scanning stops.</p>
<p>If the application determines that the discovered network is not the correct one, it may call <a class="el" href="group__networks.htm#ga48c6949bbd1c95b595aa6374513557ae" title="See emberScanForJoinableNetwork().">emberScanForNextJoinableNetwork()</a> to continue the scanning process where it was left off and find a different joinable network. If the next network is not the correct one, the application can continue to call <a class="el" href="group__networks.htm#ga48c6949bbd1c95b595aa6374513557ae" title="See emberScanForJoinableNetwork().">emberScanForNextJoinableNetwork()</a>. Each call must occur within 30 seconds of the previous one, otherwise the state of the scan process is deleted to free up memory. Calling <a class="el" href="group__networks.htm#ga3d28639b02d01f83c6513c2c06ca7d43" title="Finds a joinable network.">emberScanForJoinableNetwork()</a> causes any old state to be forgotten and starts scanning from the beginning.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>channelMask</em>&nbsp;</td><td></td></tr>
    <tr><td valign="top"></td><td valign="top"><em>extendedPanId</em>&nbsp;</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>EMBER_LIBRARY_NOT_PRESENT if the form and join library is not available. </dd></dl>

</div>
</div>
<a class="anchor" id="ga48c6949bbd1c95b595aa6374513557ae"></a><!-- doxytag: member="form&#45;and&#45;join.h::emberScanForNextJoinableNetwork" ref="ga48c6949bbd1c95b595aa6374513557ae" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="error_8h.htm#a333d7a94b63d29c627eb16b0667371ec">EmberStatus</a> emberScanForNextJoinableNetwork </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>See <a class="el" href="group__networks.htm#ga3d28639b02d01f83c6513c2c06ca7d43" title="Finds a joinable network.">emberScanForJoinableNetwork()</a>. </p>

</div>
</div>
<a class="anchor" id="ga549be4143f4c8dbe8b1bdbc98c8abcd3"></a><!-- doxytag: member="form&#45;and&#45;join.h::emberFormAndJoinIsScanning" ref="ga549be4143f4c8dbe8b1bdbc98c8abcd3" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__unix__gcc__config.htm#ga7670a4e8a07d9ebb00411948b0bbf86d">boolean</a> emberFormAndJoinIsScanning </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Returns true if and only if the form and join library is in the process of scanning and is therefore expecting scan results to be passed to it from the application. </p>

</div>
</div>
<a class="anchor" id="gad8300b416cdbdf22b0c4aea75da61a08"></a><!-- doxytag: member="form&#45;and&#45;join.h::emberUnusedPanIdFoundHandler" ref="gad8300b416cdbdf22b0c4aea75da61a08" args="(EmberPanId panId, int8u channel)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberUnusedPanIdFoundHandler </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga7c5f647a9cd79c2ff7555d147e499447">EmberPanId</a>&nbsp;</td>
          <td class="paramname"> <em>panId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__unix__gcc__config.htm#gae712ac7a6479b38bdbb3286e80b72049">int8u</a>&nbsp;</td>
          <td class="paramname"> <em>channel</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A callback the application needs to implement. </p>
<p>Notifies the application of the PAN id and channel found following a call to <a class="el" href="group__networks.htm#gababdbd306b6145d7048aef8648efafc7" title="Find an unused PAN id.">emberScanForUnusedPanId()</a>.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>panId</em>&nbsp;</td><td></td></tr>
    <tr><td valign="top"></td><td valign="top"><em>channel</em>&nbsp;</td><td></td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga4892b67d3f4aae7895cee1fb43c048f0"></a><!-- doxytag: member="form&#45;and&#45;join.h::emberJoinableNetworkFoundHandler" ref="ga4892b67d3f4aae7895cee1fb43c048f0" args="(EmberZigbeeNetwork *networkFound, int8u lqi, int8s rssi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberJoinableNetworkFoundHandler </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structEmberZigbeeNetwork.htm">EmberZigbeeNetwork</a> *&nbsp;</td>
          <td class="paramname"> <em>networkFound</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__unix__gcc__config.htm#gae712ac7a6479b38bdbb3286e80b72049">int8u</a>&nbsp;</td>
          <td class="paramname"> <em>lqi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__unix__gcc__config.htm#gaf7aa9c3e7e9603e38247d0e319a4ca92">int8s</a>&nbsp;</td>
          <td class="paramname"> <em>rssi</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A callback the application needs to implement. </p>
<p>Notifies the application of the network found after a call to <a class="el" href="group__networks.htm#ga3d28639b02d01f83c6513c2c06ca7d43" title="Finds a joinable network.">emberScanForJoinableNetwork()</a> or <a class="el" href="group__networks.htm#ga48c6949bbd1c95b595aa6374513557ae" title="See emberScanForJoinableNetwork().">emberScanForNextJoinableNetwork()</a>.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>networkFound</em>&nbsp;</td><td></td></tr>
    <tr><td valign="top"></td><td valign="top"><em>lqi</em>&nbsp;</td><td>The lqi value of the received beacon. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>rssi</em>&nbsp;</td><td>The rssi value of the received beacon. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga81e2257ef31e6932dfeaaa6fece1abb4"></a><!-- doxytag: member="form&#45;and&#45;join.h::emberScanErrorHandler" ref="ga81e2257ef31e6932dfeaaa6fece1abb4" args="(EmberStatus status)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberScanErrorHandler </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="error_8h.htm#a333d7a94b63d29c627eb16b0667371ec">EmberStatus</a>&nbsp;</td>
          <td class="paramname"> <em>status</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A callback the application needs to implement. </p>
<p>If an error occurs while scanning, this function is called and the scan effort is aborted.</p>
<p>Possible return status values are: </p>
<ul>
<li>
EMBER_INVALID_CALL: if <a class="el" href="group__networks.htm#ga48c6949bbd1c95b595aa6374513557ae" title="See emberScanForJoinableNetwork().">emberScanForNextJoinableNetwork()</a> is called more than 30 seconds after a previous call to <a class="el" href="group__networks.htm#ga3d28639b02d01f83c6513c2c06ca7d43" title="Finds a joinable network.">emberScanForJoinableNetwork()</a> or <a class="el" href="group__networks.htm#ga48c6949bbd1c95b595aa6374513557ae" title="See emberScanForJoinableNetwork().">emberScanForNextJoinableNetwork()</a>. </li>
<li>
EMBER_NO_BUFFERS: if there is not enough memory to start a scan. </li>
<li>
EMBER_NO_BEACONS: if no joinable beacons are found. </li>
<li>
EMBER_MAC_SCANNING: if a scan is already in progress. </li>
</ul>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>status</em>&nbsp;</td><td></td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gafedb9e95d2b20b162215c6838fa9cae2"></a><!-- doxytag: member="form&#45;and&#45;join.h::emberFormAndJoinScanCompleteHandler" ref="gafedb9e95d2b20b162215c6838fa9cae2" args="(int8u channel, EmberStatus status)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__unix__gcc__config.htm#ga7670a4e8a07d9ebb00411948b0bbf86d">boolean</a> emberFormAndJoinScanCompleteHandler </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__unix__gcc__config.htm#gae712ac7a6479b38bdbb3286e80b72049">int8u</a>&nbsp;</td>
          <td class="paramname"> <em>channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="error_8h.htm#a333d7a94b63d29c627eb16b0667371ec">EmberStatus</a>&nbsp;</td>
          <td class="paramname"> <em>status</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The application must call this function from within its emberScanCompleteHandler() (on the node) or ezspScanCompleteHandler() (on an EZSP host). Default callback implementations are provided in the form-and-join-*-callbacks.c files. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>TRUE iff the library made use of the call. </dd></dl>

</div>
</div>
<a class="anchor" id="gab863996607c6c553d55135974f165de9"></a><!-- doxytag: member="form&#45;and&#45;join.h::emberFormAndJoinNetworkFoundHandler" ref="gab863996607c6c553d55135974f165de9" args="(EmberZigbeeNetwork *networkFound, int8u lqi, int8s rssi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__unix__gcc__config.htm#ga7670a4e8a07d9ebb00411948b0bbf86d">boolean</a> emberFormAndJoinNetworkFoundHandler </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structEmberZigbeeNetwork.htm">EmberZigbeeNetwork</a> *&nbsp;</td>
          <td class="paramname"> <em>networkFound</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__unix__gcc__config.htm#gae712ac7a6479b38bdbb3286e80b72049">int8u</a>&nbsp;</td>
          <td class="paramname"> <em>lqi</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__unix__gcc__config.htm#gaf7aa9c3e7e9603e38247d0e319a4ca92">int8s</a>&nbsp;</td>
          <td class="paramname"> <em>rssi</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The application must call this function from within its emberNetworkFoundHandler() (on the node) or ezspNetworkFoundHandler() (on an EZSP host). Default callback implementations are provided in the form-and-join-*-callbacks.c files. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>TRUE iff the library made use of the call. </dd></dl>

</div>
</div>
<a class="anchor" id="gaf81319f96804b104b01213247f6ebb77"></a><!-- doxytag: member="form&#45;and&#45;join.h::emberFormAndJoinEnergyScanResultHandler" ref="gaf81319f96804b104b01213247f6ebb77" args="(int8u channel, int8s maxRssiValue)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__unix__gcc__config.htm#ga7670a4e8a07d9ebb00411948b0bbf86d">boolean</a> emberFormAndJoinEnergyScanResultHandler </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__unix__gcc__config.htm#gae712ac7a6479b38bdbb3286e80b72049">int8u</a>&nbsp;</td>
          <td class="paramname"> <em>channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__unix__gcc__config.htm#gaf7aa9c3e7e9603e38247d0e319a4ca92">int8s</a>&nbsp;</td>
          <td class="paramname"> <em>maxRssiValue</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The application must call this function from within its emberEnergyScanResultHandler() (on the node) or ezspEnergyScanResultHandler() (on an EZSP host). Default callback implementations are provided in the form-and-join-*-callbacks.c files. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>TRUE iff the library made use of the call. </dd></dl>

</div>
</div>
<a class="anchor" id="ga97f80355c6d39caae522c46482e6961e"></a><!-- doxytag: member="form&#45;and&#45;join.h::emberFormAndJoinTick" ref="ga97f80355c6d39caae522c46482e6961e" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberFormAndJoinTick </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Used by the form and join code on the node to time out a joinable scan after 30 seconds of inactivity. The application must call <a class="el" href="group__networks.htm#ga97f80355c6d39caae522c46482e6961e">emberFormAndJoinTick()</a> regularly. This function does not exist for the EZSP host library. </p>

</div>
</div>
<a class="anchor" id="ga00ed937b2d96a4c238ef1691c5007cfa"></a><!-- doxytag: member="form&#45;and&#45;join.h::emberFormAndJoinTaskInit" ref="ga00ed937b2d96a4c238ef1691c5007cfa" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberFormAndJoinTaskInit </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>When processor idling is desired on the SOC, this must be called to properly initialize the form and join library. </p>

</div>
</div>
<a class="anchor" id="ga2561de9535b9dde233711b8eaaaeef84"></a><!-- doxytag: member="form&#45;and&#45;join.h::emberFormAndJoinRunTask" ref="ga2561de9535b9dde233711b8eaaaeef84" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void emberFormAndJoinRunTask </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>When processor idling is desired on the SOC, this should be called regularly instead of <a class="el" href="group__networks.htm#ga97f80355c6d39caae522c46482e6961e">emberFormAndJoinTick()</a>. </p>

</div>
</div>
<hr/><h2>Variable Documentation</h2>
<a class="anchor" id="gaa0274519a9ab4a843dba1fb0b574c1ef"></a><!-- doxytag: member="form&#45;and&#45;join.h::emberEnableDualChannelScan" ref="gaa0274519a9ab4a843dba1fb0b574c1ef" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__unix__gcc__config.htm#ga7670a4e8a07d9ebb00411948b0bbf86d">boolean</a> <a class="el" href="group__networks.htm#gaa0274519a9ab4a843dba1fb0b574c1ef">emberEnableDualChannelScan</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>With some board layouts, the EM250 and EM260 are susceptible to a dual channel issue in which packets from 12 channels above or below can sometimes be heard faintly. This affects channels 11 - 14 and 23 - 26. Hardware reference designs EM250_REF_DES_LAT, version C0 and EM250_REF_DES_CER, version B0 solve the problem.</p>
<p>Setting the emberEnableDualChannelScan variable to TRUE enables a software workaround to the dual channel issue which can be used with vulnerable boards. After <a class="el" href="group__networks.htm#ga3d28639b02d01f83c6513c2c06ca7d43" title="Finds a joinable network.">emberScanForJoinableNetwork()</a> discovers a network on one of the susceptible channels, the channel number that differs by 12 is also scanned. If the same network can be heard there, the true channel is determined by comparing the link quality of the received beacons. The default value of emberEnableDualChannelScan is TRUE for the EM250 and EM260. It is not used on other platforms. </p>

</div>
</div>
</div>
<hr size="1">

<table border="0" cellspacing="0" cellpadding="0" width=100%>

<tr>

<td><address><small>

EmberZNet API Reference: For the PC Host platform. <br>

EmberZNet 4.5.0 - Document 120-3026-000-45xx.

</small></address>

</td>

<td align="right">

<address><small>

Copyright &copy; 2006-2010 by Ember Corporation. All rights reserved.<br>

Generated Fri Jun 24 15:13:00 2011 with <a href="http://www.doxygen.org/index.html">Doxygen</a> 1.6.1.

</small></address>

</td>

</tr>

</table>

</body>

</html>
