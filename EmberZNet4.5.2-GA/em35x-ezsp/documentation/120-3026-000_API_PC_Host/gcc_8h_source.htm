<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">

<title>EmberZNet API Reference: For the PC Host platform: gcc.h Source File</title>

<LINK HREF="doxygen.css" REL="stylesheet" TYPE="text/css">

</head><body>

<table border="0" cellspacing="0" cellpadding="0"  width=100%>

<tr>

<td><img src="emberLogoSmallWebsiteVer.gif"></td>

<td> <div class="qindex">

<a class="qindex" href="main.htm">Home</a>&nbsp;

 | &nbsp;<a class="qindex" href="modules.htm">Modules</a>&nbsp;

 | &nbsp;<a class="qindex" href="annotated.htm">Data Structures</a>&nbsp;

 | &nbsp;<a class="qindex" href="files.htm">File List</a>&nbsp;

 | &nbsp;<a class="qindex" href="dirs.htm">Directories</a>&nbsp;

 | &nbsp;<a class="qindex" href="globals.htm">Index</a></div>

</td>

</table>
<!-- Generated by Doxygen 1.6.1 -->
  <div class="navpath"><a class="el" href="dir_928392185f3941e33d232d8d861cbeaf.htm">hal</a>&nbsp;&raquo&nbsp;<a class="el" href="dir_4e2a585dad82a4ea0080f419c897dc8e.htm">micro</a>&nbsp;&raquo&nbsp;<a class="el" href="dir_0b59cb9117e88b40a76a0d2b68c0da5f.htm">unix</a>&nbsp;&raquo&nbsp;<a class="el" href="dir_3d230877af666f30c1767583f9564573.htm">compiler</a>
  </div>
<div class="contents">
<h1>gcc.h</h1><a href="gcc_8h.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00024"></a>00024 <span class="preprocessor">#ifndef __GCC_H__</span>
<a name="l00025"></a>00025 <span class="preprocessor"></span><span class="preprocessor">#define __GCC_H__</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span>
<a name="l00035"></a><a class="code" href="group__unix__gcc__config.htm#ga7670a4e8a07d9ebb00411948b0bbf86d">00035</a> <span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>  <a class="code" href="group__unix__gcc__config.htm#ga7670a4e8a07d9ebb00411948b0bbf86d" title="A typedef to make the size of the variable explicitly known.">boolean</a>;
<a name="l00036"></a><a class="code" href="group__unix__gcc__config.htm#gae712ac7a6479b38bdbb3286e80b72049">00036</a> <span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>  <a class="code" href="group__unix__gcc__config.htm#gae712ac7a6479b38bdbb3286e80b72049" title="A typedef to make the size of the variable explicitly known.">int8u</a>;
<a name="l00037"></a><a class="code" href="group__unix__gcc__config.htm#gaf7aa9c3e7e9603e38247d0e319a4ca92">00037</a> <span class="keyword">typedef</span> <span class="keywordtype">signed</span>   <span class="keywordtype">char</span>  <a class="code" href="group__unix__gcc__config.htm#gaf7aa9c3e7e9603e38247d0e319a4ca92" title="A typedef to make the size of the variable explicitly known.">int8s</a>;
<a name="l00038"></a><a class="code" href="group__unix__gcc__config.htm#ga409a5c4bea6981c30b308684efa33f6f">00038</a> <span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <a class="code" href="group__unix__gcc__config.htm#ga409a5c4bea6981c30b308684efa33f6f" title="A typedef to make the size of the variable explicitly known.">int16u</a>;
<a name="l00039"></a><a class="code" href="group__unix__gcc__config.htm#gaa025efe469f75150b783a831c4b67c3f">00039</a> <span class="keyword">typedef</span> <span class="keywordtype">signed</span>   <span class="keywordtype">short</span> <a class="code" href="group__unix__gcc__config.htm#gaa025efe469f75150b783a831c4b67c3f" title="A typedef to make the size of the variable explicitly known.">int16s</a>;
<a name="l00040"></a><a class="code" href="group__unix__gcc__config.htm#ga2ba8e0357fdc7b7a450e6893ed81e8e3">00040</a> <span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>   <a class="code" href="group__unix__gcc__config.htm#ga2ba8e0357fdc7b7a450e6893ed81e8e3" title="A typedef to make the size of the variable explicitly known.">int32u</a>;
<a name="l00041"></a><a class="code" href="group__unix__gcc__config.htm#gadb24cb50c464543685a4699c5d7ea660">00041</a> <span class="keyword">typedef</span> <span class="keywordtype">signed</span>   <span class="keywordtype">int</span>   <a class="code" href="group__unix__gcc__config.htm#gadb24cb50c464543685a4699c5d7ea660" title="A typedef to make the size of the variable explicitly known.">int32s</a>;
<a name="l00042"></a><a class="code" href="group__unix__gcc__config.htm#gab790cb95c4fa621fbaba2c19b1f77ba1">00042</a> <span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> <a class="code" href="group__unix__gcc__config.htm#gab790cb95c4fa621fbaba2c19b1f77ba1" title="A typedef to make the size of the variable explicitly known.">int64u</a>;
<a name="l00043"></a><a class="code" href="group__unix__gcc__config.htm#ga36abda5e1f1ef6791e8b1e106cacb46a">00043</a> <span class="keyword">typedef</span> <span class="keywordtype">signed</span>   <span class="keywordtype">long</span> <span class="keywordtype">long</span> <a class="code" href="group__unix__gcc__config.htm#ga36abda5e1f1ef6791e8b1e106cacb46a" title="A typedef to make the size of the variable explicitly known.">int64s</a>;
<a name="l00044"></a><a class="code" href="group__unix__gcc__config.htm#gaa80fca2d9f3519b788c0c2cfc2fb296e">00044</a> <span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  <a class="code" href="group__unix__gcc__config.htm#gaa80fca2d9f3519b788c0c2cfc2fb296e" title="A typedef to make the size of the variable explicitly known.">PointerType</a>;
<a name="l00046"></a>00046   
<a name="l00050"></a><a class="code" href="group__unix__gcc__config.htm#gabe39414e4403ea34572d829b72775efd">00050</a> <span class="preprocessor">#define HAL_HAS_INT64</span>
<a name="l00051"></a>00051 <span class="preprocessor"></span>
<a name="l00055"></a><a class="code" href="group__unix__gcc__config.htm#ga5cd18da9b188103037c75e5ed623b136">00055</a> <span class="preprocessor">#define _HAL_USE_COMMON_PGM_</span>
<a name="l00056"></a>00056 <span class="preprocessor"></span>
<a name="l00060"></a>00060 <span class="preprocessor">#ifdef DOXYGEN_SHOULD_SKIP_THIS</span>
<a name="l00061"></a><a class="code" href="group__unix__gcc__config.htm#ga7e71cc0eb54b859562fb1463dcce4f6f">00061</a> <span class="preprocessor"></span><span class="preprocessor">#define BIGENDIAN_CPU FALSE</span>
<a name="l00062"></a>00062 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00063"></a>00063 <span class="preprocessor"></span><span class="preprocessor">  #if defined(__i386__)</span>
<a name="l00064"></a>00064 <span class="preprocessor"></span><span class="preprocessor">    #define BIGENDIAN_CPU  FALSE</span>
<a name="l00065"></a>00065 <span class="preprocessor"></span><span class="preprocessor">  #elif defined(__APPLE__)</span>
<a name="l00066"></a>00066 <span class="preprocessor"></span><span class="preprocessor">    #define BIGENDIAN_CPU  TRUE</span>
<a name="l00067"></a>00067 <span class="preprocessor"></span><span class="preprocessor">  #elif defined(__ARM7__)</span>
<a name="l00068"></a>00068 <span class="preprocessor"></span><span class="preprocessor">    #define BIGENDIAN_CPU  FALSE</span>
<a name="l00069"></a>00069 <span class="preprocessor"></span><span class="preprocessor">  #else</span>
<a name="l00070"></a>00070 <span class="preprocessor"></span><span class="preprocessor">    #error endianess not defined</span>
<a name="l00071"></a>00071 <span class="preprocessor"></span><span class="preprocessor">  #endif</span>
<a name="l00072"></a>00072 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00073"></a>00073 <span class="preprocessor"></span>
<a name="l00074"></a>00074 
<a name="l00075"></a>00075 <span class="preprocessor">#ifndef DOXYGEN_SHOULD_SKIP_THIS</span>
<a name="l00076"></a>00076 <span class="preprocessor"></span><span class="preprocessor">  #define NO_STRIPPING</span>
<a name="l00077"></a>00077 <span class="preprocessor"></span><span class="preprocessor">  #define EEPROM</span>
<a name="l00078"></a>00078 <span class="preprocessor"></span>
<a name="l00079"></a>00079 <span class="preprocessor">  #ifndef DEBUG_LEVEL</span>
<a name="l00080"></a>00080 <span class="preprocessor"></span><span class="preprocessor">    #ifdef DEBUG</span>
<a name="l00081"></a>00081 <span class="preprocessor"></span><span class="preprocessor">      #define DEBUG_LEVEL FULL_DEBUG</span>
<a name="l00082"></a>00082 <span class="preprocessor"></span><span class="preprocessor">    #else</span>
<a name="l00083"></a>00083 <span class="preprocessor"></span><span class="preprocessor">      #define DEBUG_LEVEL NO_DEBUG</span>
<a name="l00084"></a>00084 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00085"></a>00085 <span class="preprocessor"></span><span class="preprocessor">  #endif</span>
<a name="l00086"></a>00086 <span class="preprocessor"></span>
<a name="l00087"></a>00087   <span class="comment">// Always include stdio.h and assert.h if running under Unix so that they</span>
<a name="l00088"></a>00088   <span class="comment">// can be used when debugging.</span>
<a name="l00089"></a>00089 <span class="preprocessor">  #include &lt;stdio.h&gt;</span>
<a name="l00090"></a>00090 <span class="preprocessor">  #include &lt;assert.h&gt;</span>
<a name="l00091"></a>00091 <span class="preprocessor">  #include &lt;stdarg.h&gt;</span>
<a name="l00092"></a>00092 
<a name="l00093"></a>00093 <span class="preprocessor">  #define NOP()</span>
<a name="l00094"></a>00094 <span class="preprocessor"></span><span class="preprocessor">  #define DECLARE_INTERRUPT_STATE</span>
<a name="l00095"></a>00095 <span class="preprocessor"></span><span class="preprocessor">  #define DECLARE_INTERRUPT_STATE_LITE</span>
<a name="l00096"></a>00096 <span class="preprocessor"></span><span class="preprocessor">  #define DISABLE_INTERRUPTS() do { } while(0)</span>
<a name="l00097"></a>00097 <span class="preprocessor"></span><span class="preprocessor">  #define DISABLE_INTERRUPTS_LITE() do { } while(0)</span>
<a name="l00098"></a>00098 <span class="preprocessor"></span><span class="preprocessor">  #define RESTORE_INTERRUPTS() do { } while(0)</span>
<a name="l00099"></a>00099 <span class="preprocessor"></span><span class="preprocessor">  #define RESTORE_INTERRUPTS_LITE() do { } while(0)</span>
<a name="l00100"></a>00100 <span class="preprocessor"></span><span class="preprocessor">  #define INTERRUPTS_ON() do { } while(0)</span>
<a name="l00101"></a>00101 <span class="preprocessor"></span><span class="preprocessor">  #define INTERRUPTS_OFF() do { } while(0)</span>
<a name="l00102"></a>00102 <span class="preprocessor"></span><span class="preprocessor">  #define INTERRUPTS_ARE_OFF() (FALSE)</span>
<a name="l00103"></a>00103 <span class="preprocessor"></span><span class="preprocessor">  #define ATOMIC(blah) { blah }</span>
<a name="l00104"></a>00104 <span class="preprocessor"></span><span class="preprocessor">  #define ATOMIC_LITE(blah) { blah }</span>
<a name="l00105"></a>00105 <span class="preprocessor"></span><span class="preprocessor">  #define HANDLE_PENDING_INTERRUPTS() do { } while(0)</span>
<a name="l00106"></a>00106 <span class="preprocessor"></span>
<a name="l00107"></a>00107 <span class="preprocessor">  #define LOG_MESSAGE_DUMP</span>
<a name="l00108"></a>00108 <span class="preprocessor"></span>
<a name="l00109"></a>00109 <span class="preprocessor">  #define UNUSED __attribute__ ((unused))</span>
<a name="l00110"></a>00110 <span class="preprocessor"></span><span class="preprocessor">  #define SIGNED_ENUM</span>
<a name="l00111"></a>00111 <span class="preprocessor"></span>
<a name="l00112"></a>00112   <span class="comment">// think different</span>
<a name="l00113"></a>00113 <span class="preprocessor">  #ifdef __APPLE__</span>
<a name="l00114"></a>00114 <span class="preprocessor"></span><span class="preprocessor">  #define __unix__</span>
<a name="l00115"></a>00115 <span class="preprocessor"></span><span class="preprocessor">  #endif</span>
<a name="l00116"></a>00116 <span class="preprocessor"></span>
<a name="l00117"></a>00117 <span class="preprocessor">  #ifdef WIN32</span>
<a name="l00118"></a>00118 <span class="preprocessor"></span>  <span class="comment">// undefine this here too</span>
<a name="l00119"></a>00119 <span class="preprocessor">  #define __attribute__(foo)</span>
<a name="l00120"></a>00120 <span class="preprocessor"></span><span class="preprocessor">  #endif</span>
<a name="l00121"></a>00121 <span class="preprocessor"></span>  
<a name="l00122"></a>00122 <span class="preprocessor">  #if defined(EMBER_TEST)</span>
<a name="l00123"></a>00123 <span class="preprocessor"></span><span class="preprocessor">    #define MAIN_FUNCTION_PARAMETERS void</span>
<a name="l00124"></a>00124 <span class="preprocessor"></span><span class="preprocessor">    #define MAIN_FUNCTION_ARGUMENTS  </span>
<a name="l00125"></a>00125 <span class="preprocessor"></span><span class="preprocessor">  #else</span>
<a name="l00126"></a>00126 <span class="preprocessor"></span><span class="preprocessor">    #define MAIN_FUNCTION_PARAMETERS int argc, char* argv[]</span>
<a name="l00127"></a>00127 <span class="preprocessor"></span><span class="preprocessor">    #define MAIN_FUNCTION_ARGUMENTS  argc, argv</span>
<a name="l00128"></a>00128 <span class="preprocessor"></span><span class="preprocessor">  #endif</span>
<a name="l00129"></a>00129 <span class="preprocessor"></span>  
<a name="l00130"></a>00130   <span class="comment">// Called by application main loops to let the simulator simulate.</span>
<a name="l00131"></a>00131   <span class="comment">// Not used on real hardware.</span>
<a name="l00132"></a>00132   <span class="keywordtype">void</span> simulatedTimePasses(<span class="keywordtype">void</span>);
<a name="l00133"></a>00133   <span class="keywordtype">void</span> simulatedTimePassesMs(<a class="code" href="group__unix__gcc__config.htm#ga2ba8e0357fdc7b7a450e6893ed81e8e3" title="A typedef to make the size of the variable explicitly known.">int32u</a> timeToNextAppEvent);
<a name="l00134"></a>00134   <span class="comment">// Called by the serial code when it wants to block.</span>
<a name="l00135"></a>00135   <span class="keywordtype">void</span> simulatedSerialTimePasses(<span class="keywordtype">void</span>);
<a name="l00136"></a>00136 <span class="preprocessor">#endif //DOXYGEN_SHOULD_SKIP_THIS</span>
<a name="l00137"></a>00137 <span class="preprocessor"></span>
<a name="l00138"></a>00138 
<a name="l00150"></a><a class="code" href="group__unix__gcc__config.htm#ga12ef4b3c98231a44d2c2cd3b04cec5a4">00150</a> <span class="preprocessor">#define halResetWatchdog()</span>
<a name="l00151"></a>00151 <span class="preprocessor"></span><span class="keywordtype">void</span> <a class="code" href="group__unix__gcc__config.htm#ga8a39a028776dc2065aa3f02c2a1fd1d6" title="Watchdog stub prototype.">halInternalResetWatchDog</a>(<span class="keywordtype">void</span>);
<a name="l00153"></a>00153 
<a name="l00154"></a>00154 
<a name="l00163"></a>00163 <span class="preprocessor">#include &lt;string.h&gt;</span>
<a name="l00164"></a><a class="code" href="group__unix__gcc__config.htm#gad7795912037ecd3781859d0895f051a8">00164</a> <span class="preprocessor">#define MEMSET(d,v,l)  memset(d,v,l)</span>
<a name="l00165"></a><a class="code" href="group__unix__gcc__config.htm#ga757f7559cae8d5d8a1a52fd78afaf916">00165</a> <span class="preprocessor"></span><span class="preprocessor">#define MEMCOPY(d,s,l)       memmove((d),(s),(l))</span>
<a name="l00166"></a><a class="code" href="group__unix__gcc__config.htm#ga597876271ae29123a4513e5a3e07e1b5">00166</a> <span class="preprocessor"></span><span class="preprocessor">#define MEMFASTCOPY(d,s,l) MEMCOPY(d,s,l)</span>
<a name="l00167"></a><a class="code" href="group__unix__gcc__config.htm#gaaf10cad513a5560c6132a768e050a5c7">00167</a> <span class="preprocessor"></span><span class="preprocessor">#define MEMCOMPARE(s0,s1,l) memcmp(s0, s1, l)</span>
<a name="l00168"></a><a class="code" href="group__unix__gcc__config.htm#ga0470dcdb8618b1d1140acfc239ea24d6">00168</a> <span class="preprocessor"></span><span class="preprocessor">#define MEMPGMCOMPARE(s0,s1,l) memcmp(s0, s1, l)</span>
<a name="l00169"></a><a class="code" href="group__unix__gcc__config.htm#gaebdb39ad5b093d6d3086a7d8bbeae893">00169</a> <span class="preprocessor"></span><span class="preprocessor">#define halCommonMemPGMCopy(d, s, l) MEMCOPY((d), (s), (l))</span>
<a name="l00170"></a><a class="code" href="group__unix__gcc__config.htm#ga13b80827ad3ef982d2805c45c169c451">00170</a> <span class="preprocessor"></span><span class="preprocessor">#define halCommonMemPGMCompare(s1, s2, l) MEMCOMPARE((s1), (s2), (l))</span>
<a name="l00171"></a>00171 <span class="preprocessor"></span>
<a name="l00172"></a>00172  
<a name="l00176"></a><a class="code" href="group__unix__gcc__config.htm#gaf947e7d809d6ff89fe93f6367c20f4c6">00176</a> <span class="preprocessor">#define _HAL_USE_COMMON_DIVMOD_</span>
<a name="l00177"></a>00177 <span class="preprocessor"></span>
<a name="l00181"></a><a class="code" href="group__unix__gcc__config.htm#gac6e2cc702734ab195fc0bdfedcacd1d3">00181</a> <span class="preprocessor">#define PLATCOMMONOKTOINCLUDE</span>
<a name="l00182"></a>00182 <span class="preprocessor"></span><span class="preprocessor">  #include &quot;<a class="code" href="platform-common_8h.htm">hal/micro/generic/compiler/platform-common.h</a>&quot;</span>
<a name="l00183"></a>00183 <span class="preprocessor">#undef PLATCOMMONOKTOINCLUDE</span>
<a name="l00184"></a>00184 <span class="preprocessor"></span>
<a name="l00185"></a>00185 <span class="preprocessor">#endif //__GCC_H__</span>
<a name="l00186"></a>00186 <span class="preprocessor"></span>
</pre></div></div>
<hr size="1">

<table border="0" cellspacing="0" cellpadding="0" width=100%>

<tr>

<td><address><small>

EmberZNet API Reference: For the PC Host platform. <br>

EmberZNet 4.5.0 - Document 120-3026-000-45xx.

</small></address>

</td>

<td align="right">

<address><small>

Copyright &copy; 2006-2010 by Ember Corporation. All rights reserved.<br>

Generated Fri Jun 24 15:13:00 2011 with <a href="http://www.doxygen.org/index.html">Doxygen</a> 1.6.1.

</small></address>

</td>

</tr>

</table>

</body>

</html>
