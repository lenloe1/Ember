<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">

<title>EmberZNet API Reference: For the STM32F103RET Host platform: Microcontroller General Functionality</title>

<LINK HREF="doxygen.css" REL="stylesheet" TYPE="text/css">

</head><body>

<table border="0" cellspacing="0" cellpadding="0"  width=100%>

<tr>

<td><img src="emberLogoSmallWebsiteVer.gif"></td>

<td> <div class="qindex">

<a class="qindex" href="main.htm">Home</a>&nbsp;

 | &nbsp;<a class="qindex" href="modules.htm">Modules</a>&nbsp;

 | &nbsp;<a class="qindex" href="annotated.htm">Data Structures</a>&nbsp;

 | &nbsp;<a class="qindex" href="files.htm">File List</a>&nbsp;

 | &nbsp;<a class="qindex" href="dirs.htm">Directories</a>&nbsp;

 | &nbsp;<a class="qindex" href="globals.htm">Index</a></div>

</td>

</table>
<!-- Generated by Doxygen 1.6.1 -->
<div class="contents">
<h1>Microcontroller General Functionality<br/>
<small>
[<a class="el" href="group__hal.htm">Hardware Abstraction Layer (HAL) API Reference</a>]</small>
</h1>
<p>HAL functions common across all microcontroller-specific files.  
<a href="#_details">More...</a></p>
<table border="0" cellpadding="0" cellspacing="0">
<tr><td colspan="2"><h2>Modules</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__host.htm">STM32F103RET General Functionality</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f10x__conf.htm">ST Microcontroller Standard Peripherals Library Inclusions and Definitions</a></td></tr>
<tr><td colspan="2"><h2>Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__host.htm#gabb42f7171eba6959a54c6e6d9aeca64e">MICRO_DISABLE_WATCH_DOG_KEY</a></td></tr>
<tr><td colspan="2"><h2>Enumerations</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__host.htm#gace58749df14c14b64252eb55f40d2c32">SleepModes</a> { <br/>
&nbsp;&nbsp;<a class="el" href="group__host.htm#ggace58749df14c14b64252eb55f40d2c32a4b1e70cf7dd0396d75a5ef3bc357694a">SLEEPMODE_RUNNING</a>, 
<br/>
&nbsp;&nbsp;<a class="el" href="group__host.htm#ggace58749df14c14b64252eb55f40d2c32a8dec81d54908044ef56016aee3b1b506">SLEEPMODE_IDLE</a>, 
<br/>
&nbsp;&nbsp;<a class="el" href="group__host.htm#ggace58749df14c14b64252eb55f40d2c32a93af1c45a33be62df00d0ab82ef04128">SLEEPMODE_WAKETIMER</a>, 
<br/>
&nbsp;&nbsp;<a class="el" href="group__host.htm#ggace58749df14c14b64252eb55f40d2c32a4c95cce8a2fe32d302ce3a42a74c58d1">SLEEPMODE_MAINTAINTIMER</a>, 
<br/>
&nbsp;&nbsp;<a class="el" href="group__host.htm#ggace58749df14c14b64252eb55f40d2c32a559adb5abaebc7504743f8684ab16f28">SLEEPMODE_NOTIMER</a>, 
<br/>
&nbsp;&nbsp;<a class="el" href="group__host.htm#ggace58749df14c14b64252eb55f40d2c32a8d06b6cc298a4a34eaca616b86f800d5">SLEEPMODE_RESERVED</a>, 
<br/>
&nbsp;&nbsp;<a class="el" href="group__host.htm#ggace58749df14c14b64252eb55f40d2c32a0f74b29aa0a12fbc2c31db42392101d7">SLEEPMODE_POWERDOWN</a>, 
<br/>
&nbsp;&nbsp;<a class="el" href="group__host.htm#ggace58749df14c14b64252eb55f40d2c32a34e3924778494e4fd21702fb4fbed0b2">SLEEPMODE_POWERSAVE</a>
<br/>
 }</td></tr>
<tr><td colspan="2"><h2>Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__host.htm#gafd89c1650df524d95aef39b8bc38170d">halInit</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__host.htm#ga3550a689dc90ddd9d7d973bb154dd909">halReboot</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__host.htm#ga467bf8ac5d5964ca282f332f4e394654">halPowerUp</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__host.htm#gae13140ae48ea28772b67717f0d28f5e9">halPowerDown</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__host.htm#ga7ea499662dd11955f9f3cc340e2455b8">halInternalEnableWatchDog</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__host.htm#ga81c4a9744062969d68ab3a3ce56286c5">halInternalDisableWatchDog</a> (<a class="el" href="group__stm32f103ret__iar__config.htm#ga29edc2328533c8dbc46be2d7b654c749">int8u</a> magicKey)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__host.htm#ga81df7d5e74c518f1cee0c40ce8c2a199">halCommonDelayMicroseconds</a> (<a class="el" href="group__stm32f103ret__iar__config.htm#ga40790a257990626db514387099889f37">int16u</a> us)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__host.htm#ga3b180f12872a4b39217327000947fe8d">halCommonDelayMilliseconds</a> (<a class="el" href="group__stm32f103ret__iar__config.htm#ga40790a257990626db514387099889f37">int16u</a> ms)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__host.htm#gac71eaac4357469bf7dd17571585a5db3">halInternalAssertFailed</a> (PGM_P filename, int linenumber)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__stm32f103ret__iar__config.htm#ga29edc2328533c8dbc46be2d7b654c749">int8u</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__host.htm#ga3d08021495e9082c02fa113e624c8cb2">halGetResetInfo</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">PGM_P&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__host.htm#ga7e5131c65da9fcf7ab185503f4137799">halGetResetString</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__host.htm#gaad3b617d26789fb6c4789847a007eaad">halStackSeedRandom</a> (<a class="el" href="group__stm32f103ret__iar__config.htm#ga05aebcd1ffd9d69bda7b936f0cbd64b5">int32u</a> seed)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__stm32f103ret__iar__config.htm#ga40790a257990626db514387099889f37">int16u</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__host.htm#ga92d978a2b55bcb6d8ffe996e9a768f57">halCommonGetRandom</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__host.htm#ga6d05736655f1a012dc969d1d912e835b">halSleep</a> (<a class="el" href="group__host.htm#gace58749df14c14b64252eb55f40d2c32">SleepModes</a> sleepMode)</td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<p>HAL functions common across all microcontroller-specific files. </p>
<dl class="note"><dt><b>Note:</b></dt><dd>The micro specific definitions, <a class="el" href="group__stm32f103ret__host.htm">STM32F103RET General Functionality</a>, is chosen by the build include path pointing at the appropriate directoy.</dd></dl>
<p>See <a class="el" href="micro-common_8h.htm">micro-common.h</a> for source code. </p>
<hr/><h2>Define Documentation</h2>
<a class="anchor" id="gabb42f7171eba6959a54c6e6d9aeca64e"></a><!-- doxytag: member="micro&#45;common.h::MICRO_DISABLE_WATCH_DOG_KEY" ref="gabb42f7171eba6959a54c6e6d9aeca64e" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define MICRO_DISABLE_WATCH_DOG_KEY</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The value that must be passed as the single parameter to <a class="el" href="group__host.htm#ga81c4a9744062969d68ab3a3ce56286c5" title="Disables the watchdog timer, if there is one and it can be disabled.">halInternalDisableWatchDog()</a> in order to sucessfully disable the watchdog timer. </p>

<p>Definition at line <a class="el" href="micro-common_8h_source.htm#l00041">41</a> of file <a class="el" href="micro-common_8h_source.htm">micro-common.h</a>.</p>

</div>
</div>
<hr/><h2>Enumeration Type Documentation</h2>
<a class="anchor" id="gace58749df14c14b64252eb55f40d2c32"></a><!-- doxytag: member="micro&#45;common.h::SleepModes" ref="gace58749df14c14b64252eb55f40d2c32" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="group__host.htm#gace58749df14c14b64252eb55f40d2c32">SleepModes</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Enumerations for the possible microcontroller sleep modes. </p>
<p>NOTE: Refer to a specific micro's implementation of <a class="el" href="group__host.htm#ga6d05736655f1a012dc969d1d912e835b" title="Puts the microcontroller to sleep in a specified mode.">halSleep()</a> to see what modes are actually supported.</p>
<ul>
<li>SLEEPMODE_RUNNING Everything is active and running. In practice this mode is not used, but it is defined for completeness of information.</li>
</ul>
<ul>
<li>SLEEPMODE_IDLE Only the CPU is idled. The rest of the chip continues runing normally. The chip will wake from any interrupt.</li>
</ul>
<ul>
<li>SLEEPMODE_WAKETIMER The sleep timer clock sources remain running. The RC is always running and the 32kHz XTAL depends on system timer config. Wakeup is possible from both GPIO and the sleep timer. System time is maintained. The sleep timer is assumed to be configured properly for wake events.</li>
</ul>
<ul>
<li>SLEEPMODE_MAINTAINTIMER The sleep timer clock sources remain running. The RC is always running and the 32kHz XTAL depends on the board header. Wakeup is possible from only GPIO. System time is maintained.</li>
</ul>
<ul>
<li>SLEEPMODE_NOTIMER The sleep timer clock sources (both RC and XTAL) are turned off. Wakeup is possible from only GPIO. System time is lost.</li>
</ul>
<ul>
<li>SLEEPMODE_RESERVED Reserved/Unused</li>
<li>SLEEPMODE_POWERDOWN Deprecated</li>
<li>SLEEPMODE_POWERSAVE Deprecated </li>
</ul>
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="ggace58749df14c14b64252eb55f40d2c32a4b1e70cf7dd0396d75a5ef3bc357694a"></a><!-- doxytag: member="SLEEPMODE_RUNNING" ref="ggace58749df14c14b64252eb55f40d2c32a4b1e70cf7dd0396d75a5ef3bc357694a" args="" -->SLEEPMODE_RUNNING</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggace58749df14c14b64252eb55f40d2c32a8dec81d54908044ef56016aee3b1b506"></a><!-- doxytag: member="SLEEPMODE_IDLE" ref="ggace58749df14c14b64252eb55f40d2c32a8dec81d54908044ef56016aee3b1b506" args="" -->SLEEPMODE_IDLE</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggace58749df14c14b64252eb55f40d2c32a93af1c45a33be62df00d0ab82ef04128"></a><!-- doxytag: member="SLEEPMODE_WAKETIMER" ref="ggace58749df14c14b64252eb55f40d2c32a93af1c45a33be62df00d0ab82ef04128" args="" -->SLEEPMODE_WAKETIMER</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggace58749df14c14b64252eb55f40d2c32a4c95cce8a2fe32d302ce3a42a74c58d1"></a><!-- doxytag: member="SLEEPMODE_MAINTAINTIMER" ref="ggace58749df14c14b64252eb55f40d2c32a4c95cce8a2fe32d302ce3a42a74c58d1" args="" -->SLEEPMODE_MAINTAINTIMER</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggace58749df14c14b64252eb55f40d2c32a559adb5abaebc7504743f8684ab16f28"></a><!-- doxytag: member="SLEEPMODE_NOTIMER" ref="ggace58749df14c14b64252eb55f40d2c32a559adb5abaebc7504743f8684ab16f28" args="" -->SLEEPMODE_NOTIMER</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggace58749df14c14b64252eb55f40d2c32a8d06b6cc298a4a34eaca616b86f800d5"></a><!-- doxytag: member="SLEEPMODE_RESERVED" ref="ggace58749df14c14b64252eb55f40d2c32a8d06b6cc298a4a34eaca616b86f800d5" args="" -->SLEEPMODE_RESERVED</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggace58749df14c14b64252eb55f40d2c32a0f74b29aa0a12fbc2c31db42392101d7"></a><!-- doxytag: member="SLEEPMODE_POWERDOWN" ref="ggace58749df14c14b64252eb55f40d2c32a0f74b29aa0a12fbc2c31db42392101d7" args="" -->SLEEPMODE_POWERDOWN</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ggace58749df14c14b64252eb55f40d2c32a34e3924778494e4fd21702fb4fbed0b2"></a><!-- doxytag: member="SLEEPMODE_POWERSAVE" ref="ggace58749df14c14b64252eb55f40d2c32a34e3924778494e4fd21702fb4fbed0b2" args="" -->SLEEPMODE_POWERSAVE</em>&nbsp;</td><td>
</td></tr>
</table>
</dd>
</dl>

<p>Definition at line <a class="el" href="micro-common_8h_source.htm#l00157">157</a> of file <a class="el" href="micro-common_8h_source.htm">micro-common.h</a>.</p>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="gafd89c1650df524d95aef39b8bc38170d"></a><!-- doxytag: member="micro&#45;common.h::halInit" ref="gafd89c1650df524d95aef39b8bc38170d" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void halInit </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Initializes microcontroller-specific peripherals. </p>

</div>
</div>
<a class="anchor" id="ga3550a689dc90ddd9d7d973bb154dd909"></a><!-- doxytag: member="micro&#45;common.h::halReboot" ref="ga3550a689dc90ddd9d7d973bb154dd909" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void halReboot </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Restarts the microcontroller. </p>

</div>
</div>
<a class="anchor" id="ga467bf8ac5d5964ca282f332f4e394654"></a><!-- doxytag: member="micro&#45;common.h::halPowerUp" ref="ga467bf8ac5d5964ca282f332f4e394654" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void halPowerUp </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Powers up microcontroller peripherals. </p>

</div>
</div>
<a class="anchor" id="gae13140ae48ea28772b67717f0d28f5e9"></a><!-- doxytag: member="micro&#45;common.h::halPowerDown" ref="gae13140ae48ea28772b67717f0d28f5e9" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void halPowerDown </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Powers down microcontroller peripherals. </p>

</div>
</div>
<a class="anchor" id="ga7ea499662dd11955f9f3cc340e2455b8"></a><!-- doxytag: member="micro&#45;common.h::halInternalEnableWatchDog" ref="ga7ea499662dd11955f9f3cc340e2455b8" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void halInternalEnableWatchDog </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Enables the watchdog timer, if there is one and it is reasonable to be enabled. </p>

</div>
</div>
<a class="anchor" id="ga81c4a9744062969d68ab3a3ce56286c5"></a><!-- doxytag: member="micro&#45;common.h::halInternalDisableWatchDog" ref="ga81c4a9744062969d68ab3a3ce56286c5" args="(int8u magicKey)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void halInternalDisableWatchDog </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__stm32f103ret__iar__config.htm#ga29edc2328533c8dbc46be2d7b654c749">int8u</a>&nbsp;</td>
          <td class="paramname"> <em>magicKey</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Disables the watchdog timer, if there is one and it can be disabled. </p>
<dl class="note"><dt><b>Note:</b></dt><dd>To prevent the watchdog from being disabled accidentally, a magic key must be provided.</dd></dl>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>magicKey</em>&nbsp;</td><td>A value (<a class="el" href="group__host.htm#gabb42f7171eba6959a54c6e6d9aeca64e" title="The value that must be passed as the single parameter to halInternalDisableWatchDog()...">MICRO_DISABLE_WATCH_DOG_KEY</a>) that enables the function. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga81df7d5e74c518f1cee0c40ce8c2a199"></a><!-- doxytag: member="micro&#45;common.h::halCommonDelayMicroseconds" ref="ga81df7d5e74c518f1cee0c40ce8c2a199" args="(int16u us)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void halCommonDelayMicroseconds </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__stm32f103ret__iar__config.htm#ga40790a257990626db514387099889f37">int16u</a>&nbsp;</td>
          <td class="paramname"> <em>us</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Blocks the current thread of execution for the specified amount of time, in microseconds. </p>
<p>The function is implemented with either cycle-counted busy loops or a convenient timer. It is intended to create the short blocking delays such as when interfacing with hardware peripherals.</p>
<p>The accuracy of the timing provided by this function is not specified, but a best faith effort is obtain an accurate delay. The implementation may be changed, but this function should be reasonably accurate.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>us</em>&nbsp;</td><td>The specified time, in microseconds. Values should be between 1 and 65535 microseconds. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga3b180f12872a4b39217327000947fe8d"></a><!-- doxytag: member="micro&#45;common.h::halCommonDelayMilliseconds" ref="ga3b180f12872a4b39217327000947fe8d" args="(int16u ms)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void halCommonDelayMilliseconds </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__stm32f103ret__iar__config.htm#ga40790a257990626db514387099889f37">int16u</a>&nbsp;</td>
          <td class="paramname"> <em>ms</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Blocks the current thread of execution for the specified amount of time, in milliseconds.. </p>
<p>This function depends on <a class="el" href="group__host.htm#ga81df7d5e74c518f1cee0c40ce8c2a199" title="Blocks the current thread of execution for the specified amount of time, in microseconds...">halCommonDelayMicroseconds()</a>.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ms</em>&nbsp;</td><td>The specified time, in milliseconds. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gac71eaac4357469bf7dd17571585a5db3"></a><!-- doxytag: member="micro&#45;common.h::halInternalAssertFailed" ref="gac71eaac4357469bf7dd17571585a5db3" args="(PGM_P filename, int linenumber)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void halInternalAssertFailed </td>
          <td>(</td>
          <td class="paramtype">PGM_P&nbsp;</td>
          <td class="paramname"> <em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>linenumber</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Called implicitly through the standard C language <a class="el" href="group__stm32f103ret__iar__config.htm#gacdcc5aaebf3f273c1762f24a6ece2e5e" title="A custom implementation of the C language assert macro. This macro implements the...">assert()</a> macro. An implementation where notification is, for instance, sent over the serial port can provide meaningful and useful debugging information. </p>
<dl class="note"><dt><b>Note:</b></dt><dd>Liberal usage of <a class="el" href="group__stm32f103ret__iar__config.htm#gacdcc5aaebf3f273c1762f24a6ece2e5e" title="A custom implementation of the C language assert macro. This macro implements the...">assert()</a> consumes flash space.</dd></dl>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>filename</em>&nbsp;</td><td>Name of the file throwing the assert.</td></tr>
    <tr><td valign="top"></td><td valign="top"><em>linenumber</em>&nbsp;</td><td>Line number that threw the assert. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga3d08021495e9082c02fa113e624c8cb2"></a><!-- doxytag: member="micro&#45;common.h::halGetResetInfo" ref="ga3d08021495e9082c02fa113e624c8cb2" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__stm32f103ret__iar__config.htm#ga29edc2328533c8dbc46be2d7b654c749">int8u</a> halGetResetInfo </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Gets information about what caused the microcontroller to reset. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>A code identifying the cause of the reset. </dd></dl>

</div>
</div>
<a class="anchor" id="ga7e5131c65da9fcf7ab185503f4137799"></a><!-- doxytag: member="micro&#45;common.h::halGetResetString" ref="ga7e5131c65da9fcf7ab185503f4137799" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">PGM_P halGetResetString </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Calls <a class="el" href="group__host.htm#ga3d08021495e9082c02fa113e624c8cb2" title="Gets information about what caused the microcontroller to reset.">halGetResetInfo()</a> and supplies a string describing it. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>A pointer to a program space string. </dd></dl>

</div>
</div>
<a class="anchor" id="gaad3b617d26789fb6c4789847a007eaad"></a><!-- doxytag: member="micro&#45;common.h::halStackSeedRandom" ref="gaad3b617d26789fb6c4789847a007eaad" args="(int32u seed)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void halStackSeedRandom </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__stm32f103ret__iar__config.htm#ga05aebcd1ffd9d69bda7b936f0cbd64b5">int32u</a>&nbsp;</td>
          <td class="paramname"> <em>seed</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Seeds the <a class="el" href="group__host.htm#ga92d978a2b55bcb6d8ffe996e9a768f57" title="Generate pseudorandom numbers. Implementation is host specific.">halCommonGetRandom()</a> pseudorandom number generator. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>seed</em>&nbsp;</td><td>A seed for the pseudorandom number generator. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga92d978a2b55bcb6d8ffe996e9a768f57"></a><!-- doxytag: member="micro&#45;common.h::halCommonGetRandom" ref="ga92d978a2b55bcb6d8ffe996e9a768f57" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__stm32f103ret__iar__config.htm#ga40790a257990626db514387099889f37">int16u</a> halCommonGetRandom </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Generate pseudorandom numbers. Implementation is host specific. </p>

</div>
</div>
<a class="anchor" id="ga6d05736655f1a012dc969d1d912e835b"></a><!-- doxytag: member="micro&#45;common.h::halSleep" ref="ga6d05736655f1a012dc969d1d912e835b" args="(SleepModes sleepMode)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void halSleep </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__host.htm#gace58749df14c14b64252eb55f40d2c32">SleepModes</a>&nbsp;</td>
          <td class="paramname"> <em>sleepMode</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Puts the microcontroller to sleep in a specified mode. </p>
<dl class="note"><dt><b>Note:</b></dt><dd>This routine always enables interrupts.</dd></dl>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>sleepMode</em>&nbsp;</td><td>A microcontroller sleep mode </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div>
<hr size="1">

<table border="0" cellspacing="0" cellpadding="0" width=100%>

<tr>

<td><address><small>

EmberZNet API Reference: For the STM32F103RET Host platform. <br>

EmberZNet 4.5.0 - Document 120-3025-000-45xx.

</small></address>

</td>

<td align="right">

<address><small>

Copyright &copy; 2006-2010 by Ember Corporation. All rights reserved.<br>

Generated Fri Jun 24 15:12:52 2011 with <a href="http://www.doxygen.org/index.html">Doxygen</a> 1.6.1.

</small></address>

</td>

</tr>

</table>

</body>

</html>
