<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">

<title>EmberZNet API Reference: For the STM32F103RET Host platform: iar-st.h File Reference</title>

<LINK HREF="doxygen.css" REL="stylesheet" TYPE="text/css">

</head><body>

<table border="0" cellspacing="0" cellpadding="0"  width=100%>

<tr>

<td><img src="emberLogoSmallWebsiteVer.gif"></td>

<td> <div class="qindex">

<a class="qindex" href="main.htm">Home</a>&nbsp;

 | &nbsp;<a class="qindex" href="modules.htm">Modules</a>&nbsp;

 | &nbsp;<a class="qindex" href="annotated.htm">Data Structures</a>&nbsp;

 | &nbsp;<a class="qindex" href="files.htm">File List</a>&nbsp;

 | &nbsp;<a class="qindex" href="dirs.htm">Directories</a>&nbsp;

 | &nbsp;<a class="qindex" href="globals.htm">Index</a></div>

</td>

</table>
<!-- Generated by Doxygen 1.6.1 -->
  <div class="navpath"><a class="el" href="dir_928392185f3941e33d232d8d861cbeaf.htm">hal</a>&nbsp;&raquo&nbsp;<a class="el" href="dir_7642951b2ddc58ac37f687ab6e1b2fbf.htm">host</a>&nbsp;&raquo&nbsp;<a class="el" href="dir_1ce2d48333369b6cd498206d2ad0ed49.htm">cortexm3</a>&nbsp;&raquo&nbsp;<a class="el" href="dir_5831a48c692f73bd519f43c64ca3770f.htm">stm32f103ret</a>&nbsp;&raquo&nbsp;<a class="el" href="dir_947564e60fb2c6e34e3c49376e43c875.htm">compiler</a>
  </div>
<div class="contents">
<h1>iar-st.h File Reference</h1><code>#include &quot;stm32f10x.h&quot;</code><br/>
<code>#include &lt;stdarg.h&gt;</code><br/>
<code>#include &lt;stdint.h&gt;</code><br/>
<code>#include &lt;string.h&gt;</code><br/>
<code>#include &quot;<a class="el" href="platform-common_8h_source.htm">hal/host/generic/compiler/platform-common.h</a>&quot;</code><br/>

<p><a href="iar-st_8h_source.htm">Go to the source code of this file.</a></p>
<table border="0" cellpadding="0" cellspacing="0">
<tr><td colspan="2"><h2>Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga12ef4b3c98231a44d2c2cd3b04cec5a4">halResetWatchdog</a>()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gac90cd47ca2b08382baa48d854d9acc38">SIGNED_ENUM</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gaf947e7d809d6ff89fe93f6367c20f4c6">_HAL_USE_COMMON_DIVMOD_</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga5cd18da9b188103037c75e5ed623b136">_HAL_USE_COMMON_PGM_</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gac6e2cc702734ab195fc0bdfedcacd1d3">PLATCOMMONOKTOINCLUDE</a></td></tr>
<tr><td colspan="2"><div class="groupHeader">Global Interrupt Manipulation Macros</div></td></tr>
<tr><td colspan="2"><div class="groupText"><p><a class="anchor" id="amgrp269d8a3c42a36e56a7730c402efe3c22"></a> </p>
<br/><br/></div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gac136489c5ba4794566532004267967f8">DISABLE_INTERRUPTS</a>()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gaad247197cbbb31c7a56bb7e6b97386c4">RESTORE_INTERRUPTS</a>()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga7710527473136ee906c491bb5e0761a1">INTERRUPTS_ON</a>()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga600e3cb6d6691dd6e04ecafef528ce47">INTERRUPTS_OFF</a>()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gae06b01c7d430e4e94819568ad1404f1d">INTERRUPTS_ARE_OFF</a>()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga0674197dbd97cc7b9457e76aa55da102">INTERRUPTS_WERE_ON</a>()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gadb86d22878544b15c38b727363ecb8b7">ATOMIC</a>(blah)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga445de09810ada0d167d34c8222f86a81">HANDLE_PENDING_INTERRUPTS</a>()</td></tr>
<tr><td colspan="2"><div class="groupHeader">Generic Types</div></td></tr>
<tr><td colspan="2"><div class="groupText"><p><a class="anchor" id="amgrp4a15a179e4b859cab4d769034d2d4be7"></a> </p>
<br/><br/></div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a></td></tr>
<tr><td colspan="2"><div class="groupHeader">C Standard Library Memory Utilities</div></td></tr>
<tr><td colspan="2"><div class="groupText"><p><a class="anchor" id="amgrpbf48f4f0649a81a7c3078ce674249b85"></a> These should be used in place of the standard library functions. </p>
<br/><br/></div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga231abe7f2eb2b710892b423d17d44081">halCommonMemSet</a>(d, v, l)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga39a0cb8ad0f2af508e97f27b2f77be28">halCommonMemCopy</a>(d, s, l)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga6c8637fc20543487ddec55e99e14db4f">halCommonMemCompare</a>(s0, s1, l)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga3d184458948f81e68cef14bd868c4923">halCommonMemPGMCompare</a>(s0, s1, l)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gaebdb39ad5b093d6d3086a7d8bbeae893">halCommonMemPGMCopy</a>(d, s, l)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gad7795912037ecd3781859d0895f051a8">MEMSET</a>(d, v, l)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga757f7559cae8d5d8a1a52fd78afaf916">MEMCOPY</a>(d, s, l)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gaaf10cad513a5560c6132a768e050a5c7">MEMCOMPARE</a>(s0, s1, l)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga0470dcdb8618b1d1140acfc239ea24d6">MEMPGMCOMPARE</a>(s0, s1, l)</td></tr>
<tr><td colspan="2"><h2>Typedefs</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader">Master Variable Types</div></td></tr>
<tr><td colspan="2"><div class="groupText"><p><a class="anchor" id="amgrp262870f49a9535caab372ecd6f5c0b25"></a> These are a set of typedefs to make the size of all variable declarations explicitly known. Since the IAR host code links against the ST Standard peripheral library, we need to map Ember's variable types to ST's variable types. </p>
<dl class="note"><dt><b>Note:</b></dt><dd>ST uses IAR's variable types, found in stdint.h. </dd></dl>
<br/><br/></div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef uint8_t&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga9c639bd343606632b938f16f4adf516a">boolean</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef uint8_t&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga29edc2328533c8dbc46be2d7b654c749">int8u</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef int8_t&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gac2017492c2bef74dd69c73d0c3452222">int8s</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef uint16_t&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga40790a257990626db514387099889f37">int16u</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef int16_t&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga36cdc07bf51be91bc9d92735b6c6695f">int16s</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef uint32_t&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga05aebcd1ffd9d69bda7b936f0cbd64b5">int32u</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef int32_t&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gae8b7a95dfed4e452d1416a9151be88c7">int32s</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef uint32_t&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gaebe77f625f69d309d618b3c7afcaee5e">PointerType</a></td></tr>
<tr><td colspan="2"><h2>Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga8a39a028776dc2065aa3f02c2a1fd1d6">halInternalResetWatchDog</a> (void)</td></tr>
<tr><td colspan="2"><h2>Miscellaneous Macros</h2></td></tr>
<tr><td colspan="2"><p><a class="anchor" id="amgrp588307f2252ecc2e63b08168f5d9c81d"></a> </p>
<br/><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gad94ab8d3445144ef6d9c928764cdb938">simulatedSerialTimePasses</a>()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga7e71cc0eb54b859562fb1463dcce4f6f">BIGENDIAN_CPU</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gabeeaa7d8b7d869f7e45b793b43b0b737">MAIN_FUNCTION_PARAMETERS</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gab15d5c759bdf4d50157e73caff40ad6f">MAIN_FUNCTION_ARGUMENTS</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga2c59e137842a414e665008da08ce7f34">__SOURCEFILE__</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gacdcc5aaebf3f273c1762f24a6ece2e5e">assert</a>(condition)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga19793103eca86def2c5b82c213096974">simulatedTimePasses</a>()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gabf72385043d62eb5c6da466c3b5b326c">simulatedTimePassesMs</a>(x)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gad94ab8d3445144ef6d9c928764cdb938">simulatedSerialTimePasses</a>()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga3a08dd8589c7ca238328322d0e00560f">halInternalAssertFailed</a> (const char *filename, int linenumber)</td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<p>See <a class="el" href="group__platform__common.htm">Common PLATFORM_HEADER Configuration</a> and <a class="el" href="group__stm32f103ret__iar__config.htm">STM32F103RET IAR Specific PLATFORM_HEADER Configuration</a> for documentation. </p>

<p>Definition in file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>
</div>
<hr size="1">

<table border="0" cellspacing="0" cellpadding="0" width=100%>

<tr>

<td><address><small>

EmberZNet API Reference: For the STM32F103RET Host platform. <br>

EmberZNet 4.5.0 - Document 120-3025-000-45xx.

</small></address>

</td>

<td align="right">

<address><small>

Copyright &copy; 2006-2010 by Ember Corporation. All rights reserved.<br>

Generated Fri Jun 24 15:12:52 2011 with <a href="http://www.doxygen.org/index.html">Doxygen</a> 1.6.1.

</small></address>

</td>

</tr>

</table>

</body>

</html>
