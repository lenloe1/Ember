<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">

<title>EmberZNet API Reference: For the STM32F103RET Host platform: STM32F103RET IAR Specific PLATFORM_HEADER Configuration</title>

<LINK HREF="doxygen.css" REL="stylesheet" TYPE="text/css">

</head><body>

<table border="0" cellspacing="0" cellpadding="0"  width=100%>

<tr>

<td><img src="emberLogoSmallWebsiteVer.gif"></td>

<td> <div class="qindex">

<a class="qindex" href="main.htm">Home</a>&nbsp;

 | &nbsp;<a class="qindex" href="modules.htm">Modules</a>&nbsp;

 | &nbsp;<a class="qindex" href="annotated.htm">Data Structures</a>&nbsp;

 | &nbsp;<a class="qindex" href="files.htm">File List</a>&nbsp;

 | &nbsp;<a class="qindex" href="dirs.htm">Directories</a>&nbsp;

 | &nbsp;<a class="qindex" href="globals.htm">Index</a></div>

</td>

</table>
<!-- Generated by Doxygen 1.6.1 -->
<div class="contents">
<h1>STM32F103RET IAR Specific PLATFORM_HEADER Configuration<br/>
<small>
[<a class="el" href="group__platform__common.htm">Common PLATFORM_HEADER Configuration</a>]</small>
</h1>
<p>Compiler and Platform specific definitions and typedefs for the STM32F103RET Host built with the IAR ARM C compiler.  
<a href="#_details">More...</a></p>
<table border="0" cellpadding="0" cellspacing="0">
<tr><td colspan="2"><h2>Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga12ef4b3c98231a44d2c2cd3b04cec5a4">halResetWatchdog</a>()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gac90cd47ca2b08382baa48d854d9acc38">SIGNED_ENUM</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gaf947e7d809d6ff89fe93f6367c20f4c6">_HAL_USE_COMMON_DIVMOD_</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga5cd18da9b188103037c75e5ed623b136">_HAL_USE_COMMON_PGM_</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gac6e2cc702734ab195fc0bdfedcacd1d3">PLATCOMMONOKTOINCLUDE</a></td></tr>
<tr><td colspan="2"><h2>Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga8a39a028776dc2065aa3f02c2a1fd1d6">halInternalResetWatchDog</a> (void)</td></tr>
<tr><td colspan="2"><h2>Master Variable Types</h2></td></tr>
<tr><td colspan="2"><p><a class="anchor" id="amgrp262870f49a9535caab372ecd6f5c0b25"></a> These are a set of typedefs to make the size of all variable declarations explicitly known. Since the IAR host code links against the ST Standard peripheral library, we need to map Ember's variable types to ST's variable types. </p>
<dl class="note"><dt><b>Note:</b></dt><dd>ST uses IAR's variable types, found in stdint.h. </dd></dl>
<br/><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef uint8_t&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga9c639bd343606632b938f16f4adf516a">boolean</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef uint8_t&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga29edc2328533c8dbc46be2d7b654c749">int8u</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef int8_t&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gac2017492c2bef74dd69c73d0c3452222">int8s</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef uint16_t&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga40790a257990626db514387099889f37">int16u</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef int16_t&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga36cdc07bf51be91bc9d92735b6c6695f">int16s</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef uint32_t&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga05aebcd1ffd9d69bda7b936f0cbd64b5">int32u</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef int32_t&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gae8b7a95dfed4e452d1416a9151be88c7">int32s</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef uint32_t&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gaebe77f625f69d309d618b3c7afcaee5e">PointerType</a></td></tr>
<tr><td colspan="2"><h2>Miscellaneous Macros</h2></td></tr>
<tr><td colspan="2"><p><a class="anchor" id="amgrp588307f2252ecc2e63b08168f5d9c81d"></a> </p>
<br/><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga3a08dd8589c7ca238328322d0e00560f">halInternalAssertFailed</a> (const char *filename, int linenumber)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gad94ab8d3445144ef6d9c928764cdb938">simulatedSerialTimePasses</a>()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gad94ab8d3445144ef6d9c928764cdb938">simulatedSerialTimePasses</a>()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga7e71cc0eb54b859562fb1463dcce4f6f">BIGENDIAN_CPU</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gabeeaa7d8b7d869f7e45b793b43b0b737">MAIN_FUNCTION_PARAMETERS</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gab15d5c759bdf4d50157e73caff40ad6f">MAIN_FUNCTION_ARGUMENTS</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga2c59e137842a414e665008da08ce7f34">__SOURCEFILE__</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gacdcc5aaebf3f273c1762f24a6ece2e5e">assert</a>(condition)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga19793103eca86def2c5b82c213096974">simulatedTimePasses</a>()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gabf72385043d62eb5c6da466c3b5b326c">simulatedTimePassesMs</a>(x)</td></tr>
<tr><td colspan="2"><h2>Global Interrupt Manipulation Macros</h2></td></tr>
<tr><td colspan="2"><p><a class="anchor" id="amgrp269d8a3c42a36e56a7730c402efe3c22"></a> </p>
<br/><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gac136489c5ba4794566532004267967f8">DISABLE_INTERRUPTS</a>()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gaad247197cbbb31c7a56bb7e6b97386c4">RESTORE_INTERRUPTS</a>()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga7710527473136ee906c491bb5e0761a1">INTERRUPTS_ON</a>()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga600e3cb6d6691dd6e04ecafef528ce47">INTERRUPTS_OFF</a>()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gae06b01c7d430e4e94819568ad1404f1d">INTERRUPTS_ARE_OFF</a>()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga0674197dbd97cc7b9457e76aa55da102">INTERRUPTS_WERE_ON</a>()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gadb86d22878544b15c38b727363ecb8b7">ATOMIC</a>(blah)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga445de09810ada0d167d34c8222f86a81">HANDLE_PENDING_INTERRUPTS</a>()</td></tr>
<tr><td colspan="2"><h2>Generic Types</h2></td></tr>
<tr><td colspan="2"><p><a class="anchor" id="amgrp4a15a179e4b859cab4d769034d2d4be7"></a> </p>
<br/><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</a></td></tr>
<tr><td colspan="2"><h2>C Standard Library Memory Utilities</h2></td></tr>
<tr><td colspan="2"><p><a class="anchor" id="amgrpbf48f4f0649a81a7c3078ce674249b85"></a> These should be used in place of the standard library functions. </p>
<br/><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga231abe7f2eb2b710892b423d17d44081">halCommonMemSet</a>(d, v, l)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga39a0cb8ad0f2af508e97f27b2f77be28">halCommonMemCopy</a>(d, s, l)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga6c8637fc20543487ddec55e99e14db4f">halCommonMemCompare</a>(s0, s1, l)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga3d184458948f81e68cef14bd868c4923">halCommonMemPGMCompare</a>(s0, s1, l)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gaebdb39ad5b093d6d3086a7d8bbeae893">halCommonMemPGMCopy</a>(d, s, l)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gad7795912037ecd3781859d0895f051a8">MEMSET</a>(d, v, l)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga757f7559cae8d5d8a1a52fd78afaf916">MEMCOPY</a>(d, s, l)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#gaaf10cad513a5560c6132a768e050a5c7">MEMCOMPARE</a>(s0, s1, l)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__iar__config.htm#ga0470dcdb8618b1d1140acfc239ea24d6">MEMPGMCOMPARE</a>(s0, s1, l)</td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<p>Compiler and Platform specific definitions and typedefs for the STM32F103RET Host built with the IAR ARM C compiler. </p>
<dl class="note"><dt><b>Note:</b></dt><dd><a class="el" href="iar-st_8h.htm">iar-st.h</a> should be included first in all source files by setting the preprocessor macro PLATFORM_HEADER to point to it. <a class="el" href="iar-st_8h.htm">iar-st.h</a> automatically includes <a class="el" href="platform-common_8h.htm">platform-common.h</a>.</dd></dl>
<p>See <a class="el" href="group__platform__common.htm">Common PLATFORM_HEADER Configuration</a> for common documentation.</p>
<p>See <a class="el" href="iar-st_8h.htm">iar-st.h</a> for source code. </p>
<hr/><h2>Define Documentation</h2>
<a class="anchor" id="ga12ef4b3c98231a44d2c2cd3b04cec5a4"></a><!-- doxytag: member="iar&#45;st.h::halResetWatchdog" ref="ga12ef4b3c98231a44d2c2cd3b04cec5a4" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define halResetWatchdog</td>
          <td>(</td>
&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Macro to reset the watchdog timer. </p>
<dl class="note"><dt><b>Note:</b></dt><dd>Be very very careful when using this as you can easily get into an infinite loop if you are not careful. </dd></dl>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00077">77</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="gac90cd47ca2b08382baa48d854d9acc38"></a><!-- doxytag: member="iar&#45;st.h::SIGNED_ENUM" ref="gac90cd47ca2b08382baa48d854d9acc38" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SIGNED_ENUM</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Some platforms need to cast enum values that have the high bit set. </p>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00083">83</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="gad94ab8d3445144ef6d9c928764cdb938"></a><!-- doxytag: member="iar&#45;st.h::simulatedSerialTimePasses" ref="gad94ab8d3445144ef6d9c928764cdb938" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define simulatedSerialTimePasses</td>
          <td>(</td>
&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Stub for code not running in simulation. </p>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00168">168</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="gad94ab8d3445144ef6d9c928764cdb938"></a><!-- doxytag: member="iar&#45;st.h::simulatedSerialTimePasses" ref="gad94ab8d3445144ef6d9c928764cdb938" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define simulatedSerialTimePasses</td>
          <td>(</td>
&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Stub for code not running in simulation. </p>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00168">168</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="gaf947e7d809d6ff89fe93f6367c20f4c6"></a><!-- doxytag: member="iar&#45;st.h::_HAL_USE_COMMON_DIVMOD_" ref="gaf947e7d809d6ff89fe93f6367c20f4c6" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define _HAL_USE_COMMON_DIVMOD_</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Use the Divide and Modulus Operations from <a class="el" href="platform-common_8h.htm">platform-common.h</a>. </p>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00094">94</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga5cd18da9b188103037c75e5ed623b136"></a><!-- doxytag: member="iar&#45;st.h::_HAL_USE_COMMON_PGM_" ref="ga5cd18da9b188103037c75e5ed623b136" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define _HAL_USE_COMMON_PGM_</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Use the Master Program Memory Declarations from <a class="el" href="platform-common_8h.htm">platform-common.h</a>. </p>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00100">100</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga7e71cc0eb54b859562fb1463dcce4f6f"></a><!-- doxytag: member="iar&#45;st.h::BIGENDIAN_CPU" ref="ga7e71cc0eb54b859562fb1463dcce4f6f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define BIGENDIAN_CPU</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A convenient method for code to know what endiannes processor it is running on. For the Cortex-M3, we are little endian. </p>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00113">113</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="gabeeaa7d8b7d869f7e45b793b43b0b737"></a><!-- doxytag: member="iar&#45;st.h::MAIN_FUNCTION_PARAMETERS" ref="gabeeaa7d8b7d869f7e45b793b43b0b737" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define MAIN_FUNCTION_PARAMETERS</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Define the parameters to main(), and for those functions that are passed the arguments from main(). </p>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00119">119</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="gab15d5c759bdf4d50157e73caff40ad6f"></a><!-- doxytag: member="iar&#45;st.h::MAIN_FUNCTION_ARGUMENTS" ref="gab15d5c759bdf4d50157e73caff40ad6f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define MAIN_FUNCTION_ARGUMENTS</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Stub for code not running in simulation. </p>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00120">120</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga2c59e137842a414e665008da08ce7f34"></a><!-- doxytag: member="iar&#45;st.h::__SOURCEFILE__" ref="ga2c59e137842a414e665008da08ce7f34" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define __SOURCEFILE__</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The __SOURCEFILE__ macro is used by asserts to list the filename if it isn't otherwise defined, set it to the compiler intrinsic which specifies the whole filename and path of the sourcefile. </p>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00129">129</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="gacdcc5aaebf3f273c1762f24a6ece2e5e"></a><!-- doxytag: member="iar&#45;st.h::assert" ref="gacdcc5aaebf3f273c1762f24a6ece2e5e" args="(condition)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define assert</td>
          <td>(</td>
          <td class="paramtype">condition&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A custom implementation of the C language assert macro. This macro implements the conditional evaluation and calls the function <a class="el" href="group__host.htm#gac71eaac4357469bf7dd17571585a5db3" title="Called implicitly through the standard C language assert() macro. An implementation...">halInternalAssertFailed()</a>. </p>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00145">145</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga19793103eca86def2c5b82c213096974"></a><!-- doxytag: member="iar&#45;st.h::simulatedTimePasses" ref="ga19793103eca86def2c5b82c213096974" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define simulatedTimePasses</td>
          <td>(</td>
&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Stub for code not running in simulation. </p>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00160">160</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="gabf72385043d62eb5c6da466c3b5b326c"></a><!-- doxytag: member="iar&#45;st.h::simulatedTimePassesMs" ref="gabf72385043d62eb5c6da466c3b5b326c" args="(x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define simulatedTimePassesMs</td>
          <td>(</td>
          <td class="paramtype">x&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Stub for code not running in simulation. </p>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00164">164</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="gac136489c5ba4794566532004267967f8"></a><!-- doxytag: member="iar&#45;st.h::DISABLE_INTERRUPTS" ref="gac136489c5ba4794566532004267967f8" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define DISABLE_INTERRUPTS</td>
          <td>(</td>
&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Disable interrupts, saving the previous state so it can be later restored with <a class="el" href="group__stm32f103ret__iar__config.htm#gaad247197cbbb31c7a56bb7e6b97386c4" title="Restore the global interrupt state previously saved by DISABLE_INTERRUPTS().">RESTORE_INTERRUPTS()</a>. </p>
<dl class="note"><dt><b>Note:</b></dt><dd>Do not fail to call <a class="el" href="group__stm32f103ret__iar__config.htm#gaad247197cbbb31c7a56bb7e6b97386c4" title="Restore the global interrupt state previously saved by DISABLE_INTERRUPTS().">RESTORE_INTERRUPTS()</a>. </dd>
<dd>
It is safe to nest this call. </dd></dl>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00205">205</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="gaad247197cbbb31c7a56bb7e6b97386c4"></a><!-- doxytag: member="iar&#45;st.h::RESTORE_INTERRUPTS" ref="gaad247197cbbb31c7a56bb7e6b97386c4" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define RESTORE_INTERRUPTS</td>
          <td>(</td>
&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Restore the global interrupt state previously saved by <a class="el" href="group__stm32f103ret__iar__config.htm#gac136489c5ba4794566532004267967f8" title="Disable interrupts, saving the previous state so it can be later restored with RESTORE_INTERRUPTS()...">DISABLE_INTERRUPTS()</a>. </p>
<dl class="note"><dt><b>Note:</b></dt><dd>Do not call without having first called <a class="el" href="group__stm32f103ret__iar__config.htm#gac136489c5ba4794566532004267967f8" title="Disable interrupts, saving the previous state so it can be later restored with RESTORE_INTERRUPTS()...">DISABLE_INTERRUPTS()</a> to have saved the state. </dd>
<dd>
It is safe to nest this call. </dd></dl>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00219">219</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga7710527473136ee906c491bb5e0761a1"></a><!-- doxytag: member="iar&#45;st.h::INTERRUPTS_ON" ref="ga7710527473136ee906c491bb5e0761a1" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define INTERRUPTS_ON</td>
          <td>(</td>
&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Enable global interrupts without regard to the current or previous state. </p>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00229">229</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga600e3cb6d6691dd6e04ecafef528ce47"></a><!-- doxytag: member="iar&#45;st.h::INTERRUPTS_OFF" ref="ga600e3cb6d6691dd6e04ecafef528ce47" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define INTERRUPTS_OFF</td>
          <td>(</td>
&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Disable global interrupts without regard to the current or previous state. </p>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00239">239</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="gae06b01c7d430e4e94819568ad1404f1d"></a><!-- doxytag: member="iar&#45;st.h::INTERRUPTS_ARE_OFF" ref="gae06b01c7d430e4e94819568ad1404f1d" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define INTERRUPTS_ARE_OFF</td>
          <td>(</td>
&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>TRUE if global interrupts are disabled. </dd></dl>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00248">248</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga0674197dbd97cc7b9457e76aa55da102"></a><!-- doxytag: member="iar&#45;st.h::INTERRUPTS_WERE_ON" ref="ga0674197dbd97cc7b9457e76aa55da102" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define INTERRUPTS_WERE_ON</td>
          <td>(</td>
&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>TRUE if global interrupt flag was enabled when <a class="el" href="group__stm32f103ret__iar__config.htm#gac136489c5ba4794566532004267967f8" title="Disable interrupts, saving the previous state so it can be later restored with RESTORE_INTERRUPTS()...">DISABLE_INTERRUPTS()</a> was called. </dd></dl>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00255">255</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="gadb86d22878544b15c38b727363ecb8b7"></a><!-- doxytag: member="iar&#45;st.h::ATOMIC" ref="gadb86d22878544b15c38b727363ecb8b7" args="(blah)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ATOMIC</td>
          <td>(</td>
          <td class="paramtype">blah&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A block of code may be made atomic by wrapping it with this macro. Something which is atomic cannot be interrupted by interrupts. </p>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00262">262</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga445de09810ada0d167d34c8222f86a81"></a><!-- doxytag: member="iar&#45;st.h::HANDLE_PENDING_INTERRUPTS" ref="ga445de09810ada0d167d34c8222f86a81" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define HANDLE_PENDING_INTERRUPTS</td>
          <td>(</td>
&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Allows any pending interrupts to be executed. Usually this would be called at a safe point while interrupts are disabled (such as within an ISR). </p>
<p>Takes no action if interrupts are already enabled. </p>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00278">278</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga070d2ce7b6bb7e5c05602aa8c308d0c4"></a><!-- doxytag: member="iar&#45;st.h::NULL" ref="ga070d2ce7b6bb7e5c05602aa8c308d0c4" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define NULL</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The null pointer. </p>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00301">301</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga231abe7f2eb2b710892b423d17d44081"></a><!-- doxytag: member="iar&#45;st.h::halCommonMemSet" ref="ga231abe7f2eb2b710892b423d17d44081" args="(d, v, l)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define halCommonMemSet</td>
          <td>(</td>
          <td class="paramtype">d, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">v, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">l&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>All of the ember defined macros/functions simply redirect to the full C Standard Library as supplied by IAR. </p>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00316">316</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga39a0cb8ad0f2af508e97f27b2f77be28"></a><!-- doxytag: member="iar&#45;st.h::halCommonMemCopy" ref="ga39a0cb8ad0f2af508e97f27b2f77be28" args="(d, s, l)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define halCommonMemCopy</td>
          <td>(</td>
          <td class="paramtype">d, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">l&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>All of the ember defined macros/functions simply redirect to the full C Standard Library as supplied by IAR. </p>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00317">317</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga6c8637fc20543487ddec55e99e14db4f"></a><!-- doxytag: member="iar&#45;st.h::halCommonMemCompare" ref="ga6c8637fc20543487ddec55e99e14db4f" args="(s0, s1, l)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define halCommonMemCompare</td>
          <td>(</td>
          <td class="paramtype">s0, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s1, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">l&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>All of the ember defined macros/functions simply redirect to the full C Standard Library as supplied by IAR. </p>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00318">318</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga3d184458948f81e68cef14bd868c4923"></a><!-- doxytag: member="iar&#45;st.h::halCommonMemPGMCompare" ref="ga3d184458948f81e68cef14bd868c4923" args="(s0, s1, l)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define halCommonMemPGMCompare</td>
          <td>(</td>
          <td class="paramtype">s0, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s1, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">l&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>All of the ember defined macros/functions simply redirect to the full C Standard Library as supplied by IAR. </p>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00319">319</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="gaebdb39ad5b093d6d3086a7d8bbeae893"></a><!-- doxytag: member="iar&#45;st.h::halCommonMemPGMCopy" ref="gaebdb39ad5b093d6d3086a7d8bbeae893" args="(d, s, l)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define halCommonMemPGMCopy</td>
          <td>(</td>
          <td class="paramtype">d, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">l&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>All of the ember defined macros/functions simply redirect to the full C Standard Library as supplied by IAR. </p>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00320">320</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="gad7795912037ecd3781859d0895f051a8"></a><!-- doxytag: member="iar&#45;st.h::MEMSET" ref="gad7795912037ecd3781859d0895f051a8" args="(d, v, l)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define MEMSET</td>
          <td>(</td>
          <td class="paramtype">d, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">v, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">l&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>All of the ember defined macros/functions simply redirect to the full C Standard Library as supplied by IAR. </p>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00322">322</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga757f7559cae8d5d8a1a52fd78afaf916"></a><!-- doxytag: member="iar&#45;st.h::MEMCOPY" ref="ga757f7559cae8d5d8a1a52fd78afaf916" args="(d, s, l)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define MEMCOPY</td>
          <td>(</td>
          <td class="paramtype">d, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">l&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>All of the ember defined macros/functions simply redirect to the full C Standard Library as supplied by IAR. </p>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00323">323</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="gaaf10cad513a5560c6132a768e050a5c7"></a><!-- doxytag: member="iar&#45;st.h::MEMCOMPARE" ref="gaaf10cad513a5560c6132a768e050a5c7" args="(s0, s1, l)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define MEMCOMPARE</td>
          <td>(</td>
          <td class="paramtype">s0, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s1, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">l&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>All of the ember defined macros/functions simply redirect to the full C Standard Library as supplied by IAR. </p>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00324">324</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga0470dcdb8618b1d1140acfc239ea24d6"></a><!-- doxytag: member="iar&#45;st.h::MEMPGMCOMPARE" ref="ga0470dcdb8618b1d1140acfc239ea24d6" args="(s0, s1, l)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define MEMPGMCOMPARE</td>
          <td>(</td>
          <td class="paramtype">s0, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s1, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">l&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>All of the ember defined macros/functions simply redirect to the full C Standard Library as supplied by IAR. </p>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00325">325</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="gac6e2cc702734ab195fc0bdfedcacd1d3"></a><!-- doxytag: member="iar&#45;st.h::PLATCOMMONOKTOINCLUDE" ref="gac6e2cc702734ab195fc0bdfedcacd1d3" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PLATCOMMONOKTOINCLUDE</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Include <a class="el" href="platform-common_8h.htm">platform-common.h</a> last to pick up defaults and common definitions. </p>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00333">333</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<hr/><h2>Typedef Documentation</h2>
<a class="anchor" id="ga9c639bd343606632b938f16f4adf516a"></a><!-- doxytag: member="iar&#45;st.h::boolean" ref="ga9c639bd343606632b938f16f4adf516a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef uint8_t <a class="el" href="group__stm32f103ret__iar__config.htm#ga9c639bd343606632b938f16f4adf516a">boolean</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A typedef to make the size of the variable explicitly known. </p>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00054">54</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga29edc2328533c8dbc46be2d7b654c749"></a><!-- doxytag: member="iar&#45;st.h::int8u" ref="ga29edc2328533c8dbc46be2d7b654c749" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef uint8_t <a class="el" href="group__stm32f103ret__iar__config.htm#ga29edc2328533c8dbc46be2d7b654c749">int8u</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A typedef to make the size of the variable explicitly known. </p>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00055">55</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="gac2017492c2bef74dd69c73d0c3452222"></a><!-- doxytag: member="iar&#45;st.h::int8s" ref="gac2017492c2bef74dd69c73d0c3452222" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef int8_t <a class="el" href="group__stm32f103ret__iar__config.htm#gac2017492c2bef74dd69c73d0c3452222">int8s</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A typedef to make the size of the variable explicitly known. </p>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00056">56</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga40790a257990626db514387099889f37"></a><!-- doxytag: member="iar&#45;st.h::int16u" ref="ga40790a257990626db514387099889f37" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef uint16_t <a class="el" href="group__stm32f103ret__iar__config.htm#ga40790a257990626db514387099889f37">int16u</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A typedef to make the size of the variable explicitly known. </p>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00057">57</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga36cdc07bf51be91bc9d92735b6c6695f"></a><!-- doxytag: member="iar&#45;st.h::int16s" ref="ga36cdc07bf51be91bc9d92735b6c6695f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef int16_t <a class="el" href="group__stm32f103ret__iar__config.htm#ga36cdc07bf51be91bc9d92735b6c6695f">int16s</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A typedef to make the size of the variable explicitly known. </p>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00058">58</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga05aebcd1ffd9d69bda7b936f0cbd64b5"></a><!-- doxytag: member="iar&#45;st.h::int32u" ref="ga05aebcd1ffd9d69bda7b936f0cbd64b5" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef uint32_t <a class="el" href="group__stm32f103ret__iar__config.htm#ga05aebcd1ffd9d69bda7b936f0cbd64b5">int32u</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A typedef to make the size of the variable explicitly known. </p>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00059">59</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="gae8b7a95dfed4e452d1416a9151be88c7"></a><!-- doxytag: member="iar&#45;st.h::int32s" ref="gae8b7a95dfed4e452d1416a9151be88c7" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef int32_t <a class="el" href="group__stm32f103ret__iar__config.htm#gae8b7a95dfed4e452d1416a9151be88c7">int32s</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A typedef to make the size of the variable explicitly known. </p>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00060">60</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<a class="anchor" id="gaebe77f625f69d309d618b3c7afcaee5e"></a><!-- doxytag: member="iar&#45;st.h::PointerType" ref="gaebe77f625f69d309d618b3c7afcaee5e" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef uint32_t <a class="el" href="group__stm32f103ret__iar__config.htm#gaebe77f625f69d309d618b3c7afcaee5e">PointerType</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A typedef to make the size of the variable explicitly known. </p>

<p>Definition at line <a class="el" href="iar-st_8h_source.htm#l00061">61</a> of file <a class="el" href="iar-st_8h_source.htm">iar-st.h</a>.</p>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="ga8a39a028776dc2065aa3f02c2a1fd1d6"></a><!-- doxytag: member="iar&#45;st.h::halInternalResetWatchDog" ref="ga8a39a028776dc2065aa3f02c2a1fd1d6" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void halInternalResetWatchDog </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Internal function to reset the watchdog timer. </p>
<dl class="note"><dt><b>Note:</b></dt><dd>Be very very careful when using this as you can easily get into an infinite loop if you are not careful. </dd></dl>

</div>
</div>
<a class="anchor" id="ga3a08dd8589c7ca238328322d0e00560f"></a><!-- doxytag: member="iar&#45;st.h::halInternalAssertFailed" ref="ga3a08dd8589c7ca238328322d0e00560f" args="(const char *filename, int linenumber)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void halInternalAssertFailed </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>linenumber</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A prototype definition for use by the assert macro. </p>

</div>
</div>
</div>
<hr size="1">

<table border="0" cellspacing="0" cellpadding="0" width=100%>

<tr>

<td><address><small>

EmberZNet API Reference: For the STM32F103RET Host platform. <br>

EmberZNet 4.5.0 - Document 120-3025-000-45xx.

</small></address>

</td>

<td align="right">

<address><small>

Copyright &copy; 2006-2010 by Ember Corporation. All rights reserved.<br>

Generated Fri Jun 24 15:12:52 2011 with <a href="http://www.doxygen.org/index.html">Doxygen</a> 1.6.1.

</small></address>

</td>

</tr>

</table>

</body>

</html>
