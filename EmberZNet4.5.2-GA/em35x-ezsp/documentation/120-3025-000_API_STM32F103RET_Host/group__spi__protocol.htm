<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">

<title>EmberZNet API Reference: For the STM32F103RET Host platform: SPI Protocol</title>

<LINK HREF="doxygen.css" REL="stylesheet" TYPE="text/css">

</head><body>

<table border="0" cellspacing="0" cellpadding="0"  width=100%>

<tr>

<td><img src="emberLogoSmallWebsiteVer.gif"></td>

<td> <div class="qindex">

<a class="qindex" href="main.htm">Home</a>&nbsp;

 | &nbsp;<a class="qindex" href="modules.htm">Modules</a>&nbsp;

 | &nbsp;<a class="qindex" href="annotated.htm">Data Structures</a>&nbsp;

 | &nbsp;<a class="qindex" href="files.htm">File List</a>&nbsp;

 | &nbsp;<a class="qindex" href="dirs.htm">Directories</a>&nbsp;

 | &nbsp;<a class="qindex" href="globals.htm">Index</a></div>

</td>

</table>
<!-- Generated by Doxygen 1.6.1 -->
<div class="contents">
<h1>SPI Protocol<br/>
<small>
[<a class="el" href="group__hal.htm">Hardware Abstraction Layer (HAL) API Reference</a>]</small>
</h1>
<p>Example host common SPI Protocol implementation for interfacing with a NCP.  
<a href="#_details">More...</a></p>
<table border="0" cellpadding="0" cellspacing="0">
<tr><td colspan="2"><h2>Modules</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stm32f103ret__spip.htm">STM32F103RET Specific SPI Protocol</a></td></tr>
<tr><td colspan="2"><h2>Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__spi__protocol.htm#gaa808460cb21ae92e4690c62c9eade081">halNcpSerialInit</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__spi__protocol.htm#gaf43c537a3b902940d5a853ce6fe81823">halNcpSerialPowerup</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__spi__protocol.htm#ga40c5d27b0cef2f179d8c769e7cffb003">halNcpSerialPowerdown</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EzspStatus&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__spi__protocol.htm#gac8d937e569fe0d66cd4295b077275f31">halNcpHardReset</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EzspStatus&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__spi__protocol.htm#ga2a2c6ff66e3225b81e0f343e3d75b2bf">halNcpHardResetReqBootload</a> (<a class="el" href="group__stm32f103ret__iar__config.htm#ga9c639bd343606632b938f16f4adf516a">boolean</a> requestBootload)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__spi__protocol.htm#gaee2f8e01d6923b36c88f3becca472416">halNcpWakeUp</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__spi__protocol.htm#gaf0eef394d0b779b83ac363ad6c39afde">halNcpSendCommand</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__spi__protocol.htm#ga2baabc4b033caca5f2b98a8a7d97a988">halNcpSendRawCommand</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">EzspStatus&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__spi__protocol.htm#ga3ed78ade1b7abbd5edfc0764eaad54f5">halNcpPollForResponse</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__spi__protocol.htm#ga31fdb1f9c0a811e3347f19f087a44ced">halNcpIsAwakeIsr</a> (<a class="el" href="group__stm32f103ret__iar__config.htm#ga9c639bd343606632b938f16f4adf516a">boolean</a> isAwake)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__stm32f103ret__iar__config.htm#ga9c639bd343606632b938f16f4adf516a">boolean</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__spi__protocol.htm#ga1e97b66871b268621b5cdebb9162120f">halNcpHasData</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__stm32f103ret__iar__config.htm#ga9c639bd343606632b938f16f4adf516a">boolean</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__spi__protocol.htm#ga2fe6d531fb543858e198dd264f359b9b">halNcpVerifySpiProtocolVersion</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__stm32f103ret__iar__config.htm#ga9c639bd343606632b938f16f4adf516a">boolean</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__spi__protocol.htm#gae145e6dded848cc1b5155e4c2ad2a4ad">halNcpVerifySpiProtocolActive</a> (void)</td></tr>
<tr><td colspan="2"><h2>Variables</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__stm32f103ret__iar__config.htm#ga29edc2328533c8dbc46be2d7b654c749">int8u</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__spi__protocol.htm#ga5cc00e5731b37abb536206ed0fae28ba">halNcpFrame</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__stm32f103ret__iar__config.htm#ga29edc2328533c8dbc46be2d7b654c749">int8u</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__spi__protocol.htm#gab1f5cc26aa0d263b86e4b4d84ba03df9">halNcpSpipErrorByte</a></td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<p>Example host common SPI Protocol implementation for interfacing with a NCP. </p>
<p>For complete documentation of the SPI Protocol, refer to the NCP docs.</p>
<dl class="note"><dt><b>Note:</b></dt><dd>The micro specific definitions, <a class="el" href="group__stm32f103ret__spip.htm">STM32F103RET Specific SPI Protocol</a>, is chosen by the build include path pointing at the appropriate directoy.</dd></dl>
<p>See <a class="el" href="spi-protocol-common_8h.htm">spi-protocol-common.h</a> for source code. </p>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="gaa808460cb21ae92e4690c62c9eade081"></a><!-- doxytag: member="spi&#45;protocol&#45;common.h::halNcpSerialInit" ref="gaa808460cb21ae92e4690c62c9eade081" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void halNcpSerialInit </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Initializes the SPI Protocol. </p>

</div>
</div>
<a class="anchor" id="gaf43c537a3b902940d5a853ce6fe81823"></a><!-- doxytag: member="spi&#45;protocol&#45;common.h::halNcpSerialPowerup" ref="gaf43c537a3b902940d5a853ce6fe81823" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void halNcpSerialPowerup </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Reinitializes the SPI Protocol when coming out of sleep (powerdown). </p>

</div>
</div>
<a class="anchor" id="ga40c5d27b0cef2f179d8c769e7cffb003"></a><!-- doxytag: member="spi&#45;protocol&#45;common.h::halNcpSerialPowerdown" ref="ga40c5d27b0cef2f179d8c769e7cffb003" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void halNcpSerialPowerdown </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Shuts down the SPI Protocol when entering sleep (powerdown). </p>

</div>
</div>
<a class="anchor" id="gac8d937e569fe0d66cd4295b077275f31"></a><!-- doxytag: member="spi&#45;protocol&#45;common.h::halNcpHardReset" ref="gac8d937e569fe0d66cd4295b077275f31" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EzspStatus halNcpHardReset </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Forcefully resets the NCP by pulling on the nRESET line; waits for the NCP to boot; verifies that is has booted; verifies the NCP is active; verifies the SPI Protocol version. When this function returns, the NCP is ready to accept all commands. </p>
<p>This function is the same as <a class="el" href="group__spi__protocol.htm#ga2a2c6ff66e3225b81e0f343e3d75b2bf" title="Forcefully resets the NCP by pulling on the nRESET line; sets the nWAKE signal based...">halNcpHardResetReqBootload()</a>, except that the NCP cannot be told to enter bootload mode through the nWAKE signal.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>A EzspStatus value indicating the success or failure of the command. </dd></dl>

</div>
</div>
<a class="anchor" id="ga2a2c6ff66e3225b81e0f343e3d75b2bf"></a><!-- doxytag: member="spi&#45;protocol&#45;common.h::halNcpHardResetReqBootload" ref="ga2a2c6ff66e3225b81e0f343e3d75b2bf" args="(boolean requestBootload)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EzspStatus halNcpHardResetReqBootload </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__stm32f103ret__iar__config.htm#ga9c639bd343606632b938f16f4adf516a">boolean</a>&nbsp;</td>
          <td class="paramname"> <em>requestBootload</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Forcefully resets the NCP by pulling on the nRESET line; sets the nWAKE signal based upon the state of the requestBootload boolean; waits for the NCP to boot; verifies that is has booted; verifies the NCP is active; verifies the SPI Protocol version. When this function returns, the NCP is ready to accept all commands. </p>
<p>This function is the same as <a class="el" href="group__spi__protocol.htm#gac8d937e569fe0d66cd4295b077275f31" title="Forcefully resets the NCP by pulling on the nRESET line; waits for the NCP to boot;...">halNcpHardReset()</a>, except that the ability to request the NCP enter bootload mode through the nWAKE signal is made available.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>A EzspStatus value indicating the success or failure of the command. </dd></dl>

</div>
</div>
<a class="anchor" id="gaee2f8e01d6923b36c88f3becca472416"></a><!-- doxytag: member="spi&#45;protocol&#45;common.h::halNcpWakeUp" ref="gaee2f8e01d6923b36c88f3becca472416" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void halNcpWakeUp </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>If the Host thinks that the NCP is sleeping and wants to wake it up, the EZSP calls <a class="el" href="group__spi__protocol.htm#gaee2f8e01d6923b36c88f3becca472416" title="If the Host thinks that the NCP is sleeping and wants to wake it up, the EZSP calls...">halNcpWakeUp()</a>. </p>
<p>Waking up can take some time (milliseconds) so <a class="el" href="group__spi__protocol.htm#gaee2f8e01d6923b36c88f3becca472416" title="If the Host thinks that the NCP is sleeping and wants to wake it up, the EZSP calls...">halNcpWakeUp()</a> returns immediately and the SPI Protocol calls <a class="el" href="group__spi__protocol.htm#ga31fdb1f9c0a811e3347f19f087a44ced" title="The SPI Protocol calls halNcpIsAwakeIsr() once the wakeup handshaking is complete...">halNcpIsAwakeIsr()</a> once the wakeup handshaking is complete and the NCP is ready to accept commands. </p>

</div>
</div>
<a class="anchor" id="gaf0eef394d0b779b83ac363ad6c39afde"></a><!-- doxytag: member="spi&#45;protocol&#45;common.h::halNcpSendCommand" ref="gaf0eef394d0b779b83ac363ad6c39afde" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void halNcpSendCommand </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The EZSP writes a command into the command buffer and then calls <a class="el" href="group__spi__protocol.htm#gaf0eef394d0b779b83ac363ad6c39afde" title="The EZSP writes a command into the command buffer and then calls halNcpSendCommand()...">halNcpSendCommand()</a>. </p>
<p>This function assumes the command being sent is an EZSP frame and therefore sets the SPI Byte for an EZSP Frame. If sending a command other than EZSP, use <a class="el" href="group__spi__protocol.htm#ga2baabc4b033caca5f2b98a8a7d97a988" title="The upper layer writes a command into the command buffer and then calls halNcpSendRawCommand()...">halNcpSendRawCommand()</a>. This function returns immediately after transmission of the Command has completed and the transaction has entered the Wait section. The EZSP must now call <a class="el" href="group__spi__protocol.htm#ga3ed78ade1b7abbd5edfc0764eaad54f5" title="After sending a Command with halNcpSendCommand(), the upper layer repeatedly calls...">halNcpPollForResponse()</a> until the Response is received. </p>

</div>
</div>
<a class="anchor" id="ga2baabc4b033caca5f2b98a8a7d97a988"></a><!-- doxytag: member="spi&#45;protocol&#45;common.h::halNcpSendRawCommand" ref="ga2baabc4b033caca5f2b98a8a7d97a988" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void halNcpSendRawCommand </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The upper layer writes a command into the command buffer and then calls <a class="el" href="group__spi__protocol.htm#ga2baabc4b033caca5f2b98a8a7d97a988" title="The upper layer writes a command into the command buffer and then calls halNcpSendRawCommand()...">halNcpSendRawCommand()</a>. </p>
<p>This function makes no assumption about the data in the SpipBuffer, it will just faithly try to perform the transaction. This function returns immediately after transmission of the Command has completed and the transaction has entered the Wait section. The upper layer must now call <a class="el" href="group__spi__protocol.htm#ga3ed78ade1b7abbd5edfc0764eaad54f5" title="After sending a Command with halNcpSendCommand(), the upper layer repeatedly calls...">halNcpPollForResponse()</a> until the the Response is received. </p>

</div>
</div>
<a class="anchor" id="ga3ed78ade1b7abbd5edfc0764eaad54f5"></a><!-- doxytag: member="spi&#45;protocol&#45;common.h::halNcpPollForResponse" ref="ga3ed78ade1b7abbd5edfc0764eaad54f5" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">EzspStatus halNcpPollForResponse </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>After sending a Command with <a class="el" href="group__spi__protocol.htm#gaf0eef394d0b779b83ac363ad6c39afde" title="The EZSP writes a command into the command buffer and then calls halNcpSendCommand()...">halNcpSendCommand()</a>, the upper layer repeatedly calls this function until the SPI Protocol has finished reception of a Response. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>A EzspStatus value indicating the success or failure of the command. </dd></dl>

</div>
</div>
<a class="anchor" id="ga31fdb1f9c0a811e3347f19f087a44ced"></a><!-- doxytag: member="spi&#45;protocol&#45;common.h::halNcpIsAwakeIsr" ref="ga31fdb1f9c0a811e3347f19f087a44ced" args="(boolean isAwake)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void halNcpIsAwakeIsr </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__stm32f103ret__iar__config.htm#ga9c639bd343606632b938f16f4adf516a">boolean</a>&nbsp;</td>
          <td class="paramname"> <em>isAwake</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The SPI Protocol calls <a class="el" href="group__spi__protocol.htm#ga31fdb1f9c0a811e3347f19f087a44ced" title="The SPI Protocol calls halNcpIsAwakeIsr() once the wakeup handshaking is complete...">halNcpIsAwakeIsr()</a> once the wakeup handshaking is complete and the NCP is ready to accept a command. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>isAwake</em>&nbsp;</td><td>TRUE if the wake handshake completed and the NCP is awake. FALSE is the wake handshake failed and the NCP is unresponsive. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga1e97b66871b268621b5cdebb9162120f"></a><!-- doxytag: member="spi&#45;protocol&#45;common.h::halNcpHasData" ref="ga1e97b66871b268621b5cdebb9162120f" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__stm32f103ret__iar__config.htm#ga9c639bd343606632b938f16f4adf516a">boolean</a> halNcpHasData </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>If the Host wants to find out whether the NCP has a pending callback, the EZSP calls <a class="el" href="group__spi__protocol.htm#ga1e97b66871b268621b5cdebb9162120f" title="If the Host wants to find out whether the NCP has a pending callback, the EZSP calls...">halNcpHasData()</a>. If this function returns TRUE then the EZSP will send a callback command. </p>

</div>
</div>
<a class="anchor" id="ga2fe6d531fb543858e198dd264f359b9b"></a><!-- doxytag: member="spi&#45;protocol&#45;common.h::halNcpVerifySpiProtocolVersion" ref="ga2fe6d531fb543858e198dd264f359b9b" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__stm32f103ret__iar__config.htm#ga9c639bd343606632b938f16f4adf516a">boolean</a> halNcpVerifySpiProtocolVersion </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Transmits the SPI Protocol Version Command and checks the response against a literal value to verify the SPI Protocol version. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>TRUE if the SPI Protocol Version used in this function matches the version returned by the NCP. FALSE is the versions do not match. </dd></dl>

</div>
</div>
<a class="anchor" id="gae145e6dded848cc1b5155e4c2ad2a4ad"></a><!-- doxytag: member="spi&#45;protocol&#45;common.h::halNcpVerifySpiProtocolActive" ref="gae145e6dded848cc1b5155e4c2ad2a4ad" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__stm32f103ret__iar__config.htm#ga9c639bd343606632b938f16f4adf516a">boolean</a> halNcpVerifySpiProtocolActive </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Transmits the SPI Status Command and checks the response against a literal value to verify the SPI Protocol is active. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>TRUE if the SPI Protocol is active. FALSE if the SPI Protocol is not active. </dd></dl>

</div>
</div>
<hr/><h2>Variable Documentation</h2>
<a class="anchor" id="ga5cc00e5731b37abb536206ed0fae28ba"></a><!-- doxytag: member="spi&#45;protocol&#45;common.h::halNcpFrame" ref="ga5cc00e5731b37abb536206ed0fae28ba" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__stm32f103ret__iar__config.htm#ga29edc2328533c8dbc46be2d7b654c749">int8u</a>* <a class="el" href="group__spi__protocol.htm#ga5cc00e5731b37abb536206ed0fae28ba">halNcpFrame</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>A pointer to the length byte at the start of the Payload. Upper layers will write the command to this location before starting a transaction. The upper layer will read the response from this location after a transaction completes. This pointer is the upper layers' primary access into the command/response buffer. </p>

</div>
</div>
<a class="anchor" id="gab1f5cc26aa0d263b86e4b4d84ba03df9"></a><!-- doxytag: member="spi&#45;protocol&#45;common.h::halNcpSpipErrorByte" ref="gab1f5cc26aa0d263b86e4b4d84ba03df9" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__stm32f103ret__iar__config.htm#ga29edc2328533c8dbc46be2d7b654c749">int8u</a> <a class="el" href="group__spi__protocol.htm#gab1f5cc26aa0d263b86e4b4d84ba03df9">halNcpSpipErrorByte</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>This error byte is the third byte found in a special SPI Protocol error case. It provides more detail concerning the error. Refer to the NCP docs for a more detailed description of this byte. The application does not need to work with this byte, but it can be useful information when developing. </p>

</div>
</div>
</div>
<hr size="1">

<table border="0" cellspacing="0" cellpadding="0" width=100%>

<tr>

<td><address><small>

EmberZNet API Reference: For the STM32F103RET Host platform. <br>

EmberZNet 4.5.0 - Document 120-3025-000-45xx.

</small></address>

</td>

<td align="right">

<address><small>

Copyright &copy; 2006-2010 by Ember Corporation. All rights reserved.<br>

Generated Fri Jun 24 15:12:52 2011 with <a href="http://www.doxygen.org/index.html">Doxygen</a> 1.6.1.

</small></address>

</td>

</tr>

</table>

</body>

</html>
