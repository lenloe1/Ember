<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">

<title>EmberZNet API Reference: For the STM32F103RET Host platform: Message Fragmentation</title>

<LINK HREF="doxygen.css" REL="stylesheet" TYPE="text/css">

</head><body>

<table border="0" cellspacing="0" cellpadding="0"  width=100%>

<tr>

<td><img src="emberLogoSmallWebsiteVer.gif"></td>

<td> <div class="qindex">

<a class="qindex" href="main.htm">Home</a>&nbsp;

 | &nbsp;<a class="qindex" href="modules.htm">Modules</a>&nbsp;

 | &nbsp;<a class="qindex" href="annotated.htm">Data Structures</a>&nbsp;

 | &nbsp;<a class="qindex" href="files.htm">File List</a>&nbsp;

 | &nbsp;<a class="qindex" href="dirs.htm">Directories</a>&nbsp;

 | &nbsp;<a class="qindex" href="globals.htm">Index</a></div>

</td>

</table>
<!-- Generated by Doxygen 1.6.1 -->
<div class="contents">
<h1>Message Fragmentation<br/>
<small>
[<a class="el" href="group__apputil.htm">Application Utilities API Reference</a>]</small>
</h1><table border="0" cellpadding="0" cellspacing="0">
<tr><td colspan="2"><h2>Initialization</h2></td></tr>
<tr><td colspan="2"><p><a class="anchor" id="amgrp61bcd96a2c1f8026527cbf2019d6e9a4"></a> </p>
<br/><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__fragment.htm#ga3e949c6724b7e8e2bb5331cecbc022f2">ezspFragmentInit</a> (<a class="el" href="group__stm32f103ret__iar__config.htm#ga40790a257990626db514387099889f37">int16u</a> receiveBufferLength, <a class="el" href="group__stm32f103ret__iar__config.htm#ga29edc2328533c8dbc46be2d7b654c749">int8u</a> *receiveBuffer)</td></tr>
<tr><td colspan="2"><h2>Transmitting</h2></td></tr>
<tr><td colspan="2"><p><a class="anchor" id="amgrpb5e70f0d11a15b4bf9fdab2d420e8164"></a> </p>
<br/><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="error_8h.htm#a333d7a94b63d29c627eb16b0667371ec">EmberStatus</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__fragment.htm#ga3de324243c3d39dcc2ab2b45a538d3cd">ezspFragmentSendUnicast</a> (<a class="el" href="group__ember__types.htm#gab77dd07ca7af23a832974d3cc20c94f3">EmberOutgoingMessageType</a> type, <a class="el" href="group__stm32f103ret__iar__config.htm#ga40790a257990626db514387099889f37">int16u</a> indexOrDestination, <a class="el" href="structEmberApsFrame.htm">EmberApsFrame</a> *apsFrame, <a class="el" href="group__stm32f103ret__iar__config.htm#ga29edc2328533c8dbc46be2d7b654c749">int8u</a> maxFragmentSize, <a class="el" href="group__stm32f103ret__iar__config.htm#ga40790a257990626db514387099889f37">int16u</a> messageLength, <a class="el" href="group__stm32f103ret__iar__config.htm#ga29edc2328533c8dbc46be2d7b654c749">int8u</a> *messageContents)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="error_8h.htm#a333d7a94b63d29c627eb16b0667371ec">EmberStatus</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__fragment.htm#ga3adf91095f1f9f83cc2c1135457bce5f">ezspFragmentSourceRouteHandler</a> (void)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__stm32f103ret__iar__config.htm#ga9c639bd343606632b938f16f4adf516a">boolean</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__fragment.htm#gaf3b9d7c9b8741c9032e07a3f5ebe4165">ezspFragmentMessageSent</a> (<a class="el" href="structEmberApsFrame.htm">EmberApsFrame</a> *apsFrame, <a class="el" href="error_8h.htm#a333d7a94b63d29c627eb16b0667371ec">EmberStatus</a> status)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__fragment.htm#ga1e2b6e3d9deb29daa915cb4f1190f25c">ezspFragmentMessageSentHandler</a> (<a class="el" href="error_8h.htm#a333d7a94b63d29c627eb16b0667371ec">EmberStatus</a> status)</td></tr>
<tr><td colspan="2"><h2>Receiving</h2></td></tr>
<tr><td colspan="2"><p><a class="anchor" id="amgrp338f550ea5a0bcb9ac785f48b27f4f12"></a> </p>
<br/><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__stm32f103ret__iar__config.htm#ga9c639bd343606632b938f16f4adf516a">boolean</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__fragment.htm#ga0ec7c77748b95b98fdc25369b2c3c51c">ezspFragmentIncomingMessage</a> (<a class="el" href="structEmberApsFrame.htm">EmberApsFrame</a> *apsFrame, <a class="el" href="group__ember__types.htm#ga83a055800b2191214f2bae6b8b905dab">EmberNodeId</a> sender, <a class="el" href="group__stm32f103ret__iar__config.htm#ga40790a257990626db514387099889f37">int16u</a> *messageLength, <a class="el" href="group__stm32f103ret__iar__config.htm#ga29edc2328533c8dbc46be2d7b654c749">int8u</a> **messageContents)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__fragment.htm#gadabc497ce059720314e4b878475a2009">ezspFragmentTick</a> (void)</td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<p>Fragmented message support for EZSP Hosts. Splits long messages into smaller blocks for transmission and reassembles received blocks. See fragment-host.c for source code.</p>
<p>EZSP_CONFIG_FRAGMENT_WINDOW_SIZE controls how many blocks are sent at a time. EZSP_CONFIG_FRAGMENT_DELAY_MS controls the spacing between blocks.</p>
<p>Before calling any of the other functions listed here, the application must call <a class="el" href="group__fragment.htm#ga3e949c6724b7e8e2bb5331cecbc022f2" title="Initialize variables and buffers used for sending and receiving long messages. This...">ezspFragmentInit()</a>.</p>
<p>To send a long message, the application calls <a class="el" href="group__fragment.htm#ga3de324243c3d39dcc2ab2b45a538d3cd" title="Sends a long message by splitting it into blocks. Only one long message can be sent...">ezspFragmentSendUnicast()</a>. The application must add a call to <a class="el" href="group__fragment.htm#gaf3b9d7c9b8741c9032e07a3f5ebe4165" title="The application must call this function at the start of its ezspMessageSentHandler()...">ezspFragmentMessageSent()</a> at the start of its ezspMessageSentHandler(). If <a class="el" href="group__fragment.htm#gaf3b9d7c9b8741c9032e07a3f5ebe4165" title="The application must call this function at the start of its ezspMessageSentHandler()...">ezspFragmentMessageSent()</a> returns TRUE, the fragmentation code has handled the event and the application must not process it further. The fragmentation code calls the application-defined <a class="el" href="group__fragment.htm#ga1e2b6e3d9deb29daa915cb4f1190f25c" title="The fragmentation code calls this application-defined handler when it finishes sending...">ezspFragmentMessageSentHandler()</a> when it has finished sending the long message.</p>
<p>To receive a long message, the application must add a call to <a class="el" href="group__fragment.htm#ga0ec7c77748b95b98fdc25369b2c3c51c" title="The application must call this function at the start of its ezspIncomingMessageHandler()...">ezspFragmentIncomingMessage()</a> at the start of its ezspIncomingMessageHandler(). If <a class="el" href="group__fragment.htm#ga0ec7c77748b95b98fdc25369b2c3c51c" title="The application must call this function at the start of its ezspIncomingMessageHandler()...">ezspFragmentIncomingMessage()</a> returns TRUE, the fragmentation code has handled the message and the application must not process it further. The application must also call <a class="el" href="group__fragment.htm#gadabc497ce059720314e4b878475a2009" title="Used by the fragmentation code to time incoming blocks. The application must call...">ezspFragmentTick()</a> regularly. </p>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="ga3e949c6724b7e8e2bb5331cecbc022f2"></a><!-- doxytag: member="fragment&#45;host.h::ezspFragmentInit" ref="ga3e949c6724b7e8e2bb5331cecbc022f2" args="(int16u receiveBufferLength, int8u *receiveBuffer)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezspFragmentInit </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__stm32f103ret__iar__config.htm#ga40790a257990626db514387099889f37">int16u</a>&nbsp;</td>
          <td class="paramname"> <em>receiveBufferLength</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__stm32f103ret__iar__config.htm#ga29edc2328533c8dbc46be2d7b654c749">int8u</a> *&nbsp;</td>
          <td class="paramname"> <em>receiveBuffer</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Initialize variables and buffers used for sending and receiving long messages. This functions reads the values of EZSP_CONFIG_MAX_HOPS and EZSP_CONFIG_FRAGMENT_WINDOW_SIZE. The application must set these values before calling this function. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>receiveBufferLength</em>&nbsp;</td><td>The length of receiveBuffer. Incoming messages longer than this will be dropped. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>receiveBuffer</em>&nbsp;</td><td>The buffer used to reassemble incoming long messages. Once the message is complete, this buffer will be passed back to the application by <a class="el" href="group__fragment.htm#ga0ec7c77748b95b98fdc25369b2c3c51c" title="The application must call this function at the start of its ezspIncomingMessageHandler()...">ezspFragmentIncomingMessage()</a>. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga3de324243c3d39dcc2ab2b45a538d3cd"></a><!-- doxytag: member="fragment&#45;host.h::ezspFragmentSendUnicast" ref="ga3de324243c3d39dcc2ab2b45a538d3cd" args="(EmberOutgoingMessageType type, int16u indexOrDestination, EmberApsFrame *apsFrame, int8u maxFragmentSize, int16u messageLength, int8u *messageContents)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="error_8h.htm#a333d7a94b63d29c627eb16b0667371ec">EmberStatus</a> ezspFragmentSendUnicast </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#gab77dd07ca7af23a832974d3cc20c94f3">EmberOutgoingMessageType</a>&nbsp;</td>
          <td class="paramname"> <em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__stm32f103ret__iar__config.htm#ga40790a257990626db514387099889f37">int16u</a>&nbsp;</td>
          <td class="paramname"> <em>indexOrDestination</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structEmberApsFrame.htm">EmberApsFrame</a> *&nbsp;</td>
          <td class="paramname"> <em>apsFrame</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__stm32f103ret__iar__config.htm#ga29edc2328533c8dbc46be2d7b654c749">int8u</a>&nbsp;</td>
          <td class="paramname"> <em>maxFragmentSize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__stm32f103ret__iar__config.htm#ga40790a257990626db514387099889f37">int16u</a>&nbsp;</td>
          <td class="paramname"> <em>messageLength</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__stm32f103ret__iar__config.htm#ga29edc2328533c8dbc46be2d7b654c749">int8u</a> *&nbsp;</td>
          <td class="paramname"> <em>messageContents</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Sends a long message by splitting it into blocks. Only one long message can be sent at a time. Calling this function a second time aborts the first message. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>type</em>&nbsp;</td><td>Specifies the outgoing message type. Must be one of <a class="el" href="group__ember__types.htm#ggab77dd07ca7af23a832974d3cc20c94f3a9bd7967c8235081475a36b4a60a18a89">EMBER_OUTGOING_DIRECT</a>, <a class="el" href="group__ember__types.htm#ggab77dd07ca7af23a832974d3cc20c94f3a59161f2c9f34e259c6bacccfc1ff501a">EMBER_OUTGOING_VIA_ADDRESS_TABLE</a>, or <a class="el" href="group__ember__types.htm#ggab77dd07ca7af23a832974d3cc20c94f3accd0c60ca71d623a164a538224c9b86f">EMBER_OUTGOING_VIA_BINDING</a>. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>indexOrDestination</em>&nbsp;</td><td>Depending on the type of addressing used, this is either the EmberNodeId of the destination, an index into the address table, or an index into the binding table. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>apsFrame</em>&nbsp;</td><td>The APS frame for the message. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>maxFragmentSize</em>&nbsp;</td><td>The message will be broken into blocks no larger than this. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>messageLength</em>&nbsp;</td><td>The length of the messageContents parameter in bytes. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>messageContents</em>&nbsp;</td><td>The long message to be sent.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>An EmberStatus value.<ul>
<li><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a></li>
<li><a class="el" href="group__status__codes.htm#ga2c5a9e09abbc3380a24f613e20e1b4ef" title="The message to be transmitted is too big to fit into a single over-the-air packet...">EMBER_MESSAGE_TOO_LONG</a></li>
<li><a class="el" href="group__status__codes.htm#gadf8c20e0884530dcb19bd659378efd79" title="The network is not operating.">EMBER_NETWORK_DOWN</a></li>
<li><a class="el" href="group__status__codes.htm#ga5ce8e37f4d09ae79a4e644fecc4d5df5" title="A message cannot be sent because the network is currently overloaded.">EMBER_NETWORK_BUSY</a></li>
<li><a class="el" href="group__status__codes.htm#ga20f497445170399070473added9fb3e3" title="The API call is not allowed given the current state of the stack.">EMBER_INVALID_CALL</a> is returned if messageLength is zero or if the window size (EZSP_CONFIG_FRAGMENT_WINDOW_SIZE) is zero. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="ga3adf91095f1f9f83cc2c1135457bce5f"></a><!-- doxytag: member="fragment&#45;host.h::ezspFragmentSourceRouteHandler" ref="ga3adf91095f1f9f83cc2c1135457bce5f" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="error_8h.htm#a333d7a94b63d29c627eb16b0667371ec">EmberStatus</a> ezspFragmentSourceRouteHandler </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A callback invoked just before each block of the current long message is sent. If the message is to be source routed, the application must define this callback and call ezspSetSourceRoute() in it. </p>
<p>The application must define EZSP_APPLICATION_HAS_FRAGMENT_SOURCE_ROUTE_HANDLER in its configuration header if it defines this callback.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if the source route has been set. Any other value will abort transmission of the current long message. </dd></dl>

</div>
</div>
<a class="anchor" id="gaf3b9d7c9b8741c9032e07a3f5ebe4165"></a><!-- doxytag: member="fragment&#45;host.h::ezspFragmentMessageSent" ref="gaf3b9d7c9b8741c9032e07a3f5ebe4165" args="(EmberApsFrame *apsFrame, EmberStatus status)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__stm32f103ret__iar__config.htm#ga9c639bd343606632b938f16f4adf516a">boolean</a> ezspFragmentMessageSent </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structEmberApsFrame.htm">EmberApsFrame</a> *&nbsp;</td>
          <td class="paramname"> <em>apsFrame</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="error_8h.htm#a333d7a94b63d29c627eb16b0667371ec">EmberStatus</a>&nbsp;</td>
          <td class="paramname"> <em>status</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The application must call this function at the start of its ezspMessageSentHandler(). If it returns TRUE, the fragmentation code has handled the event and the application must not process it further. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>apsFrame</em>&nbsp;</td><td>The APS frame passed to ezspMessageSentHandler(). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>status</em>&nbsp;</td><td>The status passed to ezspMessageSentHandler().</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>TRUE if the sent message was a block of a long message. The fragmentation code has handled the event so the application must return immediately from its ezspMessageSentHandler(). Returns FALSE otherwise. The fragmentation code has not handled the event so the application must continue to process it. </dd></dl>

</div>
</div>
<a class="anchor" id="ga1e2b6e3d9deb29daa915cb4f1190f25c"></a><!-- doxytag: member="fragment&#45;host.h::ezspFragmentMessageSentHandler" ref="ga1e2b6e3d9deb29daa915cb4f1190f25c" args="(EmberStatus status)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezspFragmentMessageSentHandler </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="error_8h.htm#a333d7a94b63d29c627eb16b0667371ec">EmberStatus</a>&nbsp;</td>
          <td class="paramname"> <em>status</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The fragmentation code calls this application-defined handler when it finishes sending a long message. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>status</em>&nbsp;</td><td><a class="el" href="group__status__codes.htm#ga2caa3c0d2aceeba0c2f29eb63d42ce29" title="The generic &quot;no error&quot; message.">EMBER_SUCCESS</a> if all the blocks of the long message were delivered to the destination, otherwise <a class="el" href="group__status__codes.htm#ga3149c5a575bba8685e7cf7ea15d5c89a" title="The APS layer attempted to send or deliver a message, but it failed.">EMBER_DELIVERY_FAILED</a>, <a class="el" href="group__status__codes.htm#gadf8c20e0884530dcb19bd659378efd79" title="The network is not operating.">EMBER_NETWORK_DOWN</a> or <a class="el" href="group__status__codes.htm#ga5ce8e37f4d09ae79a4e644fecc4d5df5" title="A message cannot be sent because the network is currently overloaded.">EMBER_NETWORK_BUSY</a>. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga0ec7c77748b95b98fdc25369b2c3c51c"></a><!-- doxytag: member="fragment&#45;host.h::ezspFragmentIncomingMessage" ref="ga0ec7c77748b95b98fdc25369b2c3c51c" args="(EmberApsFrame *apsFrame, EmberNodeId sender, int16u *messageLength, int8u **messageContents)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__stm32f103ret__iar__config.htm#ga9c639bd343606632b938f16f4adf516a">boolean</a> ezspFragmentIncomingMessage </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structEmberApsFrame.htm">EmberApsFrame</a> *&nbsp;</td>
          <td class="paramname"> <em>apsFrame</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__ember__types.htm#ga83a055800b2191214f2bae6b8b905dab">EmberNodeId</a>&nbsp;</td>
          <td class="paramname"> <em>sender</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__stm32f103ret__iar__config.htm#ga40790a257990626db514387099889f37">int16u</a> *&nbsp;</td>
          <td class="paramname"> <em>messageLength</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__stm32f103ret__iar__config.htm#ga29edc2328533c8dbc46be2d7b654c749">int8u</a> **&nbsp;</td>
          <td class="paramname"> <em>messageContents</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The application must call this function at the start of its ezspIncomingMessageHandler(). If it returns TRUE, the fragmentation code has handled the message and the application must not process it further. When the final block of a long message is received, this function replaces the message with the reassembled long message and returns FALSE so that the application processes it. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>apsFrame</em>&nbsp;</td><td>The APS frame passed to ezspIncomingMessageHandler(). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>sender</em>&nbsp;</td><td>The sender passed to ezspIncomingMessageHandler(). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>messageLength</em>&nbsp;</td><td>A pointer to the message length passed to ezspIncomingMessageHandler(). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>messageContents</em>&nbsp;</td><td>A pointer to the message contents passed to ezspIncomingMessageHandler().</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>TRUE if the incoming message was a block of an incomplete long message. The fragmentation code has handled the message so the application must return immediately from its ezspIncomingMessageHandler(). Returns FALSE if the incoming message was not part of a long message. The fragmentation code has not handled the message so the application must continue to process it. Returns FALSE if the incoming message was a block that completed a long message. The fragmentation code replaces the message with the reassembled long message so the application must continue to process it. </dd></dl>

</div>
</div>
<a class="anchor" id="gadabc497ce059720314e4b878475a2009"></a><!-- doxytag: member="fragment&#45;host.h::ezspFragmentTick" ref="gadabc497ce059720314e4b878475a2009" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ezspFragmentTick </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Used by the fragmentation code to time incoming blocks. The application must call this function regularly. </p>

</div>
</div>
</div>
<hr size="1">

<table border="0" cellspacing="0" cellpadding="0" width=100%>

<tr>

<td><address><small>

EmberZNet API Reference: For the STM32F103RET Host platform. <br>

EmberZNet 4.5.0 - Document 120-3025-000-45xx.

</small></address>

</td>

<td align="right">

<address><small>

Copyright &copy; 2006-2010 by Ember Corporation. All rights reserved.<br>

Generated Fri Jun 24 15:12:53 2011 with <a href="http://www.doxygen.org/index.html">Doxygen</a> 1.6.1.

</small></address>

</td>

</tr>

</table>

</body>

</html>
