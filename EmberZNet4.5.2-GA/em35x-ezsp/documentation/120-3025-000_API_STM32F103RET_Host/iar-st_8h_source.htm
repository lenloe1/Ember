<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">

<title>EmberZNet API Reference: For the STM32F103RET Host platform: iar-st.h Source File</title>

<LINK HREF="doxygen.css" REL="stylesheet" TYPE="text/css">

</head><body>

<table border="0" cellspacing="0" cellpadding="0"  width=100%>

<tr>

<td><img src="emberLogoSmallWebsiteVer.gif"></td>

<td> <div class="qindex">

<a class="qindex" href="main.htm">Home</a>&nbsp;

 | &nbsp;<a class="qindex" href="modules.htm">Modules</a>&nbsp;

 | &nbsp;<a class="qindex" href="annotated.htm">Data Structures</a>&nbsp;

 | &nbsp;<a class="qindex" href="files.htm">File List</a>&nbsp;

 | &nbsp;<a class="qindex" href="dirs.htm">Directories</a>&nbsp;

 | &nbsp;<a class="qindex" href="globals.htm">Index</a></div>

</td>

</table>
<!-- Generated by Doxygen 1.6.1 -->
  <div class="navpath"><a class="el" href="dir_928392185f3941e33d232d8d861cbeaf.htm">hal</a>&nbsp;&raquo&nbsp;<a class="el" href="dir_7642951b2ddc58ac37f687ab6e1b2fbf.htm">host</a>&nbsp;&raquo&nbsp;<a class="el" href="dir_1ce2d48333369b6cd498206d2ad0ed49.htm">cortexm3</a>&nbsp;&raquo&nbsp;<a class="el" href="dir_5831a48c692f73bd519f43c64ca3770f.htm">stm32f103ret</a>&nbsp;&raquo&nbsp;<a class="el" href="dir_947564e60fb2c6e34e3c49376e43c875.htm">compiler</a>
  </div>
<div class="contents">
<h1>iar-st.h</h1><a href="iar-st_8h.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00021"></a>00021 <span class="preprocessor">#ifndef __IAR_ST_H__</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span><span class="preprocessor">#define __IAR_ST_H__</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span>
<a name="l00024"></a>00024 <span class="preprocessor">#ifndef __ICCARM__</span>
<a name="l00025"></a>00025 <span class="preprocessor"></span><span class="preprocessor">  #error Improper PLATFORM_HEADER</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span>
<a name="l00028"></a>00028 <span class="preprocessor">#if (__VER__ &lt; 5040005) || (__VER__ &gt; 5050006)</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span><span class="preprocessor">  #error Only IAR EWARM versions &gt;= 5.40.5 and &lt;= 5.50.6 are supported</span>
<a name="l00030"></a>00030 <span class="preprocessor"></span><span class="preprocessor">#endif // __VER__</span>
<a name="l00031"></a>00031 <span class="preprocessor"></span>
<a name="l00032"></a>00032 <span class="comment">//Pull in the registers, Library, and other critical/useful ST code.</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;stm32f10x.h&quot;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;stdarg.h&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;stdint.h&gt;</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="preprocessor">#ifndef DOXYGEN_SHOULD_SKIP_THIS</span>
<a name="l00038"></a>00038 <span class="preprocessor"></span><span class="comment">//The Cortex-M3 does not have zero-page memory</span>
<a name="l00039"></a>00039 <span class="preprocessor">#define XAP2B_PAGEZERO_ON</span>
<a name="l00040"></a>00040 <span class="preprocessor"></span><span class="preprocessor">#define XAP2B_PAGEZERO_OFF</span>
<a name="l00041"></a>00041 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00042"></a>00042 <span class="preprocessor"></span>
<a name="l00054"></a><a class="code" href="group__stm32f103ret__iar__config.htm#ga9c639bd343606632b938f16f4adf516a">00054</a> <span class="keyword">typedef</span> uint8_t  <a class="code" href="group__stm32f103ret__iar__config.htm#ga9c639bd343606632b938f16f4adf516a" title="A typedef to make the size of the variable explicitly known.">boolean</a>;
<a name="l00055"></a><a class="code" href="group__stm32f103ret__iar__config.htm#ga29edc2328533c8dbc46be2d7b654c749">00055</a> <span class="keyword">typedef</span> uint8_t  <a class="code" href="group__stm32f103ret__iar__config.htm#ga29edc2328533c8dbc46be2d7b654c749" title="A typedef to make the size of the variable explicitly known.">int8u</a>;
<a name="l00056"></a><a class="code" href="group__stm32f103ret__iar__config.htm#gac2017492c2bef74dd69c73d0c3452222">00056</a> <span class="keyword">typedef</span> int8_t   <a class="code" href="group__stm32f103ret__iar__config.htm#gac2017492c2bef74dd69c73d0c3452222" title="A typedef to make the size of the variable explicitly known.">int8s</a>;
<a name="l00057"></a><a class="code" href="group__stm32f103ret__iar__config.htm#ga40790a257990626db514387099889f37">00057</a> <span class="keyword">typedef</span> uint16_t <a class="code" href="group__stm32f103ret__iar__config.htm#ga40790a257990626db514387099889f37" title="A typedef to make the size of the variable explicitly known.">int16u</a>;
<a name="l00058"></a><a class="code" href="group__stm32f103ret__iar__config.htm#ga36cdc07bf51be91bc9d92735b6c6695f">00058</a> <span class="keyword">typedef</span> int16_t  <a class="code" href="group__stm32f103ret__iar__config.htm#ga36cdc07bf51be91bc9d92735b6c6695f" title="A typedef to make the size of the variable explicitly known.">int16s</a>;
<a name="l00059"></a><a class="code" href="group__stm32f103ret__iar__config.htm#ga05aebcd1ffd9d69bda7b936f0cbd64b5">00059</a> <span class="keyword">typedef</span> uint32_t <a class="code" href="group__stm32f103ret__iar__config.htm#ga05aebcd1ffd9d69bda7b936f0cbd64b5" title="A typedef to make the size of the variable explicitly known.">int32u</a>;
<a name="l00060"></a><a class="code" href="group__stm32f103ret__iar__config.htm#gae8b7a95dfed4e452d1416a9151be88c7">00060</a> <span class="keyword">typedef</span> int32_t  <a class="code" href="group__stm32f103ret__iar__config.htm#gae8b7a95dfed4e452d1416a9151be88c7" title="A typedef to make the size of the variable explicitly known.">int32s</a>;
<a name="l00061"></a><a class="code" href="group__stm32f103ret__iar__config.htm#gaebe77f625f69d309d618b3c7afcaee5e">00061</a> <span class="keyword">typedef</span> uint32_t <a class="code" href="group__stm32f103ret__iar__config.htm#gaebe77f625f69d309d618b3c7afcaee5e" title="A typedef to make the size of the variable explicitly known.">PointerType</a>;
<a name="l00063"></a>00063 
<a name="l00064"></a>00064 
<a name="l00070"></a>00070 <span class="keywordtype">void</span> <a class="code" href="group__stm32f103ret__iar__config.htm#ga8a39a028776dc2065aa3f02c2a1fd1d6" title="Internal function to reset the watchdog timer.">halInternalResetWatchDog</a>(<span class="keywordtype">void</span>);
<a name="l00071"></a>00071 
<a name="l00077"></a><a class="code" href="group__stm32f103ret__iar__config.htm#ga12ef4b3c98231a44d2c2cd3b04cec5a4">00077</a> <span class="preprocessor">#define halResetWatchdog()  halInternalResetWatchDog()</span>
<a name="l00078"></a>00078 <span class="preprocessor"></span>
<a name="l00079"></a>00079 
<a name="l00083"></a><a class="code" href="group__stm32f103ret__iar__config.htm#gac90cd47ca2b08382baa48d854d9acc38">00083</a> <span class="preprocessor">#define SIGNED_ENUM</span>
<a name="l00084"></a>00084 <span class="preprocessor"></span>
<a name="l00088"></a>00088 <span class="preprocessor">#define simulatedSerialTimePasses()</span>
<a name="l00089"></a>00089 <span class="preprocessor"></span>
<a name="l00090"></a>00090 
<a name="l00094"></a><a class="code" href="group__stm32f103ret__iar__config.htm#gaf947e7d809d6ff89fe93f6367c20f4c6">00094</a> <span class="preprocessor">#define _HAL_USE_COMMON_DIVMOD_</span>
<a name="l00095"></a>00095 <span class="preprocessor"></span>
<a name="l00096"></a>00096 
<a name="l00100"></a><a class="code" href="group__stm32f103ret__iar__config.htm#ga5cd18da9b188103037c75e5ed623b136">00100</a> <span class="preprocessor">#define _HAL_USE_COMMON_PGM_</span>
<a name="l00101"></a>00101 <span class="preprocessor"></span>
<a name="l00102"></a>00102 
<a name="l00104"></a>00104 
<a name="l00106"></a>00106 
<a name="l00107"></a>00107 
<a name="l00108"></a>00108 
<a name="l00113"></a><a class="code" href="group__stm32f103ret__iar__config.htm#ga7e71cc0eb54b859562fb1463dcce4f6f">00113</a> <span class="preprocessor">#define BIGENDIAN_CPU  FALSE</span>
<a name="l00114"></a>00114 <span class="preprocessor"></span>
<a name="l00119"></a><a class="code" href="group__stm32f103ret__iar__config.htm#gabeeaa7d8b7d869f7e45b793b43b0b737">00119</a> <span class="preprocessor">#define MAIN_FUNCTION_PARAMETERS void</span>
<a name="l00120"></a><a class="code" href="group__stm32f103ret__iar__config.htm#gab15d5c759bdf4d50157e73caff40ad6f">00120</a> <span class="preprocessor"></span><span class="preprocessor">#define MAIN_FUNCTION_ARGUMENTS  </span>
<a name="l00121"></a>00121 <span class="preprocessor"></span>
<a name="l00122"></a>00122 
<a name="l00123"></a>00123 <span class="preprocessor">#ifndef __SOURCEFILE__</span>
<a name="l00124"></a>00124 <span class="preprocessor"></span>
<a name="l00129"></a><a class="code" href="group__stm32f103ret__iar__config.htm#ga2c59e137842a414e665008da08ce7f34">00129</a> <span class="preprocessor">  #define __SOURCEFILE__ __FILE__</span>
<a name="l00130"></a>00130 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00131"></a>00131 <span class="preprocessor"></span>
<a name="l00132"></a>00132 
<a name="l00133"></a>00133 <span class="preprocessor">#undef assert</span>
<a name="l00134"></a>00134 <span class="preprocessor"></span><span class="preprocessor">#if !defined(SIMPLER_ASSERT_REBOOT) || defined(DOXYGEN_SHOULD_SKIP_THIS)</span>
<a name="l00135"></a>00135 <span class="preprocessor"></span>
<a name="l00138"></a>00138   <span class="keywordtype">void</span> <a class="code" href="group__host.htm#gac71eaac4357469bf7dd17571585a5db3" title="Called implicitly through the standard C language assert() macro. An implementation...">halInternalAssertFailed</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> * filename, <span class="keywordtype">int</span> linenumber);
<a name="l00139"></a>00139   
<a name="l00145"></a><a class="code" href="group__stm32f103ret__iar__config.htm#gacdcc5aaebf3f273c1762f24a6ece2e5e">00145</a> <span class="preprocessor">  #define assert(condition)                                    \</span>
<a name="l00146"></a>00146 <span class="preprocessor">        do {                                                   \</span>
<a name="l00147"></a>00147 <span class="preprocessor">          if (! (condition)) {                                 \</span>
<a name="l00148"></a>00148 <span class="preprocessor">            halInternalAssertFailed(__SOURCEFILE__, __LINE__); \</span>
<a name="l00149"></a>00149 <span class="preprocessor">          }                                                    \</span>
<a name="l00150"></a>00150 <span class="preprocessor">        } while(0)</span>
<a name="l00151"></a>00151 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00152"></a>00152 <span class="preprocessor"></span><span class="preprocessor">  #define assert(condition) \</span>
<a name="l00153"></a>00153 <span class="preprocessor">            do { if( !(condition) ) while(1){} } while(0)</span>
<a name="l00154"></a>00154 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00155"></a>00155 <span class="preprocessor"></span>
<a name="l00156"></a>00156 
<a name="l00160"></a><a class="code" href="group__stm32f103ret__iar__config.htm#ga19793103eca86def2c5b82c213096974">00160</a> <span class="preprocessor">#define simulatedTimePasses()</span>
<a name="l00161"></a>00161 <span class="preprocessor"></span>
<a name="l00164"></a><a class="code" href="group__stm32f103ret__iar__config.htm#gabf72385043d62eb5c6da466c3b5b326c">00164</a> <span class="preprocessor">#define simulatedTimePassesMs(x)</span>
<a name="l00165"></a>00165 <span class="preprocessor"></span>
<a name="l00168"></a><a class="code" href="group__stm32f103ret__iar__config.htm#gad94ab8d3445144ef6d9c928764cdb938">00168</a> <span class="preprocessor">#define simulatedSerialTimePasses()</span>
<a name="l00169"></a>00169 <span class="preprocessor"></span>
<a name="l00171"></a>00171 
<a name="l00172"></a>00172 
<a name="l00173"></a>00173 
<a name="l00174"></a>00174 
<a name="l00176"></a>00176 
<a name="l00178"></a>00178 
<a name="l00179"></a>00179 
<a name="l00180"></a>00180 
<a name="l00181"></a>00181 <span class="preprocessor">#ifndef DOXYGEN_SHOULD_SKIP_THIS</span>
<a name="l00182"></a>00182 <span class="preprocessor"></span>    <span class="comment">//The concept of LITE atomic handling isn&apos;t implemented on this platform,</span>
<a name="l00183"></a>00183     <span class="comment">//so just redirect to the normal atomic handling.</span>
<a name="l00184"></a>00184 <span class="preprocessor">    #define ATOMIC_LITE(blah)             ATOMIC(blah)</span>
<a name="l00185"></a>00185 <span class="preprocessor"></span><span class="preprocessor">    #define DECLARE_INTERRUPT_STATE_LITE  DECLARE_INTERRUPT_STATE</span>
<a name="l00186"></a>00186 <span class="preprocessor"></span><span class="preprocessor">    #define DISABLE_INTERRUPTS_LITE()     DISABLE_INTERRUPTS()</span>
<a name="l00187"></a>00187 <span class="preprocessor"></span><span class="preprocessor">    #define RESTORE_INTERRUPTS_LITE()     RESTORE_INTERRUPTS()</span>
<a name="l00188"></a>00188 <span class="preprocessor"></span>    
<a name="l00194"></a>00194 <span class="preprocessor">    #define DECLARE_INTERRUPT_STATE int32u _emIsrState</span>
<a name="l00195"></a>00195 <span class="preprocessor"></span><span class="preprocessor">#endif  // DOXYGEN_SHOULD_SKIP_THIS</span>
<a name="l00196"></a>00196 <span class="preprocessor"></span>
<a name="l00197"></a>00197 <span class="comment">//The core Global Interrupt Manipulation Macros start here.</span>
<a name="l00198"></a>00198 
<a name="l00205"></a><a class="code" href="group__stm32f103ret__iar__config.htm#gac136489c5ba4794566532004267967f8">00205</a> <span class="preprocessor">#define DISABLE_INTERRUPTS()       \</span>
<a name="l00206"></a>00206 <span class="preprocessor">  do {                             \</span>
<a name="l00207"></a>00207 <span class="preprocessor">    _emIsrState = __get_PRIMASK(); \</span>
<a name="l00208"></a>00208 <span class="preprocessor">    __set_PRIMASK(1);              \</span>
<a name="l00209"></a>00209 <span class="preprocessor">  } while(0)</span>
<a name="l00210"></a>00210 <span class="preprocessor"></span>
<a name="l00211"></a>00211 
<a name="l00219"></a><a class="code" href="group__stm32f103ret__iar__config.htm#gaad247197cbbb31c7a56bb7e6b97386c4">00219</a> <span class="preprocessor">#define RESTORE_INTERRUPTS()    \</span>
<a name="l00220"></a>00220 <span class="preprocessor">  do {                          \</span>
<a name="l00221"></a>00221 <span class="preprocessor">    __set_PRIMASK(_emIsrState); \</span>
<a name="l00222"></a>00222 <span class="preprocessor">  } while(0)</span>
<a name="l00223"></a>00223 <span class="preprocessor"></span>
<a name="l00224"></a>00224 
<a name="l00229"></a><a class="code" href="group__stm32f103ret__iar__config.htm#ga7710527473136ee906c491bb5e0761a1">00229</a> <span class="preprocessor">#define INTERRUPTS_ON() \</span>
<a name="l00230"></a>00230 <span class="preprocessor">  do {                  \</span>
<a name="l00231"></a>00231 <span class="preprocessor">    __set_PRIMASK(0);   \</span>
<a name="l00232"></a>00232 <span class="preprocessor">  } while(0)</span>
<a name="l00233"></a>00233 <span class="preprocessor"></span>
<a name="l00234"></a>00234 
<a name="l00239"></a><a class="code" href="group__stm32f103ret__iar__config.htm#ga600e3cb6d6691dd6e04ecafef528ce47">00239</a> <span class="preprocessor">#define INTERRUPTS_OFF() \</span>
<a name="l00240"></a>00240 <span class="preprocessor">  do {                   \</span>
<a name="l00241"></a>00241 <span class="preprocessor">    __set_PRIMASK(1);    \</span>
<a name="l00242"></a>00242 <span class="preprocessor">  } while(0)</span>
<a name="l00243"></a>00243 <span class="preprocessor"></span>
<a name="l00244"></a>00244 
<a name="l00248"></a><a class="code" href="group__stm32f103ret__iar__config.htm#gae06b01c7d430e4e94819568ad1404f1d">00248</a> <span class="preprocessor">#define INTERRUPTS_ARE_OFF() (__get_PRIMASK() != 0)</span>
<a name="l00249"></a>00249 <span class="preprocessor"></span>
<a name="l00250"></a>00250 
<a name="l00255"></a><a class="code" href="group__stm32f103ret__iar__config.htm#ga0674197dbd97cc7b9457e76aa55da102">00255</a> <span class="preprocessor">#define INTERRUPTS_WERE_ON() (_emIsrState == 0)</span>
<a name="l00256"></a>00256 <span class="preprocessor"></span>
<a name="l00257"></a>00257 
<a name="l00262"></a><a class="code" href="group__stm32f103ret__iar__config.htm#gadb86d22878544b15c38b727363ecb8b7">00262</a> <span class="preprocessor">#define ATOMIC(blah)       \</span>
<a name="l00263"></a>00263 <span class="preprocessor">{                          \</span>
<a name="l00264"></a>00264 <span class="preprocessor">  DECLARE_INTERRUPT_STATE; \</span>
<a name="l00265"></a>00265 <span class="preprocessor">  DISABLE_INTERRUPTS();    \</span>
<a name="l00266"></a>00266 <span class="preprocessor">  { blah }                 \</span>
<a name="l00267"></a>00267 <span class="preprocessor">  RESTORE_INTERRUPTS();    \</span>
<a name="l00268"></a>00268 <span class="preprocessor">}</span>
<a name="l00269"></a>00269 <span class="preprocessor"></span>
<a name="l00270"></a>00270 
<a name="l00278"></a><a class="code" href="group__stm32f103ret__iar__config.htm#ga445de09810ada0d167d34c8222f86a81">00278</a> <span class="preprocessor">#define HANDLE_PENDING_INTERRUPTS() \</span>
<a name="l00279"></a>00279 <span class="preprocessor">  do {                              \</span>
<a name="l00280"></a>00280 <span class="preprocessor">    if (INTERRUPTS_ARE_OFF()) {     \</span>
<a name="l00281"></a>00281 <span class="preprocessor">      INTERRUPTS_ON();              \</span>
<a name="l00282"></a>00282 <span class="preprocessor">      INTERRUPTS_OFF();             \</span>
<a name="l00283"></a>00283 <span class="preprocessor">    }                               \</span>
<a name="l00284"></a>00284 <span class="preprocessor"> } while (0)</span>
<a name="l00285"></a>00285 <span class="preprocessor"></span>
<a name="l00287"></a>00287 
<a name="l00288"></a>00288 
<a name="l00289"></a>00289 
<a name="l00290"></a>00290 
<a name="l00295"></a>00295 <span class="comment">//TRUE and FLASE are defined in ST&apos;s HAL Library</span>
<a name="l00296"></a>00296 
<a name="l00297"></a>00297 <span class="preprocessor">#ifndef NULL</span>
<a name="l00298"></a>00298 <span class="preprocessor"></span>
<a name="l00301"></a><a class="code" href="group__stm32f103ret__iar__config.htm#ga070d2ce7b6bb7e5c05602aa8c308d0c4">00301</a> <span class="preprocessor">#define NULL ((void *)0)</span>
<a name="l00302"></a>00302 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00303"></a>00303 <span class="preprocessor"></span>
<a name="l00305"></a>00305 
<a name="l00306"></a>00306 
<a name="l00315"></a>00315 <span class="preprocessor">#include &lt;string.h&gt;</span>
<a name="l00316"></a><a class="code" href="group__stm32f103ret__iar__config.htm#ga231abe7f2eb2b710892b423d17d44081">00316</a> <span class="preprocessor">#define halCommonMemSet(d,v,l) memset(d,v,l)</span>
<a name="l00317"></a><a class="code" href="group__stm32f103ret__iar__config.htm#ga39a0cb8ad0f2af508e97f27b2f77be28">00317</a> <span class="preprocessor"></span><span class="preprocessor">#define halCommonMemCopy(d,s,l) memcpy(d,s,l)</span>
<a name="l00318"></a><a class="code" href="group__stm32f103ret__iar__config.htm#ga6c8637fc20543487ddec55e99e14db4f">00318</a> <span class="preprocessor"></span><span class="preprocessor">#define halCommonMemCompare(s0,s1,l) memcmp(s0, s1, l)</span>
<a name="l00319"></a><a class="code" href="group__stm32f103ret__iar__config.htm#ga3d184458948f81e68cef14bd868c4923">00319</a> <span class="preprocessor"></span><span class="preprocessor">#define halCommonMemPGMCompare(s0,s1,l) memcmp(s0, s1, l)</span>
<a name="l00320"></a><a class="code" href="group__stm32f103ret__iar__config.htm#gaebdb39ad5b093d6d3086a7d8bbeae893">00320</a> <span class="preprocessor"></span><span class="preprocessor">#define halCommonMemPGMCopy(d,s,l) memcpy(d,s,l)</span>
<a name="l00321"></a>00321 <span class="preprocessor"></span>
<a name="l00322"></a><a class="code" href="group__stm32f103ret__iar__config.htm#gad7795912037ecd3781859d0895f051a8">00322</a> <span class="preprocessor">#define MEMSET(d,v,l)  halCommonMemSet(d,v,l)</span>
<a name="l00323"></a><a class="code" href="group__stm32f103ret__iar__config.htm#ga757f7559cae8d5d8a1a52fd78afaf916">00323</a> <span class="preprocessor"></span><span class="preprocessor">#define MEMCOPY(d,s,l) halCommonMemCopy(d,s,l)</span>
<a name="l00324"></a><a class="code" href="group__stm32f103ret__iar__config.htm#gaaf10cad513a5560c6132a768e050a5c7">00324</a> <span class="preprocessor"></span><span class="preprocessor">#define MEMCOMPARE(s0,s1,l) halCommonMemCompare(s0, s1, l)</span>
<a name="l00325"></a><a class="code" href="group__stm32f103ret__iar__config.htm#ga0470dcdb8618b1d1140acfc239ea24d6">00325</a> <span class="preprocessor"></span><span class="preprocessor">#define MEMPGMCOMPARE(s0,s1,l) halCommonMemPGMCompare(s0, s1, l)</span>
<a name="l00326"></a>00326 <span class="preprocessor"></span>
<a name="l00327"></a>00327 
<a name="l00328"></a>00328 
<a name="l00329"></a>00329 
<a name="l00333"></a><a class="code" href="group__stm32f103ret__iar__config.htm#gac6e2cc702734ab195fc0bdfedcacd1d3">00333</a> <span class="preprocessor">#define PLATCOMMONOKTOINCLUDE</span>
<a name="l00334"></a>00334 <span class="preprocessor"></span><span class="preprocessor">  #include &quot;<a class="code" href="platform-common_8h.htm">hal/host/generic/compiler/platform-common.h</a>&quot;</span>
<a name="l00335"></a>00335 <span class="preprocessor">#undef PLATCOMMONOKTOINCLUDE</span>
<a name="l00336"></a>00336 <span class="preprocessor"></span>
<a name="l00337"></a>00337 <span class="preprocessor">#endif // __IAR_ST_H__</span>
<a name="l00338"></a>00338 <span class="preprocessor"></span>
</pre></div></div>
<hr size="1">

<table border="0" cellspacing="0" cellpadding="0" width=100%>

<tr>

<td><address><small>

EmberZNet API Reference: For the STM32F103RET Host platform. <br>

EmberZNet 4.5.0 - Document 120-3025-000-45xx.

</small></address>

</td>

<td align="right">

<address><small>

Copyright &copy; 2006-2010 by Ember Corporation. All rights reserved.<br>

Generated Fri Jun 24 15:12:52 2011 with <a href="http://www.doxygen.org/index.html">Doxygen</a> 1.6.1.

</small></address>

</td>

</tr>

</table>

</body>

</html>
