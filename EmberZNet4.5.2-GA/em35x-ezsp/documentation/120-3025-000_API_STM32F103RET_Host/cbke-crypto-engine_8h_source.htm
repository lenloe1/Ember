<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">

<title>EmberZNet API Reference: For the STM32F103RET Host platform: cbke-crypto-engine.h Source File</title>

<LINK HREF="doxygen.css" REL="stylesheet" TYPE="text/css">

</head><body>

<table border="0" cellspacing="0" cellpadding="0"  width=100%>

<tr>

<td><img src="emberLogoSmallWebsiteVer.gif"></td>

<td> <div class="qindex">

<a class="qindex" href="main.htm">Home</a>&nbsp;

 | &nbsp;<a class="qindex" href="modules.htm">Modules</a>&nbsp;

 | &nbsp;<a class="qindex" href="annotated.htm">Data Structures</a>&nbsp;

 | &nbsp;<a class="qindex" href="files.htm">File List</a>&nbsp;

 | &nbsp;<a class="qindex" href="dirs.htm">Directories</a>&nbsp;

 | &nbsp;<a class="qindex" href="globals.htm">Index</a></div>

</td>

</table>
<!-- Generated by Doxygen 1.6.1 -->
  <div class="navpath"><a class="el" href="dir_036c65d538536e06a7d7209791f76ee1.htm">stack</a>&nbsp;&raquo&nbsp;<a class="el" href="dir_91491a856dc713f2822c8710569c41fd.htm">include</a>
  </div>
<div class="contents">
<h1>cbke-crypto-engine.h</h1><a href="cbke-crypto-engine_8h.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00030"></a>00030 <a class="code" href="group__ember__types.htm#ga333d7a94b63d29c627eb16b0667371ec" title="Return type for Ember functions.">EmberStatus</a> <a class="code" href="group__smart__energy__security.htm#ga3efb8a9cb70bdb0d3254bd40859416b4" title="Retrieves the implicit certificate stored in the MFG tokens of the device.">emberGetCertificate</a>(<a class="code" href="structEmberCertificateData.htm" title="This data structure contains the certificate data that is used for Certificate Based...">EmberCertificateData</a>* result);
<a name="l00031"></a>00031 
<a name="l00047"></a>00047 <a class="code" href="group__ember__types.htm#ga333d7a94b63d29c627eb16b0667371ec" title="Return type for Ember functions.">EmberStatus</a> <a class="code" href="group__smart__energy__security.htm#gab8952f016f5e33511f30aeef69424d51" title="This function begins the process of generating an ephemeral public/private ECC key...">emberGenerateCbkeKeys</a>(<span class="keywordtype">void</span>);
<a name="l00048"></a>00048 
<a name="l00071"></a>00071 <a class="code" href="group__ember__types.htm#ga333d7a94b63d29c627eb16b0667371ec" title="Return type for Ember functions.">EmberStatus</a> <a class="code" href="group__smart__energy__security.htm#ga45c3df76fe76179c9f5bc128dab5af66" title="This function will begin the process of generating the shared secret, the new link...">emberCalculateSmacs</a>(<span class="keywordtype">boolean</span> amInitiator,
<a name="l00072"></a>00072                                 <a class="code" href="structEmberCertificateData.htm" title="This data structure contains the certificate data that is used for Certificate Based...">EmberCertificateData</a>* partnerCert, 
<a name="l00073"></a>00073                                 <a class="code" href="structEmberPublicKeyData.htm" title="This data structure contains the public key data that is used for Certificate Based...">EmberPublicKeyData</a>* partnerEphemeralPublicKey);
<a name="l00074"></a>00074 
<a name="l00089"></a>00089 <a class="code" href="group__ember__types.htm#ga333d7a94b63d29c627eb16b0667371ec" title="Return type for Ember functions.">EmberStatus</a> <a class="code" href="group__smart__energy__security.htm#ga33fdf8ca22f587cff4f36441cd16b51c" title="This function should be called when all CBKE operations are done. Any temporary data...">emberClearTemporaryDataMaybeStoreLinkKey</a>(<span class="keywordtype">boolean</span> storeLinkKey);
<a name="l00090"></a>00090 
<a name="l00091"></a>00091 <span class="comment">/* @brief LEGACY FUNCTION:  This functionality has been replaced by a single</span>
<a name="l00092"></a>00092 <span class="comment"> * bit in the ::EmberApsFrame, ::EMBER_APS_OPTION_DSA_SIGN.  Devices wishing</span>
<a name="l00093"></a>00093 <span class="comment"> * to send signed messages should use that as it requires fewer function calls</span>
<a name="l00094"></a>00094 <span class="comment"> * and message buffering.  emberDsaSignHandler() is still called when using</span>
<a name="l00095"></a>00095 <span class="comment"> * ::EMBER_APS_OPTION_DSA_SIGN.  However, this function is still supported.</span>
<a name="l00096"></a>00096 <span class="comment"> *</span>
<a name="l00097"></a>00097 <span class="comment"> * This function begins the process of signing the passed message</span>
<a name="l00098"></a>00098 <span class="comment"> * contained within the buffer.  If no other ECC operation is going on,</span>
<a name="l00099"></a>00099 <span class="comment"> * it will immediately return with ::EMBER_OPERATION_IN_PROGRESS.  </span>
<a name="l00100"></a>00100 <span class="comment"> * It will delay a period of time to let APS retries take place, but then it </span>
<a name="l00101"></a>00101 <span class="comment"> * will shutdown the radio and consume the CPU processing until the signing </span>
<a name="l00102"></a>00102 <span class="comment"> * is complete.  This may take up to 1 second.</span>
<a name="l00103"></a>00103 <span class="comment"> *</span>
<a name="l00104"></a>00104 <span class="comment"> * The signed message will be returned in ::emberDsaSignHandler().</span>
<a name="l00105"></a>00105 <span class="comment"> *</span>
<a name="l00106"></a>00106 <span class="comment"> * Note that the last byte of the buffer contents passed to this function has</span>
<a name="l00107"></a>00107 <span class="comment"> * special significance.  As the typical use case for DSA signing is to sign the</span>
<a name="l00108"></a>00108 <span class="comment"> * ZCL payload of a DRLC Report Event Status message in SE 1.0, there is often</span>
<a name="l00109"></a>00109 <span class="comment"> * both a signed portion (ZCL payload) and an unsigned portion (ZCL header).</span>
<a name="l00110"></a>00110 <span class="comment"> * The last byte in the content of messageToSign is therefore used as a </span>
<a name="l00111"></a>00111 <span class="comment"> * special indicator to signify how many bytes of leading data in the buffer</span>
<a name="l00112"></a>00112 <span class="comment"> * should be excluded from consideration during the signing process.  If the</span>
<a name="l00113"></a>00113 <span class="comment"> * signature needs to cover the entire buffer (all bytes except last one), </span>
<a name="l00114"></a>00114 <span class="comment"> * the caller should ensure that the last byte of the buffer contents is 0. </span>
<a name="l00115"></a>00115 <span class="comment"> * When the signature operation is complete, this final byte will be replaced</span>
<a name="l00116"></a>00116 <span class="comment"> * by the signature type indicator (0x01 for ECDSA signatures), and the </span>
<a name="l00117"></a>00117 <span class="comment"> * actual signature will be appended to the buffer after this byte.</span>
<a name="l00118"></a>00118 <span class="comment"> *</span>
<a name="l00119"></a>00119 <span class="comment"> * @param messageToSign The message buffer containing the complete message,</span>
<a name="l00120"></a>00120 <span class="comment"> *   both the to-be-signed portion as well as any leading data excluded from</span>
<a name="l00121"></a>00121 <span class="comment"> *   the signing operation.  See note above regarding special requirements</span>
<a name="l00122"></a>00122 <span class="comment"> *   for this buffer.</span>
<a name="l00123"></a>00123 <span class="comment"> * </span>
<a name="l00124"></a>00124 <span class="comment"> * @return ::EMBER_OPERATION_IN_PROGRESS if the stack has queued up the</span>
<a name="l00125"></a>00125 <span class="comment"> *   operation for execution.  ::EMBER_INVALID_CALL if the operation can&apos;t be</span>
<a name="l00126"></a>00126 <span class="comment"> *   performed in this context (possibly because another ECC operation is</span>
<a name="l00127"></a>00127 <span class="comment"> *   pending.)</span>
<a name="l00128"></a>00128 <span class="comment"> */</span>
<a name="l00129"></a>00129 <a class="code" href="group__ember__types.htm#ga333d7a94b63d29c627eb16b0667371ec" title="Return type for Ember functions.">EmberStatus</a> <a class="code" href="group__smart__energy__security.htm#ga3948efc511fa4fdce242354f04d2a334">emberDsaSign</a>(<a class="code" href="group__ember__types.htm#ga6ed7385454b72470ac4daaa87fc8539c" title="Incoming and outgoing messages are stored in buffers. These buffers are allocated...">EmberMessageBuffer</a> messageToSign);
<a name="l00130"></a>00130 
<a name="l00131"></a>00131 
<a name="l00132"></a>00132 <span class="comment">/* @brief This function is an application callback that must be defined</span>
<a name="l00133"></a>00133 <span class="comment"> * when using CBKE.  It is called when the ephemeral key generation operation</span>
<a name="l00134"></a>00134 <span class="comment"> * is complete.  The newly generated public key is passed back to the </span>
<a name="l00135"></a>00135 <span class="comment"> * application to be sent to the CBKE partner over-the-air.  Internally</span>
<a name="l00136"></a>00136 <span class="comment"> * the stack saves the public and private key pair until it the function</span>
<a name="l00137"></a>00137 <span class="comment"> * ::emberClearTemporaryDataMaybeStoreLinkKey() is called by the application.</span>
<a name="l00138"></a>00138 <span class="comment"> *</span>
<a name="l00139"></a>00139 <span class="comment"> * @param status This is the ::EmberStatus value indicating the success or </span>
<a name="l00140"></a>00140 <span class="comment"> *   failure of the operation.</span>
<a name="l00141"></a>00141 <span class="comment"> * @param ephemeralPublicKey A pointer to an ::EmberPublicKeyData structure</span>
<a name="l00142"></a>00142 <span class="comment"> *   containing the newly generated public key.</span>
<a name="l00143"></a>00143 <span class="comment"> */</span>
<a name="l00144"></a>00144 <span class="keywordtype">void</span> <a class="code" href="group__smart__energy__security.htm#ga269e2ce38517a43b32f9f4794636a1fe">emberGenerateCbkeKeysHandler</a>(<a class="code" href="group__ember__types.htm#ga333d7a94b63d29c627eb16b0667371ec" title="Return type for Ember functions.">EmberStatus</a> status,
<a name="l00145"></a>00145                                   <a class="code" href="structEmberPublicKeyData.htm" title="This data structure contains the public key data that is used for Certificate Based...">EmberPublicKeyData</a>* ephemeralPublicKey);
<a name="l00146"></a>00146 
<a name="l00147"></a>00147 <span class="comment">/* @brief This function is an application callback that must be defined</span>
<a name="l00148"></a>00148 <span class="comment"> * when using CBKE.  It is called when the shared secret generation is</span>
<a name="l00149"></a>00149 <span class="comment"> * complete and the link key and SMACs have been derived.  The link key is</span>
<a name="l00150"></a>00150 <span class="comment"> * stored in a temporary location until the application decides to</span>
<a name="l00151"></a>00151 <span class="comment"> * store or discard the key by calling</span>
<a name="l00152"></a>00152 <span class="comment"> * ::emberClearTemporaryDataMaybeStoreLinkKey().  </span>
<a name="l00153"></a>00153 <span class="comment"> *</span>
<a name="l00154"></a>00154 <span class="comment"> * @param status This is the ::EmberStatus value indicating the success or </span>
<a name="l00155"></a>00155 <span class="comment"> *   failure of the operation.</span>
<a name="l00156"></a>00156 <span class="comment"> * @param initiatorSmac This is a pointer to the ::EmberSmacData structure</span>
<a name="l00157"></a>00157 <span class="comment"> *   to the initiator&apos;s version of the SMAC.</span>
<a name="l00158"></a>00158 <span class="comment"> * @param responderSmac This is a pointer to the ::EmberSmacData structure</span>
<a name="l00159"></a>00159 <span class="comment"> *   to the responder&apos;s version of the SMAC.</span>
<a name="l00160"></a>00160 <span class="comment"> */</span>
<a name="l00161"></a>00161 <span class="keywordtype">void</span> <a class="code" href="group__smart__energy__security.htm#ga186c463a1da518f9b61a80a0417fac1a">emberCalculateSmacsHandler</a>(<a class="code" href="group__ember__types.htm#ga333d7a94b63d29c627eb16b0667371ec" title="Return type for Ember functions.">EmberStatus</a> status,
<a name="l00162"></a>00162                                 <a class="code" href="structEmberSmacData.htm" title="This data structure contains the Shared Message Authentication Code (SMAC) data that...">EmberSmacData</a>* initiatorSmac,
<a name="l00163"></a>00163                                 <a class="code" href="structEmberSmacData.htm" title="This data structure contains the Shared Message Authentication Code (SMAC) data that...">EmberSmacData</a>* responderSmac);
<a name="l00164"></a>00164 
<a name="l00165"></a>00165 <span class="comment">/* @brief This function is an application callback that must be defined</span>
<a name="l00166"></a>00166 <span class="comment"> * when using CBKE.  This callback is provided to the application to let</span>
<a name="l00167"></a>00167 <span class="comment"> * it know that the ECC operations have completed and the radio has been turned</span>
<a name="l00168"></a>00168 <span class="comment"> * back on.  When using the sign-and-send option of the ::EmberApsFrame, </span>
<a name="l00169"></a>00169 <span class="comment"> * ::EMBER_APS_OPTION_DSA_SIGN, the handler will NOT return the complete</span>
<a name="l00170"></a>00170 <span class="comment"> * signed message.  This callback is merely informative.  If ::emberDsaSign() </span>
<a name="l00171"></a>00171 <span class="comment"> * has been called, the message plus signature will be returned to the caller</span>
<a name="l00172"></a>00172 <span class="comment"> * and it must be sent separately by one of the message send primitives</span>
<a name="l00173"></a>00173 <span class="comment"> * (such as ::emberSendUnicast()).</span>
<a name="l00174"></a>00174 <span class="comment"> * </span>
<a name="l00175"></a>00175 <span class="comment"> * @param status This is the ::EmberStatus value indicating the success or </span>
<a name="l00176"></a>00176 <span class="comment"> *   failure of the operation.</span>
<a name="l00177"></a>00177 <span class="comment"> * @param signedMessage This is the ::EmberMessageBuffer indicating the newly</span>
<a name="l00178"></a>00178 <span class="comment"> *   signed message, if ::emberDsaSign() was called.  If message was signed</span>
<a name="l00179"></a>00179 <span class="comment"> *   using ::EMBER_APS_OPTION_DSA_SIGN then this will be</span>
<a name="l00180"></a>00180 <span class="comment"> *    ::EMBER_NULL_MESSAGE_BUFFER.</span>
<a name="l00181"></a>00181 <span class="comment"> */</span>
<a name="l00182"></a>00182 <span class="keywordtype">void</span> <a class="code" href="group__smart__energy__security.htm#gac60166a5cb371cce8b9ff69111198073">emberDsaSignHandler</a>(<a class="code" href="group__ember__types.htm#ga333d7a94b63d29c627eb16b0667371ec" title="Return type for Ember functions.">EmberStatus</a> status, 
<a name="l00183"></a>00183                          <a class="code" href="group__ember__types.htm#ga6ed7385454b72470ac4daaa87fc8539c" title="Incoming and outgoing messages are stored in buffers. These buffers are allocated...">EmberMessageBuffer</a> signedMessage);
<a name="l00184"></a>00184 
<a name="l00185"></a>00185 
<a name="l00186"></a>00186 <span class="comment">/* @brief This function is used to update the Smart Energy certificate,</span>
<a name="l00187"></a>00187 <span class="comment"> * CA public key, and local private key that the device uses for CBKE.</span>
<a name="l00188"></a>00188 <span class="comment"> * The preferred method for adding certificates is to pre-install them</span>
<a name="l00189"></a>00189 <span class="comment"> * in MFG tokens when the chip is manufactured.  However this function</span>
<a name="l00190"></a>00190 <span class="comment"> * allows the certificate to be updated at runtime after the device has</span>
<a name="l00191"></a>00191 <span class="comment"> * been deployed.  </span>
<a name="l00192"></a>00192 <span class="comment"> *   The behavior of this function differs based on the hardware platform.</span>
<a name="l00193"></a>00193 <span class="comment"> * </span>
<a name="l00194"></a>00194 <span class="comment"> * For the 2xx:</span>
<a name="l00195"></a>00195 <span class="comment"> * To use this functionality the application must also set</span>
<a name="l00196"></a>00196 <span class="comment"> * the stack configuration value ::EMBER_CERTIFICATE_TABLE_SIZE to 1.</span>
<a name="l00197"></a>00197 <span class="comment"> * Attempts to call this function with ::EMBER_CERTIFICATE_TABLE_SIZE of 0</span>
<a name="l00198"></a>00198 <span class="comment"> * will return ::EMBER_SECURITY_CONFIGURATION_INVALID.</span>
<a name="l00199"></a>00199 <span class="comment"> * The passed security data will be persistently stored in stack tokens.</span>
<a name="l00200"></a>00200 <span class="comment"> * The certificate contains the EUI64 it is associated with.  If that</span>
<a name="l00201"></a>00201 <span class="comment"> * EUI64 matches the EUI64 currently in use by the device, this</span>
<a name="l00202"></a>00202 <span class="comment"> * function may be called at any time, even while running in a network.</span>
<a name="l00203"></a>00203 <span class="comment"> * If the EUI64 does not match, this function may only be called when the</span>
<a name="l00204"></a>00204 <span class="comment"> * network is in a state of ::EMBER_NO_NETWORK.  Attempts to do otherwise</span>
<a name="l00205"></a>00205 <span class="comment"> * will result in a return value of ::EMBER_INVALID_CALL.</span>
<a name="l00206"></a>00206 <span class="comment"> *</span>
<a name="l00207"></a>00207 <span class="comment"> * For the 3xx:</span>
<a name="l00208"></a>00208 <span class="comment"> * This function allows a one-time write of the MFG token if it has not</span>
<a name="l00209"></a>00209 <span class="comment"> * already been set.  It does NOT utilize the ::EMBER_CERTIFICATE_TABLE_SIZE</span>
<a name="l00210"></a>00210 <span class="comment"> * so that should remain set at 0.  Attempts to write the certificate that</span>
<a name="l00211"></a>00211 <span class="comment"> * has already been written will return a result of</span>
<a name="l00212"></a>00212 <span class="comment"> * ::EMBER_ERR_FLASH_WRITE_INHIBITED.  If the EUI64 in the certificate is</span>
<a name="l00213"></a>00213 <span class="comment"> * the same as the current EUI of the device then this function may be called</span>
<a name="l00214"></a>00214 <span class="comment"> * while the stack is up.  If the EUI in the certificate is different than</span>
<a name="l00215"></a>00215 <span class="comment"> * the current value, this function may only be called when the network is in</span>
<a name="l00216"></a>00216 <span class="comment"> * a state of ::EMBER_NO_NETWORK.  Attempts to do otherwise will result in a</span>
<a name="l00217"></a>00217 <span class="comment"> * return value of ::EMBER_INVALID_CALL.  If the EUI in the certificate is</span>
<a name="l00218"></a>00218 <span class="comment"> * different than the current value this function will also write the </span>
<a name="l00219"></a>00219 <span class="comment"> * Custom EUI64 MFG token.  If that token has already been written the operation</span>
<a name="l00220"></a>00220 <span class="comment"> * will fail and return a result of ::EMBER_BAD_ARGUMENT.</span>
<a name="l00221"></a>00221 <span class="comment"> * If all the above criteria is met the token will be written and </span>
<a name="l00222"></a>00222 <span class="comment"> * ::EMBER_SUCCESS will be returned.</span>
<a name="l00223"></a>00223 <span class="comment"> * </span>
<a name="l00224"></a>00224 <span class="comment"> * @note The device will immediately and persistently &lt;b&gt;change its EUI64</span>
<a name="l00225"></a>00225 <span class="comment"> * to match the value in the certificate&lt;/b&gt;. </span>
<a name="l00226"></a>00226 <span class="comment"> *</span>
<a name="l00227"></a>00227 <span class="comment"> * @param caPublic A pointer to the CA public key data that will be stored</span>
<a name="l00228"></a>00228 <span class="comment"> *   in stack tokens.</span>
<a name="l00229"></a>00229 <span class="comment"> * @param myCert A pointer to the certificate data that will be stored in</span>
<a name="l00230"></a>00230 <span class="comment"> *   stack tokens.</span>
<a name="l00231"></a>00231 <span class="comment"> * @param mykey A pointer to the private key data that will be stored in</span>
<a name="l00232"></a>00232 <span class="comment"> *   stack tokens.</span>
<a name="l00233"></a>00233 <span class="comment"> * @return The ::EmberStatus value indicating success or failure of the </span>
<a name="l00234"></a>00234 <span class="comment"> *   operation.</span>
<a name="l00235"></a>00235 <span class="comment"> */</span>
<a name="l00236"></a>00236 <a class="code" href="group__ember__types.htm#ga333d7a94b63d29c627eb16b0667371ec" title="Return type for Ember functions.">EmberStatus</a> <a class="code" href="group__smart__energy__security.htm#ga5fc274a1307fa7440b1b6cd7e1f64932">emberSetPreinstalledCbkeData</a>(<a class="code" href="structEmberPublicKeyData.htm" title="This data structure contains the public key data that is used for Certificate Based...">EmberPublicKeyData</a>* caPublic,
<a name="l00237"></a>00237                                          <a class="code" href="structEmberCertificateData.htm" title="This data structure contains the certificate data that is used for Certificate Based...">EmberCertificateData</a>* myCert,
<a name="l00238"></a>00238                                          <a class="code" href="structEmberPrivateKeyData.htm" title="This data structure contains the private key data that is used for Certificate Based...">EmberPrivateKeyData</a>* myKey);
<a name="l00239"></a>00239 
<a name="l00240"></a>00240 <span class="comment">/* @brief This function retrieves the EUI64 from the stack token </span>
<a name="l00241"></a>00241 <span class="comment"> * Smart Energy Certificate (it does not examine the MFG token certificate)</span>
<a name="l00242"></a>00242 <span class="comment"> * and returns the value in the &quot;Subject&quot; field (the EUI64) to the caller.</span>
<a name="l00243"></a>00243 <span class="comment"> * If no stack token is set, the ::EMBER_CERTIFICATE_TABLE_SIZE is zero</span>
<a name="l00244"></a>00244 <span class="comment"> * or if the CBKE library is not present, this function returns FALSE</span>
<a name="l00245"></a>00245 <span class="comment"> * and the EUI64 for the return value is not set.</span>
<a name="l00246"></a>00246 <span class="comment"> *</span>
<a name="l00247"></a>00247 <span class="comment"> * @param certEui64 The location of the return value for the EUI64.</span>
<a name="l00248"></a>00248 <span class="comment"> * @return TRUE if the stack token certificate is set and the EUI64</span>
<a name="l00249"></a>00249 <span class="comment"> *   return value is valid.  FALSE otherwise.</span>
<a name="l00250"></a>00250 <span class="comment"> */</span>
<a name="l00251"></a>00251 <span class="keywordtype">boolean</span> <a class="code" href="group__smart__energy__security.htm#gaf69d14481a57514f02b84ca472ace8f2">emberGetStackCertificateEui64</a>(<a class="code" href="group__ember__types.htm#ga02a0425b19cee073902ca89f6a16d8e1" title="EUI 64-bit ID (an IEEE address).">EmberEUI64</a> certEui64);
<a name="l00252"></a>00252 
<a name="l00253"></a>00253 <span class="comment">/* @brief This function verifies the ECDSA signature of the</span>
<a name="l00254"></a>00254 <span class="comment"> * calculated digest and the associated received signature, using</span>
<a name="l00255"></a>00255 <span class="comment"> * the signerCertificate passed in.  It is expected that the application</span>
<a name="l00256"></a>00256 <span class="comment"> * obtains the signerCertificate and performs the message digest calculation</span>
<a name="l00257"></a>00257 <span class="comment"> * on its own.</span>
<a name="l00258"></a>00258 <span class="comment"> */</span>
<a name="l00259"></a>00259 <a class="code" href="group__ember__types.htm#ga333d7a94b63d29c627eb16b0667371ec" title="Return type for Ember functions.">EmberStatus</a> <a class="code" href="group__smart__energy__security.htm#ga4b69802e7375290ee47918eb80b0572a">emberDsaVerify</a>(<a class="code" href="structEmberMessageDigest.htm" title="This data structure contains an AES-MMO Hash (the message digest).">EmberMessageDigest</a>* digest,
<a name="l00260"></a>00260                            <a class="code" href="structEmberCertificateData.htm" title="This data structure contains the certificate data that is used for Certificate Based...">EmberCertificateData</a>* signerCertificate,
<a name="l00261"></a>00261                            <a class="code" href="structEmberSignatureData.htm" title="This data structure contains a DSA signature. It is the bit concatenation of the...">EmberSignatureData</a>* receivedSig);
<a name="l00262"></a>00262 
<a name="l00263"></a>00263 <span class="comment">/* @brief This callback is executed by the stack when the DSA verification</span>
<a name="l00264"></a>00264 <span class="comment"> * has completed and has a result.  If the result is EMBER_SUCCESS, the </span>
<a name="l00265"></a>00265 <span class="comment"> * signature is valid.  If the result is EMBER_SIGNATURE_VERIFY_FAILURE</span>
<a name="l00266"></a>00266 <span class="comment"> * then the signature is invalid.  If the result is anything else then the</span>
<a name="l00267"></a>00267 <span class="comment"> * signature verify operation failed and the validity is unknown.</span>
<a name="l00268"></a>00268 <span class="comment"> */</span>
<a name="l00269"></a>00269 <span class="keywordtype">void</span> <a class="code" href="group__smart__energy__security.htm#ga758cb85bf29bcd41a7dd79007b2a2b35">emberDsaVerifyHandler</a>(<a class="code" href="group__ember__types.htm#ga333d7a94b63d29c627eb16b0667371ec" title="Return type for Ember functions.">EmberStatus</a> status);
<a name="l00270"></a>00270 
<a name="l00271"></a>00271 
</pre></div></div>
<hr size="1">

<table border="0" cellspacing="0" cellpadding="0" width=100%>

<tr>

<td><address><small>

EmberZNet API Reference: For the STM32F103RET Host platform. <br>

EmberZNet 4.5.0 - Document 120-3025-000-45xx.

</small></address>

</td>

<td align="right">

<address><small>

Copyright &copy; 2006-2010 by Ember Corporation. All rights reserved.<br>

Generated Fri Jun 24 15:12:52 2011 with <a href="http://www.doxygen.org/index.html">Doxygen</a> 1.6.1.

</small></address>

</td>

</tr>

</table>

</body>

</html>
