<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">

<title>EmberZNet API Reference: For the STM32F103RET Host platform: platform-common.h Source File</title>

<LINK HREF="doxygen.css" REL="stylesheet" TYPE="text/css">

</head><body>

<table border="0" cellspacing="0" cellpadding="0"  width=100%>

<tr>

<td><img src="emberLogoSmallWebsiteVer.gif"></td>

<td> <div class="qindex">

<a class="qindex" href="main.htm">Home</a>&nbsp;

 | &nbsp;<a class="qindex" href="modules.htm">Modules</a>&nbsp;

 | &nbsp;<a class="qindex" href="annotated.htm">Data Structures</a>&nbsp;

 | &nbsp;<a class="qindex" href="files.htm">File List</a>&nbsp;

 | &nbsp;<a class="qindex" href="dirs.htm">Directories</a>&nbsp;

 | &nbsp;<a class="qindex" href="globals.htm">Index</a></div>

</td>

</table>
<!-- Generated by Doxygen 1.6.1 -->
  <div class="navpath"><a class="el" href="dir_928392185f3941e33d232d8d861cbeaf.htm">hal</a>&nbsp;&raquo&nbsp;<a class="el" href="dir_7642951b2ddc58ac37f687ab6e1b2fbf.htm">host</a>&nbsp;&raquo&nbsp;<a class="el" href="dir_303a5ccefc8fa12f6984697215e2d01d.htm">generic</a>&nbsp;&raquo&nbsp;<a class="el" href="dir_f4087f36da0fdae766d4a48e95bc9bc8.htm">compiler</a>
  </div>
<div class="contents">
<h1>platform-common.h</h1><a href="platform-common_8h.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00020"></a>00020 <span class="preprocessor">#ifndef PLATCOMMONOKTOINCLUDE</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span>  <span class="comment">//  This header should only be included by a PLATFORM_HEADER</span>
<a name="l00022"></a>00022 <span class="preprocessor">  #error  platform-common.h should not be included directly</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00024"></a>00024 <span class="preprocessor"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#ifndef __PLATFORMCOMMON_H__</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#define __PLATFORMCOMMON_H__</span>
<a name="l00028"></a>00028 <span class="preprocessor">// Many of the common definitions must be explicitly enabled by the </span>
<a name="l00029"></a>00029 <span class="preprocessor"></span><span class="comment">//  particular PLATFORM_HEADER being used</span>
<a name="l00031"></a>00031 <span class="comment"></span>
<a name="l00032"></a>00032 
<a name="l00034"></a>00034 <span class="preprocessor">#ifdef _HAL_USE_COMMON_PGM_</span>
<a name="l00035"></a>00035 <span class="preprocessor"></span>
<a name="l00042"></a><a class="code" href="group__platform__common.htm#gaaa9b358e8bf541ff73d8616ca43a869e">00042</a> <span class="preprocessor">  #define PGM     const</span>
<a name="l00043"></a>00043 <span class="preprocessor"></span>
<a name="l00047"></a><a class="code" href="group__platform__common.htm#ga963f816fc88a5d8479c285ed4c630229">00047</a> <span class="preprocessor">  #define PGM_P   const char *</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span>
<a name="l00052"></a><a class="code" href="group__platform__common.htm#gaa9a877b6f1dd1c27050df37e47020ea6">00052</a> <span class="preprocessor">  #define PGM_PU  const unsigned char *</span>
<a name="l00053"></a>00053 <span class="preprocessor"></span>
<a name="l00054"></a>00054 
<a name="l00060"></a><a class="code" href="group__platform__common.htm#ga4b68f8b2a27e9ef2bc2e29ac0a56e6ac">00060</a> <span class="preprocessor">  #define PGM_NO_CONST</span>
<a name="l00061"></a>00061 <span class="preprocessor"></span>
<a name="l00062"></a>00062 <span class="preprocessor">#endif //_HAL_USE_COMMON_PGM_</span>
<a name="l00063"></a>00063 <span class="preprocessor"></span>
<a name="l00064"></a>00064 
<a name="l00066"></a>00066 <span class="preprocessor">#ifdef _HAL_USE_COMMON_DIVMOD_</span>
<a name="l00067"></a>00067 <span class="preprocessor"></span>
<a name="l00080"></a><a class="code" href="group__platform__common.htm#gaa99c936421e2df1c7e289cde67548399">00080</a> <span class="preprocessor">  #define halCommonUDiv32By16(x, y) ((int16u) (((int32u) (x)) / ((int16u) (y))))</span>
<a name="l00081"></a>00081 <span class="preprocessor"></span>
<a name="l00087"></a><a class="code" href="group__platform__common.htm#gad2d0642a54279d837b918f1fbad0ef9d">00087</a> <span class="preprocessor">  #define halCommonSDiv32By16(x, y) ((int16s) (((int32s) (x)) / ((int16s) (y))))</span>
<a name="l00088"></a>00088 <span class="preprocessor"></span>
<a name="l00094"></a><a class="code" href="group__platform__common.htm#gaa4396f0e008fcc2722feb92ade26d553">00094</a> <span class="preprocessor">  #define halCommonUMod32By16(x, y) ((int16u) (((int32u) (x)) % ((int16u) (y))))</span>
<a name="l00095"></a>00095 <span class="preprocessor"></span>
<a name="l00101"></a><a class="code" href="group__platform__common.htm#gab01f62a24a77e7f3efcf731e3cc4c728">00101</a> <span class="preprocessor">  #define halCommonSMod32By16(x, y) ((int16s) (((int32s) (x)) % ((int16s) (y))))</span>
<a name="l00102"></a>00102 <span class="preprocessor"></span>
<a name="l00103"></a>00103 <span class="preprocessor">#endif //_HAL_USE_COMMON_DIVMOD_</span>
<a name="l00104"></a>00104 <span class="preprocessor"></span>
<a name="l00105"></a>00105 
<a name="l00107"></a>00107 <span class="preprocessor">#ifdef _HAL_USE_COMMON_MEMUTILS_</span>
<a name="l00108"></a>00108 <span class="preprocessor"></span>
<a name="l00120"></a>00120 
<a name="l00124"></a>00124   <span class="keywordtype">void</span> <a class="code" href="group__stm32f103ret__iar__config.htm#ga39a0cb8ad0f2af508e97f27b2f77be28" title="All of the ember defined macros/functions simply redirect to the full C Standard...">halCommonMemCopy</a>(<span class="keywordtype">void</span> *dest, <span class="keyword">const</span> <span class="keywordtype">void</span> *src, <a class="code" href="group__stm32f103ret__iar__config.htm#ga40790a257990626db514387099889f37" title="A typedef to make the size of the variable explicitly known.">int16u</a> bytes);
<a name="l00125"></a>00125 
<a name="l00126"></a>00126 
<a name="l00130"></a>00130   <span class="keywordtype">void</span> <a class="code" href="group__stm32f103ret__iar__config.htm#ga231abe7f2eb2b710892b423d17d44081" title="All of the ember defined macros/functions simply redirect to the full C Standard...">halCommonMemSet</a>(<span class="keywordtype">void</span> *dest, <a class="code" href="group__stm32f103ret__iar__config.htm#ga29edc2328533c8dbc46be2d7b654c749" title="A typedef to make the size of the variable explicitly known.">int8u</a> val, <a class="code" href="group__stm32f103ret__iar__config.htm#ga40790a257990626db514387099889f37" title="A typedef to make the size of the variable explicitly known.">int16u</a> bytes);
<a name="l00131"></a>00131 
<a name="l00132"></a>00132 
<a name="l00136"></a>00136   <a class="code" href="group__stm32f103ret__iar__config.htm#gac2017492c2bef74dd69c73d0c3452222" title="A typedef to make the size of the variable explicitly known.">int8s</a> <a class="code" href="group__stm32f103ret__iar__config.htm#ga6c8637fc20543487ddec55e99e14db4f" title="All of the ember defined macros/functions simply redirect to the full C Standard...">halCommonMemCompare</a>(<span class="keyword">const</span> <span class="keywordtype">void</span> *source0, <span class="keyword">const</span> <span class="keywordtype">void</span> *source1, <a class="code" href="group__stm32f103ret__iar__config.htm#ga40790a257990626db514387099889f37" title="A typedef to make the size of the variable explicitly known.">int16u</a> bytes);
<a name="l00137"></a>00137 
<a name="l00138"></a>00138 
<a name="l00143"></a>00143   <a class="code" href="group__stm32f103ret__iar__config.htm#gac2017492c2bef74dd69c73d0c3452222" title="A typedef to make the size of the variable explicitly known.">int8s</a> <a class="code" href="group__stm32f103ret__iar__config.htm#ga3d184458948f81e68cef14bd868c4923" title="All of the ember defined macros/functions simply redirect to the full C Standard...">halCommonMemPGMCompare</a>(<span class="keyword">const</span> <span class="keywordtype">void</span> *source0, <span class="keywordtype">void</span> <a class="code" href="group__platform__common.htm#gaaa9b358e8bf541ff73d8616ca43a869e" title="Standard program memory delcaration.">PGM</a> *source1, <a class="code" href="group__stm32f103ret__iar__config.htm#ga40790a257990626db514387099889f37" title="A typedef to make the size of the variable explicitly known.">int16u</a> bytes);
<a name="l00144"></a>00144 
<a name="l00149"></a>00149   <span class="keywordtype">void</span> <a class="code" href="group__stm32f103ret__iar__config.htm#gaebdb39ad5b093d6d3086a7d8bbeae893" title="All of the ember defined macros/functions simply redirect to the full C Standard...">halCommonMemPGMCopy</a>(<span class="keywordtype">void</span>* dest, <span class="keywordtype">void</span> <a class="code" href="group__platform__common.htm#gaaa9b358e8bf541ff73d8616ca43a869e" title="Standard program memory delcaration.">PGM</a> *source, <a class="code" href="group__stm32f103ret__iar__config.htm#ga40790a257990626db514387099889f37" title="A typedef to make the size of the variable explicitly known.">int16u</a> bytes);
<a name="l00150"></a>00150 
<a name="l00154"></a>00154 <span class="preprocessor">  #define MEMSET(d,v,l)  halCommonMemSet(d,v,l)</span>
<a name="l00155"></a>00155 <span class="preprocessor"></span><span class="preprocessor">  #define MEMCOPY(d,s,l) halCommonMemCopy(d,s,l)</span>
<a name="l00156"></a>00156 <span class="preprocessor"></span><span class="preprocessor">  #define MEMCOMPARE(s0,s1,l) halCommonMemCompare(s0, s1, l)</span>
<a name="l00157"></a>00157 <span class="preprocessor"></span><span class="preprocessor">  #define MEMPGMCOMPARE(s0,s1,l) halCommonMemPGMCompare(s0, s1, l)</span>
<a name="l00158"></a>00158 <span class="preprocessor"></span>
<a name="l00160"></a>00160 <span class="preprocessor">#endif //_HAL_USE_COMMON_MEMUTILS_</span>
<a name="l00161"></a>00161 <span class="preprocessor"></span>
<a name="l00162"></a>00162 
<a name="l00163"></a>00163 
<a name="l00164"></a>00164 
<a name="l00165"></a>00165 
<a name="l00166"></a>00166 
<a name="l00167"></a>00167 
<a name="l00168"></a>00168 
<a name="l00169"></a>00169 
<a name="l00171"></a>00171 <span class="comment">//  The following sections are common on all platforms</span>
<a name="l00173"></a>00173 <span class="comment"></span>
<a name="l00175"></a>00175 
<a name="l00179"></a>00179 
<a name="l00183"></a><a class="code" href="group__platform__common.htm#gad27cc17b25bb93134368d5eb21126eae">00183</a> <span class="preprocessor">#define BIT(x) (1U &lt;&lt; (x))  // Unsigned avoids compiler warnings re BIT(15)</span>
<a name="l00184"></a>00184 <span class="preprocessor"></span>
<a name="l00188"></a><a class="code" href="group__platform__common.htm#gadfad29ac9abeda5f41af0130ebe92028">00188</a> <span class="preprocessor">#define BIT32(x) (((int32u) 1) &lt;&lt; (x))</span>
<a name="l00189"></a>00189 <span class="preprocessor"></span>
<a name="l00195"></a><a class="code" href="group__platform__common.htm#gab6d297e4c7bab3d95ea364c87ab4ba10">00195</a> <span class="preprocessor">#define SETBIT(reg, bit)      reg |= BIT(bit)</span>
<a name="l00196"></a>00196 <span class="preprocessor"></span>
<a name="l00202"></a><a class="code" href="group__platform__common.htm#ga7d10fff3f219a04b45a10162952ff658">00202</a> <span class="preprocessor">#define SETBITS(reg, bits)    reg |= (bits)</span>
<a name="l00203"></a>00203 <span class="preprocessor"></span>
<a name="l00209"></a><a class="code" href="group__platform__common.htm#ga0251472e37e2bbc799e0d52836cf9011">00209</a> <span class="preprocessor">#define CLEARBIT(reg, bit)    reg &amp;= ~(BIT(bit))</span>
<a name="l00210"></a>00210 <span class="preprocessor"></span>
<a name="l00216"></a><a class="code" href="group__platform__common.htm#ga7b2143d5ce4e8097b6732855aeebe344">00216</a> <span class="preprocessor">#define CLEARBITS(reg, bits)  reg &amp;= ~(bits)</span>
<a name="l00217"></a>00217 <span class="preprocessor"></span>
<a name="l00221"></a><a class="code" href="group__platform__common.htm#ga058ee17f5399d46ce18c639481e18513">00221</a> <span class="preprocessor">#define READBIT(reg, bit)     (reg &amp; (BIT(bit)))</span>
<a name="l00222"></a>00222 <span class="preprocessor"></span>
<a name="l00227"></a><a class="code" href="group__platform__common.htm#gaebed556d6516b7c0d16905c26848bd99">00227</a> <span class="preprocessor">#define READBITS(reg, bits)   (reg &amp; (bits))</span>
<a name="l00228"></a>00228 <span class="preprocessor"></span>
<a name="l00230"></a>00230 
<a name="l00231"></a>00231 
<a name="l00233"></a>00233 
<a name="l00237"></a>00237 
<a name="l00241"></a><a class="code" href="group__platform__common.htm#ga930cd568cc48ccfe26affc627e8ed85a">00241</a> <span class="preprocessor">#define LOW_BYTE(n)                     ((int8u)((n) &amp; 0xFF))</span>
<a name="l00242"></a>00242 <span class="preprocessor"></span>
<a name="l00246"></a><a class="code" href="group__platform__common.htm#ga2b23bd27632360de737fc779b59251f5">00246</a> <span class="preprocessor">#define HIGH_BYTE(n)                    ((int8u)(LOW_BYTE((n) &gt;&gt; 8)))</span>
<a name="l00247"></a>00247 <span class="preprocessor"></span>
<a name="l00252"></a><a class="code" href="group__platform__common.htm#ga9fe50dee570338bd5ee8b6ac14611953">00252</a> <span class="preprocessor">#define HIGH_LOW_TO_INT(high, low) (                              \</span>
<a name="l00253"></a>00253 <span class="preprocessor">                                    (( (int16u) (high) ) &lt;&lt; 8) +  \</span>
<a name="l00254"></a>00254 <span class="preprocessor">                                    (  (int16u) ( (low) &amp; 0xFF))  \</span>
<a name="l00255"></a>00255 <span class="preprocessor">                                   )                                </span>
<a name="l00256"></a>00256 <span class="preprocessor"></span>
<a name="l00260"></a><a class="code" href="group__platform__common.htm#gaa5f884348afbd2bc7184efefeec6aae3">00260</a> <span class="preprocessor">#define BYTE_0(n)                    ((int8u)((n) &amp; 0xFF))</span>
<a name="l00261"></a>00261 <span class="preprocessor"></span>
<a name="l00265"></a><a class="code" href="group__platform__common.htm#ga488ffa16ddba15b23e5a40fb201754a8">00265</a> <span class="preprocessor">#define BYTE_1(n)                    ((int8u)(BYTE_0((n) &gt;&gt; 8)))</span>
<a name="l00266"></a>00266 <span class="preprocessor"></span>
<a name="l00270"></a><a class="code" href="group__platform__common.htm#ga00cb9a8f13e389d83e850771463d1069">00270</a> <span class="preprocessor">#define BYTE_2(n)                    ((int8u)(BYTE_0((n) &gt;&gt; 16)))</span>
<a name="l00271"></a>00271 <span class="preprocessor"></span>
<a name="l00275"></a><a class="code" href="group__platform__common.htm#gab7bd5e94af2e86f3e19fb7f208995e09">00275</a> <span class="preprocessor">#define BYTE_3(n)                    ((int8u)(BYTE_0((n) &gt;&gt; 24)))</span>
<a name="l00276"></a>00276 <span class="preprocessor"></span>
<a name="l00278"></a>00278 
<a name="l00279"></a>00279 
<a name="l00281"></a>00281 
<a name="l00285"></a>00285 
<a name="l00290"></a><a class="code" href="group__platform__common.htm#ga4da05aa78bf33330f993d9f0fadaf926">00290</a> <span class="preprocessor">#define elapsedTimeInt8u(oldTime, newTime)       \</span>
<a name="l00291"></a>00291 <span class="preprocessor">  ((int8u) ((int8u)(newTime) - (int8u)(oldTime)))</span>
<a name="l00292"></a>00292 <span class="preprocessor"></span>
<a name="l00297"></a><a class="code" href="group__platform__common.htm#gab728801c3fb8c18040ae604170773f9e">00297</a> <span class="preprocessor">#define elapsedTimeInt16u(oldTime, newTime)      \</span>
<a name="l00298"></a>00298 <span class="preprocessor">  ((int16u) ((int16u)(newTime) - (int16u)(oldTime)))</span>
<a name="l00299"></a>00299 <span class="preprocessor"></span>
<a name="l00304"></a><a class="code" href="group__platform__common.htm#gaab3f415fd9db1deecb2ae74a6b0cdd96">00304</a> <span class="preprocessor">#define elapsedTimeInt32u(oldTime, newTime)      \</span>
<a name="l00305"></a>00305 <span class="preprocessor">  ((int32u) ((int32u)(newTime) - (int32u)(oldTime)))</span>
<a name="l00306"></a>00306 <span class="preprocessor"></span>
<a name="l00311"></a><a class="code" href="group__platform__common.htm#ga08fa97d649adefa1b487da3a56c49435">00311</a> <span class="preprocessor">#define MAX_INT8U_VALUE       (0xFF)</span>
<a name="l00312"></a><a class="code" href="group__platform__common.htm#ga15d97484a32b62f82b121a40e9385564">00312</a> <span class="preprocessor"></span><span class="preprocessor">#define HALF_MAX_INT8U_VALUE  (0x80)</span>
<a name="l00313"></a><a class="code" href="group__platform__common.htm#gaab8d26cb3b36c56f626e1d7debc0397b">00313</a> <span class="preprocessor"></span><span class="preprocessor">#define timeGTorEqualInt8u(t1, t2)           \</span>
<a name="l00314"></a>00314 <span class="preprocessor">  (elapsedTimeInt8u(t2, t1) &lt;= (HALF_MAX_INT8U_VALUE))</span>
<a name="l00315"></a>00315 <span class="preprocessor"></span>
<a name="l00320"></a><a class="code" href="group__platform__common.htm#ga4148a761b1307b024e44a0e2bd40f6e7">00320</a> <span class="preprocessor">#define MAX_INT16U_VALUE      (0xFFFF)</span>
<a name="l00321"></a><a class="code" href="group__platform__common.htm#gadcc8708077b35e04eb1dd3168d7764cc">00321</a> <span class="preprocessor"></span><span class="preprocessor">#define HALF_MAX_INT16U_VALUE (0x8000)</span>
<a name="l00322"></a><a class="code" href="group__platform__common.htm#ga8279c76138a23ad7854ab01611b502ca">00322</a> <span class="preprocessor"></span><span class="preprocessor">#define timeGTorEqualInt16u(t1, t2)           \</span>
<a name="l00323"></a>00323 <span class="preprocessor">  (elapsedTimeInt16u(t2, t1) &lt;= (HALF_MAX_INT16U_VALUE))</span>
<a name="l00324"></a>00324 <span class="preprocessor"></span>
<a name="l00329"></a><a class="code" href="group__platform__common.htm#ga7f25400a597f9329241df095431792a3">00329</a> <span class="preprocessor">#define MAX_INT32U_VALUE      (0xFFFFFFFFL)</span>
<a name="l00330"></a><a class="code" href="group__platform__common.htm#ga04554bf89f920a1cafa4b8d070c6bd1f">00330</a> <span class="preprocessor"></span><span class="preprocessor">#define HALF_MAX_INT32U_VALUE (0x80000000L)</span>
<a name="l00331"></a><a class="code" href="group__platform__common.htm#ga5abb1d7348e6239a7b3a3274d8e28196">00331</a> <span class="preprocessor"></span><span class="preprocessor">#define timeGTorEqualInt32u(t1, t2)           \</span>
<a name="l00332"></a>00332 <span class="preprocessor">  (elapsedTimeInt32u(t2, t1) &lt;= (HALF_MAX_INT32U_VALUE))</span>
<a name="l00333"></a>00333 <span class="preprocessor"></span>
<a name="l00335"></a>00335 
<a name="l00336"></a>00336 
<a name="l00337"></a>00337 
<a name="l00338"></a>00338 <span class="preprocessor">#endif //__PLATFORMCOMMON_H__</span>
<a name="l00339"></a>00339 <span class="preprocessor"></span>
</pre></div></div>
<hr size="1">

<table border="0" cellspacing="0" cellpadding="0" width=100%>

<tr>

<td><address><small>

EmberZNet API Reference: For the STM32F103RET Host platform. <br>

EmberZNet 4.5.0 - Document 120-3025-000-45xx.

</small></address>

</td>

<td align="right">

<address><small>

Copyright &copy; 2006-2010 by Ember Corporation. All rights reserved.<br>

Generated Fri Jun 24 15:12:52 2011 with <a href="http://www.doxygen.org/index.html">Doxygen</a> 1.6.1.

</small></address>

</td>

</tr>

</table>

</body>

</html>
