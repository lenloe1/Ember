<?xml version="1.0"?>
<configurator>
  <callback prefix="emberAf" postfix="Callback">
    <function id="READ_ATTRIBUTES_RESPONSE" name="Read Attributes Response" returnType="boolean">
      <description>
        This function is called by the application framework when a Read Attributes Response command is received from an external device.  The application should return TRUE if the message was processed or FALSE if it was not.
      </description>
      <arg name="clusterId" type="EmberAfClusterId" description="The cluster identifier of this response." />
      <arg name="buffer"    type="int8u *"          description="Buffer containing the list of read attribute status records." />
      <arg name="bufLen"    type="int16u"           description="The length in bytes of the list." />
      <codeForStub>
        return FALSE;
      </codeForStub>
    </function>
    <function id="WRITE_ATTRIBUTES_RESPONSE" name="Write Attributes Response" returnType="boolean">
      <description>
        This function is called by the application framework when a Write Attributes Response command is received from an external device.  The application should return TRUE if the message was processed or FALSE if it was not.
      </description>
      <arg name="clusterId" type="EmberAfClusterId" description="The cluster identifier of this response." />
      <arg name="buffer"    type="int8u *"          description="Buffer containing the list of write attribute status records." />
      <arg name="bufLen"    type="int16u"           description="The length in bytes of the list." />
      <codeForStub>
        return FALSE;
      </codeForStub>
    </function>
    <function id="CONFIGURE_REPORTING_RESPONSE" name="Configure Reporting Response" returnType="boolean">
      <description>
        This function is called by the application framework when a Configure Reporting Response command is received from an external device.  The application should return TRUE if the message was processed or FALSE if it was not.
      </description>
      <arg name="clusterId" type="EmberAfClusterId" description="The cluster identifier of this response." />
      <arg name="buffer"    type="int8u *"          description="Buffer containing the list of attribute status records." />
      <arg name="bufLen"    type="int16u"           description="The length in bytes of the list." />
      <codeForStub>
        return FALSE;
      </codeForStub>
    </function>
    <function id="READ_REPORTING_CONFIGURATION_RESPONSE" name="Read Reporting Configuration Response" returnType="boolean">
      <description>
        This function is called by the application framework when a Read Reporting Configuration Response command is received from an external device.  The application should return TRUE if the message was processed or FALSE if it was not.
      </description>
      <arg name="clusterId" type="EmberAfClusterId" description="The cluster identifier of this response." />
      <arg name="buffer"    type="int8u *"          description="Buffer containing the list of attribute reporting configuration records." />
      <arg name="bufLen"    type="int16u"           description="The length in bytes of the list." />
      <codeForStub>
        return FALSE;
      </codeForStub>
    </function>
    <function id="REPORT_ATTRIBUTES_RESPONSE" name="Report Attributes" returnType="boolean">
      <description>
        This function is called by the application framework when a Report Attributes command is received from an external device.  The application should return TRUE if the message was processed or FALSE if it was not.
      </description>
      <arg name="clusterId" type="EmberAfClusterId" description="The cluster identifier of this command." />
      <arg name="buffer"    type="int8u *"          description="Buffer containing the list of attribute report records." />
      <arg name="bufLen"    type="int16u"           description="The length in bytes of the list." />
      <codeForStub>
        return FALSE;
      </codeForStub>
    </function>
    <function id="DEFAULT_RESPONSE" name="Default Response" returnType="boolean">
      <description>
        This function is called by the application framework when a Default Response command is received from an external device.  The application should return TRUE if the message was processed or FALSE if it was not.
      </description>
      <arg name="clusterId" type="EmberAfClusterId" description="The cluster identifier of this response." />
      <arg name="commandId" type="int8u"            description="The command identifier to which this is a response." />
      <arg name="status"    type="EmberAfStatus"    description="Specifies either SUCCESS or the nature of the error that was detected in the received command." />
      <codeForStub>
        return FALSE;
      </codeForStub>
    </function>
    <function id="DISCOVER_ATTRIBUTES_RESPONSE" name="Discover Attributes Response" returnType="boolean">
      <description>
        This function is called by the application framework when a Discover Attributes Response command is received from an external device.  The Discover Attributes Response command contains a boolean indicating if discovery is complete and a list of zero or more attribute identifier/type records.  The application should return TRUE if the message was processed or FALSE if it was not.
      </description>
      <arg name="clusterId"         type="EmberAfClusterId" description="The cluster identifier of this response." />
      <arg name="discoveryComplete" type="boolean"          description="Indicates whether there are more attributes to be discovered.  TRUE if there are no more attributes to be discovered." />
      <arg name="buffer"            type="int8u *"          description="Buffer containing the list of attribute identifier/type records." />
      <arg name="bufLen"            type="int16u"           description="The length in bytes of the list." />
      <codeForStub>
        return FALSE;
      </codeForStub>
    </function>
    <function id="NET_WRITE" name="Allow Network Write Attribute" returnType="EmberAfAttributeWritePermission">
      <description>
        This function is called by the application framework before it writes an attribute in response to a write attribute request from an external device. The value passed into this callback is the value to which the attribute is to be set by the framework. The application framework expects one of three possible values 0=Do not allow write, 1=Allow write normal (attribute must be writeable), 2=Allow write for a read only attribute. 
      </description>
      <arg name="endpoint" type="int8u" />
      <arg name="clusterId" type="EmberAfClusterId" />
      <arg name="attributeId" type="EmberAfAttributeId" />
      <arg name="mask" type="int8u" />
      <arg name="manufacturerCode" type="int16u" />
      <arg name="value" type="int8u*" />
      <arg name="type" type="int8u" />
      <codeForStub>
        return EMBER_ZCL_ATTRIBUTE_WRITE_PERMISSION_ALLOW_WRITE_NORMAL; // Default
      </codeForStub>
    </function>
    <function id="PRE_ATTR_CH" name="Pre Attribute Change" returnType="void">
      <description>
        This function is called by the application framework before it changes an attribute value. The value passed into this callback is the value to which the attribute is to be set by the framework.
      </description>
      <arg name="endpoint" type="int8u" />
      <arg name="clusterId" type="EmberAfClusterId" />
      <arg name="attributeId" type="EmberAfAttributeId" />
      <arg name="mask" type="int8u" />
      <arg name="manufacturerCode" type="int16u" />
      <arg name="type" type="int8u" />
      <arg name="size" type="int8u" />
      <arg name="value" type="int8u*" />
      <codeForStub>
      </codeForStub>
    </function>
    <function id="POST_ATTR_CH" name="Post Attribute Change" returnType="void">
      <description>
        This function is called by the application framework after it changes an attribute value. The value passed into this callback is the value to which the attribute was set by the framework.
      </description>
      <arg name="endpoint" type="int8u" />
      <arg name="clusterId" type="EmberAfClusterId" />
      <arg name="attributeId" type="EmberAfAttributeId" />
      <arg name="mask" type="int8u" />
      <arg name="manufacturerCode" type="int16u" />
      <arg name="type" type="int8u" />
      <arg name="size" type="int8u" />
      <arg name="value" type="int8u*" />
      <codeForStub>
      </codeForStub>
    </function>
    <function id="PRE_MSG" name="Pre Message Received" returnType="boolean">
      <description>
        This function is called by the application framework when a raw message is received but has not yet been parsed by the application framework. This function should return a boolean value indicating whether the message has been handled by the user application code and should be ignored by the AppFramework. By default, this callback returns FALSE indicating that the message has not been handled and should be handled by the AppFramework. This function receives a pointer to a struct containing the super set of arguments sent to the emberIncomingMessageHandler and the ezspIncomingMessageHandler.
      </description>
      <arg name="incomingMessage" type="EmberAfIncomingMessage*" />
      <codeForStub>
        return FALSE;
      </codeForStub>
    </function>
    <function id="PRE_CMD"  name="Pre Command Received" returnType="boolean">
      <description>
        This function is called by the application framework when a command is received but has yet to be handled by the framework code. This function should return a boolean value indicating whether the command has been handled by the user application code and should be ignored by the AppFramework. By default, this callback returns FALSE indicating that the message has not been handled and should be handled by the
      </description>
      <arg name="cmd" type="EmberAfClusterCommand*" />
      <codeForStub>
        return FALSE;
      </codeForStub>
    </function>
    <function id="PRE_ZDO" name="Pre ZDO Message Received" returnType="boolean">
      <description>
        This function passes the application an incoming ZDO message and gives the appictation the opportunity to handle it. By default, this callback returns FALSE indicating that the incoming ZDO message has not been handled and should be handled by the Application Framework.
      </description>
      <arg name="emberNodeId" type="EmberNodeId" />
      <arg name="apsFrame" type="EmberApsFrame*" />
      <arg name="message" type="int8u*" />
      <arg name="length" type="int16u" />
      <codeForStub>
        return FALSE;
      </codeForStub>
    </function>
    <function id="MSG_SENT" name="Message Sent" returnType="boolean">
      <description>
        This function is called by the application framework from the message sent handler, when it is informed by the stack regarding the message sent status. All of the values passed to the emberMessageSentHandler are passed on to this callback. This provides an opportunity for the application to verify that its message has been sent successfully and take the appropriate action. This callback should return a boolean value of TRUE or FALSE. A value of TRUE indicates that the message sent notification has been handled and should not be handled by the application framework.
      </description>
      <arg name="type" type="EmberOutgoingMessageType" />
      <arg name="indexOrDestination" type="int16u" />
      <arg name="apsFrame" type="EmberApsFrame*" />
      <arg name="msgLen" type="int16u" />
      <arg name="message" type="int8u*" />
      <arg name="status" type="EmberStatus" />
      <codeForStub>
        return FALSE;
      </codeForStub>
    </function>
    <function id="STACK_STATUS" name="Stack Status" returnType="boolean">
      <description>
        This function is called by the application framework from the stack status handler.  This callbacks provides applications an opportunity to be notified of changes to the stack status and take appropriate action.  The application should return TRUE if the status has been handled and should not be handled by the application framework.
      </description>
      <arg name="status" type="EmberStatus" />
      <codeForStub>
        return FALSE;
      </codeForStub>
    </function>
    <function id="NCP_INIT" name="Ncp Init" returnType="void">
      <description>
        This callback is used for initializing the network coprocessor either at startup, or upon reset. It should be used to perform any kind of EZSP initialization, as it will be called every time when NCP is reset. In an SOC environment, this callbacks is not used.
      </description>
    </function>
    <function id="MAIN_INIT" name="Main Init" returnType="void">
      <description>
        This is the main application initialization callback. It is called prior to application initialization and gives the application a chance to take care of any of its own initialization procedures. 
      </description>
      <codeForStub>
      </codeForStub>
    </function>
    <function id="CLUSTER_INIT" name="Cluster Init" returnType="void">
      <description>
        This function is called when a specific cluster is initialized. It gives the application an opportunity to take care of cluster initialization procedures. It is called exactly once for each endpoint where cluster is present.
      </description>
      <arg name="endpoint" type="int8u" />
      <arg name="clusterId" type="EmberAfClusterId" />
      <codeForStub>
      </codeForStub>
    </function>
    <function id="PRE_SLEEP" name="Pre Go To Sleep" returnType="boolean">
      <description>
        Called directly before a device goes to sleep. This function is passed the number of milliseconds the device is attempting to go to sleep for. This function returns a boolean indicating if sleep should be canceled. A returned value of TRUE indicates that sleep should be canceled. A return value of FALSE (default) indicates that sleep my continue as expected.
      </description>
      <arg name="sleepDurationAttempt" type="int32u" />
      <codeForStub>
        return FALSE;
      </codeForStub>
    </function>
    <function id="POST_SLEEP" name="Post Wake Up" returnType="void">
      <description>
        Called directly after a device wakes up from sleep. This function is passed the number of milliseconds the device actually slept for.
      </description>
      <arg name="sleepDuration" type="int32u" />
      <codeForStub>
      </codeForStub>
    </function>
    <function id="MAIN_TICK" name="Main Tick" returnType="void">
      <description>
        Whenever main application tick is called, this callback will be called at the end of the main tick execution.
      </description>
      <codeForStub>
      </codeForStub>
    </function>
    <function id="EXT_ATT_WRITE" 
              name="External Attribute Write" 
              returnType="boolean"
              category="EXTERNAL_ATTRIBUTE">
      <description>
        This callback is called for whenever an attribute is written, if this attribute was tagged to be stored externally. Function should return true if write was successful and false if not. Upon successful exit, the data from the passed buffer should be stored as the current value of the attribute. Important to note is, that if this method ever returns false, then it is possible to break contract of the write-undivided-attributes global command. That command checks for ranges and attribute existence, but if this method returns false, when the attribute is finally written, then the contract of writing all or no attributes will be broken.
      </description>
      <arg name="endpoint" type="int8u" />
      <arg name="clusterId" type="EmberAfClusterId" />
      <arg name="attributeMetadata" type="EmberAfAttributeMetadata *"/>
      <arg name="manufacturerCode" type="int16u" />
      <arg name="buffer" type="int8u *"/>
      <codeForStub>
        return FALSE;
      </codeForStub>
    </function>
    <function id="EXT_ATT_READ"
              name="External Attribute Read" 
              returnType="boolean"
              category="EXTERNAL_ATTRIBUTE">
      <description>
        If an attribute is tagged to be stored externally, this function will be called whenever that attribute is read. This function should return TRUE if read was successful and FALSE if not. The passed buffer should be populated with the associated attributes value.
      </description>
      <arg name="endpoint" type="int8u" />
      <arg name="clusterId" type="EmberAfClusterId" />
      <arg name="attributeMetadata" type="EmberAfAttributeMetadata *"/>
      <arg name="manufacturerCode" type="int16u" />
      <arg name="buffer" type="int8u *"/>
      <codeForStub>
        return FALSE;
      </codeForStub>
    </function>
    <function id="REPORT_ENTRY_CONFIGURED" name="Report Entry Configured" returnType="EmberAfStatus">
      <description>
        This callback is called whenever a reporting entry is configured, including when entries are deleted or updated.  The application can use this callback for scheduling readings or measurements based on the minimum and maximum reporting interval for the entry.  The application should return EMBER_ZCL_STATUS_SUCCESS if it can support the configuration or an error status otherwise.  Note: attribute reporting is required for many clusters and attributes, so rejecting a reporting configuration may violate ZigBee specifications.
      </description>
      <arg name="entry" type="EmberAfReportEntry *" />
      <codeForStub>
        return EMBER_ZCL_STATUS_SUCCESS;
      </codeForStub>
    </function>
    <function id="TRUST_CENTER_JOIN"
              name="Trust Center Join" 
              returnType="void">
      <description>
        This callback is called from within the application framework's implementation of emberTrustCenterJoinHandler or ezspTrustCenterJoinHandler. This callback provides the same arguments passed to the TrustCenterJoinHandler. For more information about the TrustCenterJoinHandler please see documentation included in stack/include/trust-center.h.
      </description>
      <arg name="newNodeId" type="EmberNodeId" />
      <arg name="newNodeEui64" type="EmberEUI64" />
      <arg name="parentOfNewNode" type="EmberNodeId"/>
      <arg name="status" type="EmberDeviceUpdate"/>
      <arg name="decision" type="EmberJoinDecision"/>
      <codeForStub>
      </codeForStub>
    </function>
    <function id="GET_CURRENT_TIME"
              name="Get Current Time" 
              returnType="int32u">
      <description>
        This callback is called when device attempts to get current time from the hardware. If this device has means to retrieve exact time, then this method should implement it. If the callback can't provide the exact time it should return 0 to indicate failure. Default action is to return 0, which indicates that device does not have access to real time.
      </description>
      <codeForStub>
        return 0;
      </codeForStub>
    </function>
    <function id="SET_TIME"
              name="Set Time" 
              returnType="void">
      <description>
        This callback should be implemented, if the device has access to real time clock, and has an ability to update that clock. The application framework expects to be passed the utcTime which is the number of seconds since the year 2000. Default implementation does nothing. Note: This function used to take time in year, month, day, hour, min, sec. We have changed this to utcTime in order to conserve code space.
      </description>
        <arg name="utcTime" type="int32u" />
      <codeForStub>
      </codeForStub>
    </function>
    <function id="TEMP_VOLTS_TO_CELSIUS" name="Convert Volts To Celsius" returnType="int32s" cluster="Temperature Measurement" side="server">
      <description> 
        Function that converts volts on the ADC line into celsius.
      </description>
      <arg name="voltage" type="int16u" description="Voltage from ADC"/>
      <codeForStub>
        // LM20 temp sensor implementation
        return 1591887L - (171 * (int32s)voltage);
      </codeForStub>
    </function>
    <function id="INITIATE_KEY_ESTABLISHMENT" name="Initiate Key Establishment" returnType="EmberStatus">
      <description>
        This function is called by the framework to initiate key establishment with a remote device.  The application should return EMBER_SUCCESS if key establishment was initiated successfully.  The application should call ::emberAfKeyEstablishmentCallback as events occur.
      </description>
      <arg name="nodeId"   type="EmberNodeId" description="The node id of the remote device." />
      <arg name="endpoint" type="int8u"       description="The endpoint on the remote device." />
      <codeForStub>
        return EMBER_LIBRARY_NOT_PRESENT;
      </codeForStub>
    </function>
    <function id="INITIATE_INTER_PAN_KEY_ESTABLISHMENT" name="Initiate Inter Pan Key Establishment" returnType="EmberStatus">
      <description>
        This function is called by the framework to initiate key establishment with a remote device on a different PAN.  The application should return EMBER_SUCCESS if key establishment was initiated successfully.  The application should call ::emberAfInterPanKeyEstablishmentCallback as events occur.
      </description>
      <arg name="panId" type="EmberPanId"       description="The PAN id of the remote device." />
      <arg name="eui64" type="const EmberEUI64" description="The EUI64 of the remote device." />
      <codeForStub>
        return EMBER_LIBRARY_NOT_PRESENT;
      </codeForStub>
    </function>
    <function id="KEY_ESTABLISHMENT" name="Key Establishment" returnType="boolean">
      <description>
        A callback by the key-establishment code to indicate an event has occurred.  For error codes this is purely a notification.  For non-error status codes (besides LINK_KEY_ESTABLISHED), it is the application's chance to allow or disallow the operation.  If the application returns TRUE then the key establishment is allowed to proceed.  If it returns FALSE, then key establishment is aborted.  LINK_KEY_ESTABLISHED is a notification of success.
      </description>
      <arg name="status"         type="EmberAfKeyEstablishmentNotifyMessage" />
      <arg name="amInitiator"    type="boolean"                              />
      <arg name="partnerShortId" type="EmberNodeId"                          />
      <arg name="delayInSeconds" type="int8u"                                />
      <codeForStub>
        return TRUE;
      </codeForStub>
    </function>
    <function id="INTER_PAN_KEY_ESTABLISHMENT" name="Inter Pan Key Establishment" returnType="boolean">
      <description>
        A callback by the key-establishment code to indicate an event has occurred.  For error codes this is purely a notification.  For non-error status codes (besides LINK_KEY_ESTABLISHED), it is the application's chance to allow or disallow the operation.  If the application returns TRUE then the key establishment is allowed to proceed.  If it returns FALSE, then key establishment is aborted.  LINK_KEY_ESTABLISHED is a notification of success.
      </description>
      <arg name="status"         type="EmberAfKeyEstablishmentNotifyMessage" />
      <arg name="amInitiator"    type="boolean"                              />
      <arg name="panId"          type="EmberPanId"                           />
      <arg name="eui64"          type="const EmberEUI64"                     />
      <arg name="delayInSeconds" type="int8u"                                />
      <codeForStub>
        return TRUE;
      </codeForStub>
    </function>
    <function id="PERFORMING_KEY_ESTABLISHMENT" name="Performing Key Establishment" returnType="boolean">
      <description>
        This function is called by the framework to determine if the device is performing key establishment.  The application should return TRUE if key establishment is in progress.
      </description>
      <codeForStub>
        return FALSE;
      </codeForStub>
    </function>
    <function id="INITIATE_PARTNER_LINK_KEY_EXCHANGE" name="Initiate Partner Link Key Exchange" returnType="EmberStatus">
      <description>
        This function is called by the framework to initiate a partner link key exchange with a remote device.  The application should return EMBER_SUCCESS if the partner link key exchange was initiated successfully.  When the partner link key exchange completes, the application should call the given callback.
      </description>
      <arg name="target"   type="EmberNodeId"                             description="The node id of the remote device." />
      <arg name="endpoint" type="int8u"                                   description="The key establishment endpoint of the remote device." />
      <arg name="callback" type="EmberAfPartnerLinkKeyExchangeCallback *" description="The callback that should be called when the partner link key exchange completse." />
      <codeForStub>
        return EMBER_LIBRARY_NOT_PRESENT;
      </codeForStub>
    </function>
    <function id="PARTNER_LINK_KEY_EXCHANGE_REQUEST" name="Partner Link Key Exchange Request" returnType="EmberStatus">
      <description>
        This function is called by the framework on SOC platforms when a remote node requests a partner link key exchange.  The application should return EMBER_SUCCESS to accept the request or any other status to reject it.  On network coprocessor platforms, this function will not be called because the NCP handles partner link key exchange requests based on the binding policy.
      </description>
      <arg name="partner" type="EmberEUI64" description="The EUI of the remote node." />
      <codeForStub>
        return EMBER_LIBRARY_NOT_PRESENT;
      </codeForStub>
    </function>
    <function id="PARTNER_LINK_KEY_EXCHANGE_RESPONSE" name="Partner Link Key Exchange Response" returnType="void">
      <description>
        This function is called by the framework when a remote node requests a partner link key exchange.  The application should return TRUE to accept the request or FALSE to reject it.  On network coprocessor platforms, this function will not be called because the NCP handles partner link key exchange requests based on the binding policy.
      </description>
      <arg name="sender" type="EmberNodeId"    description="The EUI of the remote node." />
      <arg name="status" type="EmberZdoStatus" description="The ZDO response status." />
      <codeForStub />
    </function>
    <function id="REGISTRATION_START" name="Registration Start" returnType="EmberStatus">
      <description>
        This callback is called when the device joins a network and the registration process should begin.  The application should return EMBER_SUCCESS if the registration process started successfully.  When registration is complete, the application should call emberAfRegistrationCallback with an indication of success or failure.
      </description>
      <codeForStub>
        return EMBER_LIBRARY_NOT_PRESENT;
      </codeForStub>
    </function>
    <function id="REGISTRATION_ABORT" name="Registration Abort" returnType="void">
      <description>
        This callback is called when the device should abort the registration process.  
      </description>
    </function>
    <function id="REGISTRATION" name="Registration" returnType="void">
      <description>
        This callback is called when the device joins a network and the process of registration is complete. This callback provides a success value of TRUE if the registration process was successful and a value of FALSE if registration failed.
      </description>
      <arg name="success" type="boolean" description="TRUE if registration succeeded, FALSE otherwise."/>
    </function>
    <function id="TRUST_CENTER_KEEPALIVE_UPDATE" name="Trust Center Keepalive Update" returnType="void">
      <description>
        This callback is called when the device finishes registration (successfully or otherwise) and the trust center keepalive process must be updated.  If the keepalive process has not been started, then it is started.  Otherwise if the keepalive is in the process of searching for the TC, it will process the result of that Trust Center search operation.
      </description>
      <arg name="registrationComplete" type="boolean" />
    </function>
    <function id="TRUST_CENTER_KEEPALIVE_ABORT" name="Trust Center Keepalive Abort" returnType="void">
      <description>
        This callback is called when the device should abort the trust center keepalive process.  
      </description>
    </function>
    <function id="CUSTOM_CLI_COMMAND" name="Custom Command Line" returnType="void">
      <description>
        If you enable this callback, then it will be called when 'custom' CLI command is executed. It is responsible for reading it's own arguments.
      </description>
    </function>
    <function id="OTA_SERVER_INCOMING_MESSAGE_RAW" name="Ota Server Incoming Message Raw" returnType="boolean">
    <description>
      This callback is for processing incoming messages for the Over-the-air bootload cluster server.  ZCL will not process the message and instead hand the raw over the air data to the callback for its own processing.
    </description>
    <arg name="message" type="EmberAfClusterCommand *" description="A pointer to the structure containing the message buffer and other information about it."/>
      <codeForStub>
        return FALSE;
      </codeForStub>
    </function>
    <function id="OTA_SERVER_SEND_IMAGE_NOTIFY" name="Ota Server Send Image Notify" returnType="boolean">
      <description>
        This callback is an indication to the OTA server that it should send out notification about an OTA file that is available for download.
      </description>
      <arg name="dest" type="EmberNodeId" description="The destination of the image notify message.  May be a broadcast address."/>
      <arg name="endpoint" type="int8u" description="The destination endpoint of the image notify message.  May be a broadcast endpoint."/>
      <arg name="payloadType" type="int8u" description="The type of data the image notify message will contain.  0 = no data.  1 = Manufacturer ID.  2 = Manufacturer ID and the image type ID.  3 = Manufacturer ID, image type ID, and firmware version."/>
      <arg name="queryJitter" type="int8u" description="The percentage of nodes that should respond to this message, from 1-100.  On receipt of this message, each recipient will randomly choose a percentage and only query the server if their percentage is below this value."/>
      <arg name="id" type="const EmberAfOtaImageId*" description="The image information that will be put in the message.  The data within this struct that will be appended to the message is determined by the previous 'payloadType' argument."/>
      <codeForStub>
        return FALSE;
      </codeForStub>
    </function>
<!-- NOTE:  This should be turned into a plugin callback instead of a generic callback.  But for now it is here (RBA).-->
    <function id="OTA_STORAGE_DRIVER_INIT" name="Ota Storage Driver Init" returnType="boolean">
      <description>
        The initialization code for the OTA storage driver.
      </description>
      <codeForStub>
// The storage driver and the rest of the OTA bootload code will not function correctly unless it is implemnted.
  // Please implement me.
  assert(FALSE);
  return FALSE;
      </codeForStub>
    </function>
<!-- NOTE:  This should be turned into a plugin callback instead of a generic callback.  But for now it is here (RBA).-->
    <function id="OTA_STORAGE_DRIVER_READ" name="Ota Storage Driver Read" returnType="boolean">
      <description>
        This callback defines the low-level means by which a device reads from the OTA storage device.
      </description>
      <arg name="offset" type="int32u" description="The address offset from the start of the storage device where data is to be read."/>
      <arg name="length" type="int32u" descritpion="The length of the data to be read from the storage device."/>
      <arg name="returnData" type="int8u*" description="A pointer where the data read from the device should be written to."/>
      <codeForStub>
// The storage driver and the rest of the OTA bootload code will not function correctly unless it is implemnted.
  // Please implement me.
  assert(FALSE);
  return FALSE;
      </codeForStub>
    </function>
<!-- NOTE:  This should be turned into a plugin callback instead of a generic callback.  But for now it is here (RBA).-->
    <function id="OTA_STORAGE_DRIVER_WRITE" name="Ota Storage Driver Write" returnType="boolean">
      <description>
        This callback defines the low-level means by which a device reads from the OTA storage device.
      </description>
      <arg name="dataToWrite" type="const int8u*" description="A pointer to the data that will be written to the storage device."/>
      <arg name="offset" type="int32u" description="The address offset from the start of the storage device where data will be written."/>
      <arg name="length" type="int32u" description="The length of the data to be written to the storage device."/>
      <codeForStub>
// The storage driver and the rest of the OTA bootload code will not function correctly unless it is implemnted.
  // Please implement me.
  assert(FALSE);
  return FALSE;
      </codeForStub>
    </function>
<!-- NOTE:  This should be turned into a plugin callback instead of a generic callback.  But for now it is here (RBA).-->
    <function id="OTA_BOOTLOAD" name="Ota Bootload" returnType="int8u">
      <description>
        The platform specific routine to bootload the device from a ZigBee over-the-air upgrade file.
      </description>
      <arg name="id" type="const EmberAfOtaImageId*" description="A pointer to the structure that contains the information about what OTA image to bootload."/>
      <arg name="ncpUpgradeTagId" type="int16u" description="The tag ID of the upgrade data that will be used to bootload the device."/>
      <codeForStub>
// Please implement me
  emberAfCorePrintln("Not supported.");
  return 1;
      </codeForStub>
    </function>
<!-- NOTE:  This should be turned into a plugin callback instead of a generic callback.  But for now it is here (RBA).-->
    <function id="OTA_STORAGE_INIT" name="Ota Storage Init" returnType="EmberAfOtaStorageStatus">
      <description>
        This callback initializes the ZigBee Over-the-air storage module.
      </description>
      <codeForStub>
  return EMBER_AF_OTA_STORAGE_SUCCESS;
      </codeForStub>
    </function>
<!-- NOTE:  This should be turned into a plugin callback instead of a generic callback.  But for now it is here (RBA).-->
    <function id="OTA_STORAGE_CLOSE" name="Ota Storage Close" returnType="void">
      <description>
        This callback shuts down the ZigBee Over-the-air storage module.
      </description>
    <codeForStub>
// Please implement me.
  assert(FALSE);
    </codeForStub>
    </function>
<!-- NOTE:  This should be turned into a plugin callback instead of a generic callback.  But for now it is here (RBA).-->
    <function id="OTA_STORAGE_GET_COUNT" name="Ota Storage Get Count" returnType="int8u">
      <description>
        This callback returns the total number of ZigBee Over-the-air upgrade images stored in the storage module.
      </description>
      <codeForStub>
return 0;
      </codeForStub>
    </function>
<!-- NOTE:  This should be turned into a plugin callback instead of a generic callback.  But for now it is here (RBA).-->
    <function id="OTA_STORAGE_SEARCH" name="Ota Storage Search" returnType="EmberAfOtaImageId">
      <description>
      This callback searches through the list of all images for one that matches the passed parameters.  On success an image identifier is returned with a matching image.  On failure emberAfInvalidImageId is returned.
      </description>
      <arg name="manufacturerId" type="int16u" description="The ZigBee assigned identifier of the manufacturer contained in the OTA image being searched for."/>
      <arg name="imageTypeId"    type="int16u" description="The image type identifier contained in the OTA image being searched for."/>
      <arg name="hardwareVersion" type="const int16u*" description="This is a pointer to the hardware version that will be used in the search.  If the pointer is NULL, hardware version will not be considered when searching for matching images.  If it points to a value, the search will only consider images where that value falls between the minimum and maxmimum hardware version specified in the OTA file.  If no hardware version is present in an OTA file but the other parameters match, the file will be considered a match"/>
      <codeForStub>
// If no image is found that matches the search criteria, this function should return the invalid image id.
  return emberAfInvalidImageId;
      </codeForStub>
    </function>
<!-- NOTE:  This should be turned into a plugin callback instead of a generic callback.  But for now it is here (RBA).-->
    <function id="OTA_STORAGE_GET_TOTAL_IMAGE_SIZE" name="Ota Storage Get Total Image Size" returnType="int32u">
      <description>
        This function returns the total size of the ZigBee Over-the-air file with the passed parameters.  If no file is found with those parameters, 0 is returned.
      </description>
      <arg name="id" type="const EmberAfOtaImageId*" description="A pointer to the image identifier for the OTA file to retrieve information for."/>
    <codeForStub>
// On failure this should return an image size of zero.
  return 0;
    </codeForStub>
    </function>
<!-- NOTE:  This should be turned into a plugin callback instead of a generic callback.  But for now it is here (RBA).-->
    <function id="OTA_STORAGE_ITERATOR_FIRST" name="Ota Storage Iterator First" returnType="EmberAfOtaImageId">
      <description>
        This callback lets you walk through the list of all OTA files by jumping to the first file in the list maintained by the storage module.  If there is no file then emberAfOtaInvalidImageId is returned.
      </description>
    <codeForStub>
// It is expected that the storage module maintain its own internal iterator that the 'first' and 'next' functions will manipulate.

  // If there are no images at all, this function should return the invalid image id.
  return emberAfInvalidImageId;
    </codeForStub>
    </function>
<!-- NOTE:  This should be turned into a plugin callback instead of a generic callback.  But for now it is here (RBA).-->
    <function id="OTA_STORAGE_ITERATOR_NEXT" name="Ota Storage Iterator Next" returnType="EmberAfOtaImageId">
      <description>
        This callback lets you walk through the list of all OTA files by jumping to the next file in the list maintained by the storage module.  If there is no next file then emberAfOtaInvalidImageId is returned.
      </description>
    <codeForStub>
// It is expected that the storage module maintain its own internal iterator that the 'first' and 'next' functions will manipulate.

  // If there are no more images, this function should return the invalid image id.
  return emberAfInvalidImageId;
    </codeForStub>
    </function>
<!-- NOTE:  This should be turned into a plugin callback instead of a generic callback.  But for now it is here (RBA).-->
    <function id="OTA_STORAGE_GET_FULL_HEADER" name="Ota Storage Get Full Header" returnType="EmberAfOtaStorageStatus">
      <description>
        This callback populates the EmberAfOtaHeader structure pointed to by the returnData with data about the OTA file stored in the storage module.
      </description>
      <arg name="id" type="const EmberAfOtaImageId*" description="This is a pointer to the image id for the OTA file to retrieve information about."/>
      <arg name="returnData" type="EmberAfOtaHeader*" description="This is a pointer to the location of the structure that will be populated with data."/>
    <codeForStub>
// If the requested image cannot be found, then an error shouldb e returned.
  return EMBER_AF_OTA_STORAGE_ERROR;
    </codeForStub>
    </function>
<!-- NOTE:  This should be turned into a plugin callback instead of a generic callback.  But for now it is here (RBA).-->
    <function id="OTA_STORAGE_READ_IMAGE_DATA" name="Ota Storage Read Image Data" returnType="EmberAfOtaStorageStatus">
      <description>
        This callback reads data from the specified OTA file and returns that data to the caller.
      </description>
      <arg name="id" type="const EmberAfOtaImageId*" description="This is a pointer to the image id for the OTA file to retrieve data from."/>
      <arg name="offset" type="int32u" description="This is the offset relative to the start of the image where the data should be read from."/>
      <arg name="length" type="int32u" description="This is the length of data that will be read."/>
      <arg name="returnData" type="int8u*" description="This is a pointer to where the data read out of the file will be written to"/>
      <arg name="returnedLength" type="int32u*" description="This is a pointer to a variable where the actual length of data read will be written to.  A short read may occur if the end of file was reached."/>
    <codeForStub>
// If the requested image cannot be found, then an error should be returned.
  return EMBER_AF_OTA_STORAGE_ERROR;
    </codeForStub>
    </function>
<!-- NOTE:  This should be turned into a plugin callback instead of a generic callback.  But for now it is here (RBA).-->
    <function id="OTA_STORAGE_CLEAR_TEMP_DATA" name="Ota Storage Clear Temp Data" returnType="EmberAfOtaStorageStatus">
      <description>
        This function clears any existing temp data that was downloaed.  It is used immediately prior to downloading a raw image over the air.
      </description>
    <codeForStub>
// If the image data cannot be stored, an error should be returned.
  return EMBER_AF_OTA_STORAGE_ERROR;
    </codeForStub>
    </function>
<!-- NOTE:  This should be turned into a plugin callback instead of a generic callback.  But for now it is here (RBA).-->
    <function id="OTA_STORAGE_WRITE_TEMP_DATA" name="Ota Storage Write Temp Data" returnType="EmberAfOtaStorageStatus">
      <description>
        This function writes to the temporary data in the storage device at the specified offset.  It is used when downloading a raw image over the air.
      </description>
      <arg name="offset" type="int32u" description="The location within the download image file where to write the data."/>
      <arg name="length" type="int32u" description="The length of data to write."/>
      <arg name="data" type="const int8u*" description="A pointer to the temporary data that will be written to the storage device."/>
    <codeForStub>
// If the image data cannot be stored, an error should be returned.
  return EMBER_AF_OTA_STORAGE_ERROR;
    </codeForStub>
    </function>
<!-- NOTE:  This should be turned into a plugin callback instead of a generic callback.  But for now it is here (RBA).-->
    <function id="OTA_STORAGE_CHECK_TEMP_DATA" name="Ota Storage Check Temp Data" returnType="EmberAfOtaStorageStatus">
      <description>
        This callback will validate temporary data in the storage device to determine whether it is a complete file, a partially downloaded file, or there is no file present.  When a complete or partial file is found it will return EMBER_AF_OTA_STORAGE_SUCCESS or EMBER_AF_OTA_STORAGE_PARTIAL_FILE_FOUND, respectively.  In that case, the currentOffset, totalImageSize, and newFileInfo will be populated with data.  When EMBER_AF_OTA_STORAGE_ERROR is returned, no temporary data is present.
      </description>
      <arg name="currentOffset" type="int32u*" description="A pointer to a value that will be written with the offset within the total file size that has been successfully stored in the storage device.  This will indicate how much data has been currently dowloaded."/>
      <arg name="totalImageSize" type="int32u*" description="A pointer to a value that will be written with the total image size of the OTA file when a download has completed.  This does not indicate how much data has actually been downloaded currently."/>
      <arg name="newFileInfo" type="EmberAfOtaImageId*" description="This is the image id of the temporary file data stored in the storage device."/>
      <codeForStub>
// If the image data cannot be successfully verified, an error should be returned.
  return EMBER_AF_OTA_STORAGE_ERROR;
      </codeForStub>
    </function>
<!-- NOTE:  This should be turned into a plugin callback instead of a generic callback.  But for now it is here (RBA).-->
    <function id="OTA_STORAGE_FINISH_DOWNLOAD" name="Ota Storage Finish Download" returnType="EmberAfOtaStorageStatus">
      <description>
        This function indicates to the storage module that the download has finished.
      </description>
      <arg name="offset" type="int32u" description="The final offset of the downloaded file (i.e. the total size)"/>
      <codeForStub>
  return EMBER_AF_OTA_STORAGE_SUCCESS;
      </codeForStub>      
    </function>
    <function id="OTA_CLIENT_INCOMING_MESSAGE_RAW" name="Ota Client Incoming Message Raw" returnType="boolean">
    <description>
      This callback is for processing incoming messages for the Over-the-air bootload cluster client.  ZCL will not process the message and instead hand the raw over the air data to the callback for its own processing.
    </description>
    <arg name="message" type="EmberAfClusterCommand *" description="A pointer to the structure containing the message buffer and other information about it."/>
      <codeForStub>
        return FALSE;
      </codeForStub>
    </function>
    <function id="OTA_CLIENT_START" name="Ota Client Start" returnType="void">
      <description>
        This callback should be called when the profile specific registration has completed successfully.  It will start the client's state machine that will find the OTA server, query it for the next image, download the image, wait for the bootload message, and kick off the bootload.
      </description>
    </function>
<!-- NOTE:  This should be turned into a plugin callback instead of a generic callback.  But for now it is here (RBA).-->
    <function id="OTA_CLIENT_VERSION_INFO" name="Ota Client Version Info" returnType="void">
      <description>
        This function is called by the OTA client when a new query will occur to the server asking what the next version of firmware is.  The client can inform the cluster software as to what information to use in the query (and subsequent download). 
      </description>
      <arg name="currentImageInfo" type="EmberAfOtaImageId*" description="This is the information to use in the next query by the client cluster code.  It contains the manufacturer ID, image type ID, and the firmware version to be specified in the query message sent to the server."/>
      <arg name="hardwareVersion" type="int16u*" description="This is a pointer to the hardware version to use in the query.  If no hardware version should be used, then EMBER_AF_INVALID_HARDWARE_VERSION should be used."/>
      <codeForStub>
// Customer will fill in the image info with their manufacturer ID,
  // image type ID, and current software version number.
  // The deviceSpecificFileEui64 can be ignored.

  // It may be necessary to dynamically determine this by talking to
  // another device, as is the case with a host talking to an NCP device.

  // However, this routine will be called repeatedly so it may be wise
  // to cache the data!

/* This is commented out since the #defines below are not defined.

  if (currentImageInfo != NULL) {
    MEMSET(currentImageInfo, 0, sizeof(EmberAfOtaImageId));
    currentImageInfo->manufacturerId  = EMBER_AF_MANUFACTURER_CODE;
    currentImageInfo->imageTypeId     = EMBER_AF_IMAGE_TYPE_ID;
    currentImageInfo->firmwareVersion = EMBER_AF_CUSTOM_FIRMWARE_VERSION;
  }

  if (hardwareVersion != NULL) {
    *hardwareVersion = EMBER_AF_INVALID_HARDWARE_VERSION;
  }

  assert(FALSE);
*/
  </codeForStub>
    </function>
<!-- NOTE:  This should be turned into a plugin callback instead of a generic callback.  But for now it is here (RBA).-->
    <function id="OTA_CLIENT_CUSTOM_VERIFY_CALLBACK" name="Ota Client Custom Verify" returnType="EmberAfImageVerifyStatus">
      <description>
        This callback is executed by the OTA client after the signature verification has successfully completed.  It allows the device to do its own custom verification of the image (such as verifying that the EBL is intact).
      </description>
    <arg name="newVerification" type="boolean" description="This indicates if a new verification should be started."/>
    <arg name="id" type="const EmberAfOtaImageId*" description="This is ID of the image to be verified."/>
    <codeForStub>
// Manufacturing specific checks can be made to the image in this function to
  // determine if it is valid.  This function is called AFTER cryptographic 
  // checks have passed.  If the cryptographic checks failed, this function will
  // never be called.
  
  // The function shall return one of the following based on its own 
  // verification process.
  // 1) EMBER_AF_IMAGE_GOOD - the image has passed all checks
  // 2) EMBER_AF_IMAGE_BAD  - the image is not valid 
  // 3) EMBER_AF_IMAGE_VERIFY_IN_PROGRESS - the image is valid so far, but more
  //      checks are needed.  This callback shall be re-executed later to 
  //      continue verification.  This allows other code in the framework to run.
  return EMBER_AF_IMAGE_GOOD;
    </codeForStub>
    </function>
<!-- NOTE:  This should be turned into a plugin callback instead of a generic callback.  But for now it is here (RBA).-->
    <function id="OTA_CLIENT_DOWNLOAD_COMPLETE" name="Ota Client Download Complete" returnType="boolean">
      <description>
        This callback indicates that the OTA client has completed the download of a file.  If the file has been completely downloaded and cryptographic checks have been turned on, then those will be performed prior to this callback and that outcome included in the 'success' result.  On failure, this callback is merely informative, and the return type is ignored.  On succesful download, this callback allows the client to perform any additional verification of the downloaded image and return that result to the OTA server.
      </description>
      <arg name="success" type="boolean" description="This indicates the success or failure of the download and cryptographic verification process (if applicable)."/>
      <arg name="id" type="const EmberAfOtaImageId*" description="This is the image identifier information that corresponds to the download result."/>
       <codeForStub>
// At this point the image has been completely downloaded and cryptographic 
  // checks (if applicable) have been performed.

  if (!success) {
    emberAfOtaBootloadClusterPrintln("Download failed.");
    return TRUE;   // return value is ignored
  }
  
  // This is for any additional validation that needs to be performed
  // on the image by the application.
  
  // The results of checks here will be returned back to the OTA server
  // in the Upgrade End request.
  return TRUE;
       </codeForStub>
    </function>
<!-- NOTE:  This should be turned into a plugin callback instead of a generic callback.  But for now it is here (RBA).-->
    <function id="OTA_CLIENT_BOOTLOAD" name="Ota Client Bootload" returnType="void">
     <description>
        This callback is fired when the OTA Client recevies a command to bootload the newly downloaded OTA image.  This callback will perform the platform specific to bootload their device.
      </description>
      <arg name="id" type="const EmberAfOtaImageId*" description="This is the identifier relating to the image that has been downloaded and is ready for bootload."/>
      <codeForStub>
// Any final preperation prior to the bootload should be done here.
  // It is assumed that the device will reset in most all cases.
  // Please implement me.
      </codeForStub>
    </function>
<!-- NOTE:  This should be turned into a plugin callback instead of a generic callback.  But for now it is here (RBA).-->
    <function id="OTA_SERVER_QUERY" name="Ota Server Query" returnType="int8u">
      <description>
        This callback is fired when the OTA server receives a query request by the client.  The callback lets the server application indicate to the client what the 'next' version of software is for the device, or if there is not one available.
      </description>
      <arg name="currentImageId" type="const EmberAfOtaImageId*" description="This is the current software image that the client hase."/>
      <arg name="hardwareVersion" type="int16u*" description="If this value is non-NULL, it indicates the hardware version of the client device.  If NULL, the client did not specify a hardware version."/>
      <arg name="nextUpgradeImageId" type="EmberAfOtaImageId*" description="This is a pointer to a data structure containing the 'next' software version for the client to download."/>
      <codeForStub>
// If a new software image is available, this function should return EMBER_ZCL_STATUS_SUCCESS
  // and populate the 'nextUpgradeImageId' structure with the appropriate values.
  // If no new software image is available (i.e. the client should not download a firmware image)
  // then the server should return EMBER_ZCL_STATUS_NO_IMAGE_AVAILABLE.
  return EMBER_ZCL_STATUS_NO_IMAGE_AVAILABLE;
      </codeForStub>
    </function>
<!-- NOTE:  This should be turned into a plugin callback instead of a generic callback.  But for now it is here (RBA).-->
    <function id="OTA_SERVER_BLOCK_SIZE" name="Ota Server Block Size" returnType="int8u">
      <description>
        This function provides a way for the server to adjust the block size of its response to an Image block request by a client.
      </description>
      <arg name="clientNodeId" type="EmberNodeId" description="The node Id of OTA client making an image block request."/>
      <codeForStub>
// This function provides a way for the server to potentially
  // adjust the block size based on the client who is requesting.
  // In other words if we are using source routing we will limit
  // data returned by enough to put a source route into the message.

  // Image Block Response Message Format
  // Status Code: 1-byte
  // Manuf Code:  2-bytes
  // Image Type:  2-bytes
  // File Ver:    4-bytes
  // File Offset: 4-bytes
  // Data Size:   1-byte
  // Data:        variable
  const int8u IMAGE_BLOCK_RESPONSE_OVERHEAD = (EMBER_AF_ZCL_OVERHEAD + 14);

  EmberApsFrame apsFrame;
  int8u maxSize;
  apsFrame.options = EMBER_APS_OPTION_NONE;

#if defined(SE_SECURITY_PROFILE_ENABLED)
  apsFrame.options |= EMBER_APS_OPTION_ENCRYPTION;
#endif

  maxSize = emberAfMaximumApsPayloadLength(EMBER_OUTGOING_DIRECT,
                                           clientNodeId,
                                           &amp;apsFrame);
  maxSize -= IMAGE_BLOCK_RESPONSE_OVERHEAD;
  return maxSize;
      </codeForStub>
    </function>
<!-- NOTE:  This should be turned into a plugin callback instead of a generic callback.  But for now it is here (RBA).-->
    <function id="OTA_SERVER_IMAGE_BLOCK_REQUEST" name="Ota Server Image Block Request" returnType="int8u">
      <description>
        This function is called when the server application receives an image block request by a client.
      </description>
      <arg name="id" type="const EmberAfOtaImageId*" description="This structure contains the image Id that the client is requesting a block from."/>
      <arg name="offset" type="int32u" description="This is the offset within the OTA file that the client is requesting."/>
      <arg name="maxDataSize" type="int8u" description="This is the maximum size that the client has requested for the data block sent in the response."/>
      <arg name="waitTimeMinutes" type="int32u*" description="If the function returns EMBER_ZCL_STATUS_WAIT_FOR_DATA, then this is a pointer to the delay time in minutes that will be sent back to the client."/>
      <codeForStub>
// This function should return one of the following:
  //   EMBER_ZCL_STATUS_SUCCESS - This indicates that the OTA server code should
  //     respond to the image block request normally.
  //   EMBER_ZCL_STATUS_ABORT - This indicates to the OTA server that it should
  //     tell the client to abort the download and make no more image block requests.
  //   EMBER_ZCL_STATUS_WAIT_FOR_DATA - This indicates to the OTA server to tell
  //     the client it should delay before asking for that data block again.
  //     The 'waitTimeInMinutes' value should be filled in with the delay value.
  return EMBER_ZCL_STATUS_SUCCESS;
      </codeForStub>
    </function>
<!-- NOTE:  This should be turned into a plugin callback instead of a generic callback.  But for now it is here (RBA).-->
    <function id="OTA_SERVER_UPGRADE_END_REQUEST" name="Ota Server Upgrade End Request" returnType="boolean">
      <description>
        This function is called when the OTA server receives a request an upgrade end request.  If the request indicated a successful download by the client, the server must tell the client when and if to upgrade to the downloaded image.  
      </description>
      <arg name="source" type="EmberNodeId" description="The node ID of the device that sent the upgrade end request."/>
      <arg name="status" type="int8u" description="This is the ZCL status sent by the client indicating the result of its attempt to download the new upgrade image.  If the status is not EMBER_ZCL_STATUS_SUCCESS then this callback is merely informative and no response mesasge will be generated by the server."/>
      <arg name="returnValue" type="int32u*" description="If the server returns TRUE indicating that the client should apply the upgrade, this time value indicates when in the future the client should apply the upgrade."/>
      <arg name="imageId" type="const EmberAfOtaImageId*" description="This variable indicates the software version that the client successfully downloaded and is asking to upgrade to."/>
      <codeForStub>
// If the status value is not EMBER_ZCL_STATUS_SUCCESS, then this callback is
  // merely informative and no response message will be generated by the server.
  // If the server wants the client to NOT apply the upgrade, then it should
  // return FALSE.
  // If the server wants the client to apply the upgrade, it should return TRUE
  // and set the 'returnValue' parameter to when it wants the client to
  // apply the upgrade.  There are three possible values:
  //   0               =  Apply the upgrade now
  //   0xFFFFFFFF      =  Don't apply yet, ask again later.
  //   (anything-else) =  Apply the upgrade X minutes from now.
  *returnValue = 0;
  return TRUE;
      </codeForStub>
    </function>
<!-- NOTE:  This should be turned into a plugin callback instead of a generic callback.  But for now it is here (RBA).-->
    <function id="OTA_PAGE_REQUEST_SERVER_POLICY" name="Ota Page Request Server Policy" returnType="int8u">
      <description>
        This callback is called by the OTA server page request code when it wants to determine if it is allowed for an OTA client to make a page request.  It is only called if page request support has been enabled on the server.  It should return EMBER_ZCL_STATUS_SUCCESS if it allows the page request, and EMBER_ZCL_STATUS_UNSUP_CLUSTER_COMMAND if it does not want to allow it.
      </description>
      <codeForStub>
return EMBER_ZCL_STATUS_SUCCESS;
      </codeForStub>
    </function>
    <function id="ENDPOINT_IN_GROUP" name="Endpoint In Group" returnType="boolean" cluster="Groups" side="server">
      <description>
        This function is called by the framework when it needs to determine if an endpoint is a member of a group.  The application should return TRUE if the endpoint is a member of the group and FALSE otherwise.
      </description>
      <arg name="endpoint" type="int8u"  description="The endpoint." />
      <arg name="groupId"  type="int16u" description="The group identifier." />
      <codeForStub>
        return FALSE;
      </codeForStub>
    </function>
    <function id="CLEAR_GROUP_TABLE" name="Clear Group Table" returnType="void" cluster="Groups" side="server">
      <description>
        This function is called by the framework when the application should clear the group table.
      </description>
      <codeForStub />
    </function>
    <function id="STORE_CURRENT_SCENE" name="Store Current Scene" returnType="EmberAfStatus" cluster="Scenes" side="server">
      <description>
        This function is called by the framework when the application should store the current scene.  If an entry already exists in the scene table with the same scene and group ids, the application should update the entry with the current scene.  Otherwise, a new entry should be adde to the scene table, if possible.
      </description>
      <arg name="endpoint" type="int8u" description="The endpoint." />
      <arg name="groupId" type="int16u" description="The group identifier." />
      <arg name="sceneId" type="int8u" description="The scene identifier." />
      <codeForStub>
        return EMBER_ZCL_STATUS_FAILURE;
      </codeForStub>
    </function>
    <function id="RECALL_SAVED_SCENE" name="Recall Saved Scene" returnType="EmberAfStatus" cluster="Scenes" side="server">
      <description>
        This function is called by the framework when the application should recall a saved scene.
      </description>
      <arg name="endpoint" type="int8u" description="The endpoint." />
      <arg name="groupId" type="int16u" description="The group identifier." />
      <arg name="sceneId" type="int8u" description="The scene identifier." />
      <codeForStub>
        return EMBER_ZCL_STATUS_FAILURE;
      </codeForStub>
    </function>
    <function id="CLEAR_SCENE_TABLE" name="ClearSceneTable" returnType="void" cluster="Scenes" side="server">
      <description>
        This function is called by the framework when the application should clear the scene table.
      </description>
      <codeForStub />
    </function>
    <function id="INTERPAN_SEND_MESSAGE" name="Interpan Send Message" returnType="EmberStatus">
      <description>
        This function will send a raw MAC message with interpan frame format using the passed parameters.
      </description>
      <arg name="header" type="EmberAfInterpanHeader*" description="Interpan header info"/>
      <arg name="messageLength" type="int16u" description="The length of the message received or to send"/>
      <arg name="message" type="int8u*" description="The message data received or to send."/>
      <codeForStub>
        return EMBER_LIBRARY_NOT_PRESENT;
      </codeForStub>
    </function>
    <function id="INTERPAN_INIT" name="Interpan Init" returnType="void">
      <description>
        Initializes the interpan functionality.
      </description>
      <codeForStub>
      </codeForStub>
    </function>
    <function id="UNUSED_PAN_ID_FOUND" name="Unused Pan Id Found" returnType="void">
      <description>
        This is called by the framework on behalf of the form-and-join library to notify the application of the PAN id and channel found following a call to ::emberScanForUnusedPanId().  See form-and-join documentation for more information.
      </description>
      <arg name="panId"   type="EmberPanId" description="" />
      <arg name="channel" type="int8u"      description="" />
      <codeForStub />
    </function>
    <function id="JOINABLE_NETWORK_FOUND" name="Joinable Network Found" returnType="void">
      <description>
        This is called by the framework on behalf of the form-and-join library to notify the application of the network found after a call to ::emberScanForJoinableNetwork() or ::emberScanForNextJoinableNetwork().  See form-and-join documentation for more information.
      </description>
      <arg name="networkFound" type="EmberZigbeeNetwork *" description="" />
      <arg name="lqi"          type="int8u"                description="" />
      <arg name="rssi"         type="int8s"                description="" />
      <codeForStub />
    </function>
    <function id="SCAN_ERROR" name="Scan Error" returnType="void">
      <description>
        This is called by the framework on behalf of the form-and-join library to notify the application if an error occurs while scanning.  See form-and-join documentation for more information.
      </description>
      <arg name="status" type="EmberStatus" description="The status of the scan." />
      <codeForStub />
    </function>
    <function id="FIND_UNUSED_PAN_ID_AND_FORM" name="Find Unused Pan Id And Form" returnType="EmberStatus">
      <description>
        This function is called by the framework to search for an unused PAN id and form a new network.  The application should return EMBER_SUCCESS if the operation was initiated successfully.
      </description>
      <codeForStub>
        return EMBER_LIBRARY_NOT_PRESENT;
      </codeForStub>
    </function>
    <function id="START_SEARCH_FOR_JOINABLE_NETWORK" name="Start Search For Joinable Network" returnType="EmberStatus">
      <description>
        This function is called by the framework to search for joinable networks and join a network.  The application should return EMBER_SUCCESS if the operation was initiated successfully.
      </description>
      <codeForStub>
        return EMBER_LIBRARY_NOT_PRESENT;
      </codeForStub>
    </function>
    <function id="CONTINUE_JOINABLE_NETWORK_SEARCH" name="Continue Joinable Network Search" returnType="void">
      <description>
        This is called by the framework to instruct the application to continue its joinable network search.
      </description>
      <codeForStub />
    </function>
    <function id="NETWORK_FIND_OPERATION_COMPLETE" name="Network Find Operation Complete" returnType="void">
      <description>
        This is called by the framework when the network find operation is complete.
      </description>
      <codeForStub />
    </function>
    <function id="CLIENT_COMMAND_RECEIVED" name="Client Command Received" returnType="boolean" cluster="Key establishment" side="client">
      <description>
        This function is called by the application framework when a server-to-client key establishment command is received but has yet to be handled by the framework code.  This function should return a boolean value indicating whether the command has been handled by the application code and should not be further processed by the framework.
      </description>
      <arg name="cmd" type="EmberAfClusterCommand *" />
      <codeForStub>
        return FALSE;
      </codeForStub>
    </function>
    <function id="SERVER_COMMAND_RECEIVED" name="Server Command Received" returnType="boolean" cluster="Key establishment" side="server">
      <description>
        This function is called by the application framework when a client-to-server key establishment command is received but has yet to be handled by the framework code.  This function should return a boolean value indicating whether the command has been handled by the application code and should not be further processed by the framework.
      </description>
      <arg name="cmd" type="EmberAfClusterCommand *" />
      <codeForStub>
        return FALSE;
      </codeForStub>
    </function>
  </callback>
</configurator>
